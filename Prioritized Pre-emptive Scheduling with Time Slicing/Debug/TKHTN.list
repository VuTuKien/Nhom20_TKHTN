
TKHTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080076b8  080076b8  000086b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  00009218  2**0
                  CONTENTS
  4 .ARM          00000008  08007b48  08007b48  00008b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b50  08007b50  00009218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b54  08007b54  00008b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08007b58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001210  20000218  08007d70  00009218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001428  08007d70  00009428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001019f  00000000  00000000  00009241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e0  00000000  00000000  000193e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3c  00000000  00000000  0001cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dc1  00000000  00000000  0001db04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012abd  00000000  00000000  000378c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094807  00000000  00000000  0004a382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000deb89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058bc  00000000  00000000  000debcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000e4488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	080076a0 	.word	0x080076a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	080076a0 	.word	0x080076a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <vApplicationGetIdleTaskMemory+0x28>)
 8000f94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000234 	.word	0x20000234
 8000fb0:	20000288 	.word	0x20000288

08000fb4 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <microDelay+0x2c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000fc6:	bf00      	nop
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <microDelay+0x2c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3f9      	bcc.n	8000fc8 <microDelay+0x14>
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	200004dc 	.word	0x200004dc

08000fe4 <DisplayDigit>:
void DisplayDigit(uint8_t digit, uint8_t position) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	    // T?t t?t c? các LED (ngan trùng l?p)
	    HAL_GPIO_WritePin(GPIOB, digitPins[0] | digitPins[1] | digitPins[2], GPIO_PIN_RESET);
 8000ff4:	4b35      	ldr	r3, [pc, #212]	@ (80010cc <DisplayDigit+0xe8>)
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <DisplayDigit+0xe8>)
 8000ffa:	885b      	ldrh	r3, [r3, #2]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b32      	ldr	r3, [pc, #200]	@ (80010cc <DisplayDigit+0xe8>)
 8001002:	889b      	ldrh	r3, [r3, #4]
 8001004:	4313      	orrs	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	4830      	ldr	r0, [pc, #192]	@ (80010d0 <DisplayDigit+0xec>)
 800100e:	f001 f9cc 	bl	80023aa <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	@ 0x40
 8001016:	482f      	ldr	r0, [pc, #188]	@ (80010d4 <DisplayDigit+0xf0>)
 8001018:	f001 f9c7 	bl	80023aa <HAL_GPIO_WritePin>
	    uint8_t segments = digits[digit];
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a2e      	ldr	r2, [pc, #184]	@ (80010d8 <DisplayDigit+0xf4>)
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	72fb      	strb	r3, [r7, #11]
	    for (int i = 0; i < 7; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e023      	b.n	8001072 <DisplayDigit+0x8e>
	    	if (segments & (1 << i)) {
 800102a:	7afa      	ldrb	r2, [r7, #11]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fa42 f303 	asr.w	r3, r2, r3
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00c      	beq.n	8001054 <DisplayDigit+0x70>
	    	            // N?u bit th? i là 1, b?t segment, t?c là n?i chân v?i GND (LOW)
	    	            HAL_GPIO_WritePin(segmentPorts[i], segmentPins[i], GPIO_PIN_SET);  // B?t
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <DisplayDigit+0xf8>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001042:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <DisplayDigit+0xfc>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	f001 f9ac 	bl	80023aa <HAL_GPIO_WritePin>
 8001052:	e00b      	b.n	800106c <DisplayDigit+0x88>
	    	        } else {
	    	            // N?u bit th? i là 0, t?t segment, t?c là n?i chân v?i VCC (HIGH)
	    	            HAL_GPIO_WritePin(segmentPorts[i], segmentPins[i], GPIO_PIN_RESET);  // T?t
 8001054:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <DisplayDigit+0xf8>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800105c:	4a20      	ldr	r2, [pc, #128]	@ (80010e0 <DisplayDigit+0xfc>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	f001 f99f 	bl	80023aa <HAL_GPIO_WritePin>
	    for (int i = 0; i < 7; i++) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b06      	cmp	r3, #6
 8001076:	ddd8      	ble.n	800102a <DisplayDigit+0x46>
	    	        }
	    }

	    // B?t LED 7 thanh theo v? trí
	    if (position == 0) HAL_GPIO_WritePin(digitPorts[0], digitPins[0], GPIO_PIN_SET); // LED1
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d107      	bne.n	800108e <DisplayDigit+0xaa>
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <DisplayDigit+0x100>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <DisplayDigit+0xe8>)
 8001084:	8811      	ldrh	r1, [r2, #0]
 8001086:	2201      	movs	r2, #1
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f98e 	bl	80023aa <HAL_GPIO_WritePin>
	    if (position == 1){ HAL_GPIO_WritePin(digitPorts[1], digitPins[1], GPIO_PIN_SET);
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d10c      	bne.n	80010ae <DisplayDigit+0xca>
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <DisplayDigit+0x100>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a0c      	ldr	r2, [pc, #48]	@ (80010cc <DisplayDigit+0xe8>)
 800109a:	8851      	ldrh	r1, [r2, #2]
 800109c:	2201      	movs	r2, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f983 	bl	80023aa <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);// LED2
 80010a4:	2201      	movs	r2, #1
 80010a6:	2140      	movs	r1, #64	@ 0x40
 80010a8:	480a      	ldr	r0, [pc, #40]	@ (80010d4 <DisplayDigit+0xf0>)
 80010aa:	f001 f97e 	bl	80023aa <HAL_GPIO_WritePin>
	    }
	    if (position == 2) HAL_GPIO_WritePin(digitPorts[2], digitPins[2], GPIO_PIN_SET); // LED3
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d107      	bne.n	80010c4 <DisplayDigit+0xe0>
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <DisplayDigit+0x100>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <DisplayDigit+0xe8>)
 80010ba:	8891      	ldrh	r1, [r2, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f973 	bl	80023aa <HAL_GPIO_WritePin>
	}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000038 	.word	0x20000038
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40010800 	.word	0x40010800
 80010d8:	080077a0 	.word	0x080077a0
 80010dc:	20000000 	.word	0x20000000
 80010e0:	2000001c 	.word	0x2000001c
 80010e4:	2000002c 	.word	0x2000002c

080010e8 <DisplayNumber>:
	void DisplayNumber(uint16_t number) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
	    uint8_t hundreds = number / 100;        // L?y hàng tram
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001174 <DisplayNumber+0x8c>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	73fb      	strb	r3, [r7, #15]
	    uint8_t tens = (number / 10) % 10;     // L?y hàng ch?c
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4a1d      	ldr	r2, [pc, #116]	@ (8001178 <DisplayNumber+0x90>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <DisplayNumber+0x90>)
 800110e:	fba3 1302 	umull	r1, r3, r3, r2
 8001112:	08d9      	lsrs	r1, r3, #3
 8001114:	460b      	mov	r3, r1
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	73bb      	strb	r3, [r7, #14]
	    uint8_t units = number % 10;           // L?y hàng don v?
 8001122:	88fa      	ldrh	r2, [r7, #6]
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <DisplayNumber+0x90>)
 8001126:	fba3 1302 	umull	r1, r3, r3, r2
 800112a:	08d9      	lsrs	r1, r3, #3
 800112c:	460b      	mov	r3, r1
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	737b      	strb	r3, [r7, #13]

	    // Hi?n th? t?ng ch? s? v?i quét nhanh
	    DisplayDigit(hundreds, 0);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff50 	bl	8000fe4 <DisplayDigit>
	    HAL_Delay(1); // D?ng ng?n d? hi?n th?
 8001144:	2001      	movs	r0, #1
 8001146:	f000 fe8d 	bl	8001e64 <HAL_Delay>
	    DisplayDigit(tens, 1);
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2101      	movs	r1, #1
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff48 	bl	8000fe4 <DisplayDigit>
	    HAL_Delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fe85 	bl	8001e64 <HAL_Delay>
	    DisplayDigit(units, 2);
 800115a:	7b7b      	ldrb	r3, [r7, #13]
 800115c:	2102      	movs	r1, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff40 	bl	8000fe4 <DisplayDigit>
	    HAL_Delay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f000 fe7d 	bl	8001e64 <HAL_Delay>
	}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	51eb851f 	.word	0x51eb851f
 8001178:	cccccccd 	.word	0xcccccccd

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b0a4      	sub	sp, #144	@ 0x90
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 fe0d 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f885 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f000 f943 	bl	8001414 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800118e:	f000 f917 	bl	80013c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001192:	f000 f8c5 	bl	8001320 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001196:	4833      	ldr	r0, [pc, #204]	@ (8001264 <main+0xe8>)
 8001198:	f001 fd80 	bl	8002c9c <HAL_TIM_Base_Start>
   HAL_UART_Init(&huart1);
 800119c:	4832      	ldr	r0, [pc, #200]	@ (8001268 <main+0xec>)
 800119e:	f001 fff1 	bl	8003184 <HAL_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, RunTask1, osPriorityLow, 0, 32);
 80011a2:	4b32      	ldr	r3, [pc, #200]	@ (800126c <main+0xf0>)
 80011a4:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80011b6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 fa23 	bl	8003608 <osThreadCreate>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001270 <main+0xf4>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, RunTask2, osPriorityBelowNormal, 0, 190);
 80011c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <main+0xf8>)
 80011ca:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80011dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fa10 	bl	8003608 <osThreadCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <main+0xfc>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, RunTask3, osPriorityNormal, 0, 64);
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <main+0x100>)
 80011f0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80011f4:	461d      	mov	r5, r3
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8001202:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f002 f9fd 	bl	8003608 <osThreadCreate>
 800120e:	4603      	mov	r3, r0
 8001210:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <main+0x104>)
 8001212:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task4 */
  osThreadDef(Task4, RunTask4, osPriorityAboveNormal, 0, 190);
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <main+0x108>)
 8001216:	f107 0420 	add.w	r4, r7, #32
 800121a:	461d      	mov	r5, r3
 800121c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f002 f9ea 	bl	8003608 <osThreadCreate>
 8001234:	4603      	mov	r3, r0
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <main+0x10c>)
 8001238:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task5 */
  osThreadDef(Task5, RunTask5, osPriorityHigh, 0, 64);
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <main+0x110>)
 800123c:	1d3c      	adds	r4, r7, #4
 800123e:	461d      	mov	r5, r3
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task5Handle = osThreadCreate(osThread(Task5), NULL);
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f002 f9d9 	bl	8003608 <osThreadCreate>
 8001256:	4603      	mov	r3, r0
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <main+0x114>)
 800125a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800125c:	f002 f9cd 	bl	80035fa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <main+0xe4>
 8001264:	200004dc 	.word	0x200004dc
 8001268:	20000524 	.word	0x20000524
 800126c:	080076c0 	.word	0x080076c0
 8001270:	2000056c 	.word	0x2000056c
 8001274:	080076e4 	.word	0x080076e4
 8001278:	20000570 	.word	0x20000570
 800127c:	08007708 	.word	0x08007708
 8001280:	20000574 	.word	0x20000574
 8001284:	0800772c 	.word	0x0800772c
 8001288:	20000578 	.word	0x20000578
 800128c:	08007750 	.word	0x08007750
 8001290:	2000057c 	.word	0x2000057c

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b090      	sub	sp, #64	@ 0x40
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	2228      	movs	r2, #40	@ 0x28
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 f929 	bl	80054fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 f87d 	bl	80023dc <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012e8:	f000 fb9e 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2102      	movs	r1, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f001 faea 	bl	80028e0 <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001312:	f000 fb89 	bl	8001a28 <Error_Handler>
  }
}
 8001316:	bf00      	nop
 8001318:	3740      	adds	r7, #64	@ 0x40
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_TIM1_Init+0x98>)
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <MX_TIM1_Init+0x9c>)
 8001340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_TIM1_Init+0x98>)
 8001344:	2247      	movs	r2, #71	@ 0x47
 8001346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_TIM1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_TIM1_Init+0x98>)
 8001350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_TIM1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_TIM1_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_TIM1_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <MX_TIM1_Init+0x98>)
 800136a:	f001 fc47 	bl	8002bfc <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001374:	f000 fb58 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_TIM1_Init+0x98>)
 8001386:	f001 fcd3 	bl	8002d30 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001390:	f000 fb4a 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_TIM1_Init+0x98>)
 80013a2:	f001 fe91 	bl	80030c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013ac:	f000 fb3c 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200004dc 	.word	0x200004dc
 80013bc:	40012c00 	.word	0x40012c00

080013c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_USART1_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013f8:	f001 fec4 	bl	8003184 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 fb11 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000524 	.word	0x20000524
 8001410:	40013800 	.word	0x40013800

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 800142e:	f043 0320 	orr.w	r3, r3, #32
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a20      	ldr	r2, [pc, #128]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a1a      	ldr	r2, [pc, #104]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <MX_GPIO_Init+0xb4>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001470:	2200      	movs	r2, #0
 8001472:	21fe      	movs	r1, #254	@ 0xfe
 8001474:	4815      	ldr	r0, [pc, #84]	@ (80014cc <MX_GPIO_Init+0xb8>)
 8001476:	f000 ff98 	bl	80023aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800147a:	2200      	movs	r2, #0
 800147c:	f640 5103 	movw	r1, #3331	@ 0xd03
 8001480:	4813      	ldr	r0, [pc, #76]	@ (80014d0 <MX_GPIO_Init+0xbc>)
 8001482:	f000 ff92 	bl	80023aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001486:	23fe      	movs	r3, #254	@ 0xfe
 8001488:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2302      	movs	r3, #2
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	4619      	mov	r1, r3
 800149c:	480b      	ldr	r0, [pc, #44]	@ (80014cc <MX_GPIO_Init+0xb8>)
 800149e:	f000 fde9 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80014a2:	f640 5303 	movw	r3, #3331	@ 0xd03
 80014a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_GPIO_Init+0xbc>)
 80014bc:	f000 fdda 	bl	8002074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00

080014d4 <DHT22_Start.0>:
/* USER CODE END Header_RunTask1 */
void RunTask1(void const * argument)
{
  /* USER CODE BEGIN 5 */
	uint8_t DHT22_Start (void)
	{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	f8c7 c004 	str.w	ip, [r7, #4]
	  uint8_t Response = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	77fb      	strb	r3, [r7, #31]
	  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
	  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 80014f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	482d      	ldr	r0, [pc, #180]	@ (80015c0 <DHT22_Start.0+0xec>)
 800150a:	f000 fdb3 	bl	8002074 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001514:	482a      	ldr	r0, [pc, #168]	@ (80015c0 <DHT22_Start.0+0xec>)
 8001516:	f000 ff48 	bl	80023aa <HAL_GPIO_WritePin>
	  microDelay (1300);   // wait for 1300us
 800151a:	f240 5014 	movw	r0, #1300	@ 0x514
 800151e:	f7ff fd49 	bl	8000fb4 <microDelay>
	  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001528:	4825      	ldr	r0, [pc, #148]	@ (80015c0 <DHT22_Start.0+0xec>)
 800152a:	f000 ff3e 	bl	80023aa <HAL_GPIO_WritePin>
	  microDelay (30);   // wait for 30us
 800152e:	201e      	movs	r0, #30
 8001530:	f7ff fd40 	bl	8000fb4 <microDelay>
	  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
	  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	481f      	ldr	r0, [pc, #124]	@ (80015c0 <DHT22_Start.0+0xec>)
 8001544:	f000 fd96 	bl	8002074 <HAL_GPIO_Init>
	  microDelay (40);
 8001548:	2028      	movs	r0, #40	@ 0x28
 800154a:	f7ff fd33 	bl	8000fb4 <microDelay>
	  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 800154e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001552:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <DHT22_Start.0+0xec>)
 8001554:	f000 ff12 	bl	800237c <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <DHT22_Start.0+0xa4>
	  {
	    microDelay (80);
 800155e:	2050      	movs	r0, #80	@ 0x50
 8001560:	f7ff fd28 	bl	8000fb4 <microDelay>
	    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 8001564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001568:	4815      	ldr	r0, [pc, #84]	@ (80015c0 <DHT22_Start.0+0xec>)
 800156a:	f000 ff07 	bl	800237c <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <DHT22_Start.0+0xa4>
 8001574:	2301      	movs	r3, #1
 8001576:	77fb      	strb	r3, [r7, #31]
	  }
	  pMillis = HAL_GetTick();
 8001578:	f000 fc6a 	bl	8001e50 <HAL_GetTick>
 800157c:	4603      	mov	r3, r0
 800157e:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <DHT22_Start.0+0xf0>)
 8001580:	6013      	str	r3, [r2, #0]
	  cMillis = HAL_GetTick();
 8001582:	f000 fc65 	bl	8001e50 <HAL_GetTick>
 8001586:	4603      	mov	r3, r0
 8001588:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <DHT22_Start.0+0xf4>)
 800158a:	6013      	str	r3, [r2, #0]
	  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800158c:	e004      	b.n	8001598 <DHT22_Start.0+0xc4>
	  {
	    cMillis = HAL_GetTick();
 800158e:	f000 fc5f 	bl	8001e50 <HAL_GetTick>
 8001592:	4603      	mov	r3, r0
 8001594:	4a0c      	ldr	r2, [pc, #48]	@ (80015c8 <DHT22_Start.0+0xf4>)
 8001596:	6013      	str	r3, [r2, #0]
	  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <DHT22_Start.0+0xec>)
 800159e:	f000 feed 	bl	800237c <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <DHT22_Start.0+0xe2>
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <DHT22_Start.0+0xf0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1c9a      	adds	r2, r3, #2
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <DHT22_Start.0+0xf4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d8eb      	bhi.n	800158e <DHT22_Start.0+0xba>
	  }
	  return Response;
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
	}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010c00 	.word	0x40010c00
 80015c4:	20000490 	.word	0x20000490
 80015c8:	20000494 	.word	0x20000494

080015cc <RunTask1>:
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
void RunTask1(void const * argument)
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	60fb      	str	r3, [r7, #12]
	  return b;
	}
  /* Infinite loop */
  for(;;)
  {
		if(DHT22_Start())
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	469c      	mov	ip, r3
 80015e0:	f7ff ff78 	bl	80014d4 <DHT22_Start.0>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f7      	beq.n	80015da <RunTask1+0xe>
  {
    RH1 = DHT22_Read(); // First 8bits of humidity
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	469c      	mov	ip, r3
 80015f0:	f000 f8d4 	bl	800179c <DHT22_Read.1>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001764 <RunTask1+0x198>)
 80015fa:	701a      	strb	r2, [r3, #0]
    RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	469c      	mov	ip, r3
 8001602:	f000 f8cb 	bl	800179c <DHT22_Read.1>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	4b57      	ldr	r3, [pc, #348]	@ (8001768 <RunTask1+0x19c>)
 800160c:	701a      	strb	r2, [r3, #0]
    TC1 = DHT22_Read(); // First 8bits of Celsius
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	469c      	mov	ip, r3
 8001614:	f000 f8c2 	bl	800179c <DHT22_Read.1>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <RunTask1+0x1a0>)
 800161e:	701a      	strb	r2, [r3, #0]
    TC2 = DHT22_Read(); // Second 8bits of Celsius
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	469c      	mov	ip, r3
 8001626:	f000 f8b9 	bl	800179c <DHT22_Read.1>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <RunTask1+0x1a4>)
 8001630:	701a      	strb	r2, [r3, #0]
    SUM = DHT22_Read(); // Check sum
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	469c      	mov	ip, r3
 8001638:	f000 f8b0 	bl	800179c <DHT22_Read.1>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b4c      	ldr	r3, [pc, #304]	@ (8001774 <RunTask1+0x1a8>)
 8001642:	701a      	strb	r2, [r3, #0]
    CHECK = RH1 + RH2 + TC1 + TC2;
 8001644:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <RunTask1+0x198>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <RunTask1+0x19c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b46      	ldr	r3, [pc, #280]	@ (800176c <RunTask1+0x1a0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4413      	add	r3, r2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b45      	ldr	r3, [pc, #276]	@ (8001770 <RunTask1+0x1a4>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4413      	add	r3, r2
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <RunTask1+0x1ac>)
 8001662:	701a      	strb	r2, [r3, #0]
    if (CHECK == SUM)
 8001664:	4b44      	ldr	r3, [pc, #272]	@ (8001778 <RunTask1+0x1ac>)
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	4b42      	ldr	r3, [pc, #264]	@ (8001774 <RunTask1+0x1a8>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d1b4      	bne.n	80015da <RunTask1+0xe>
    {
      if (TC1>127) // If TC1=10000000, negative temperature
 8001670:	4b3e      	ldr	r3, [pc, #248]	@ (800176c <RunTask1+0x1a0>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	da1d      	bge.n	80016b6 <RunTask1+0xea>
      {
        tCelsius = (float)TC2/10*(-1);
 800167a:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <RunTask1+0x1a4>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fab8 	bl	8000bf4 <__aeabi_ui2f>
 8001684:	4603      	mov	r3, r0
 8001686:	493d      	ldr	r1, [pc, #244]	@ (800177c <RunTask1+0x1b0>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbbf 	bl	8000e0c <__aeabi_fdiv>
 800168e:	4603      	mov	r3, r0
 8001690:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001694:	4a3a      	ldr	r2, [pc, #232]	@ (8001780 <RunTask1+0x1b4>)
 8001696:	6013      	str	r3, [r2, #0]
		T=tCelsius*10;
 8001698:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <RunTask1+0x1b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4937      	ldr	r1, [pc, #220]	@ (800177c <RunTask1+0x1b0>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb00 	bl	8000ca4 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fc4c 	bl	8000f44 <__aeabi_f2uiz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <RunTask1+0x1b8>)
 80016b2:	801a      	strh	r2, [r3, #0]
 80016b4:	e01f      	b.n	80016f6 <RunTask1+0x12a>
      }
      else
      {
        tCelsius = (float)((TC1<<8)|TC2)/10;
 80016b6:	4b2d      	ldr	r3, [pc, #180]	@ (800176c <RunTask1+0x1a0>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001770 <RunTask1+0x1a4>)
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa9a 	bl	8000bfc <__aeabi_i2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	492c      	ldr	r1, [pc, #176]	@ (800177c <RunTask1+0x1b0>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb9d 	bl	8000e0c <__aeabi_fdiv>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <RunTask1+0x1b4>)
 80016d8:	601a      	str	r2, [r3, #0]
		T=tCelsius*10;
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <RunTask1+0x1b4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4927      	ldr	r1, [pc, #156]	@ (800177c <RunTask1+0x1b0>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fadf 	bl	8000ca4 <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fc2b 	bl	8000f44 <__aeabi_f2uiz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <RunTask1+0x1b8>)
 80016f4:	801a      	strh	r2, [r3, #0]
      }
      tFahrenheit = tCelsius * 9/5 + 32;
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <RunTask1+0x1b4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4923      	ldr	r1, [pc, #140]	@ (8001788 <RunTask1+0x1bc>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fad1 	bl	8000ca4 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	4921      	ldr	r1, [pc, #132]	@ (800178c <RunTask1+0x1c0>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb80 	bl	8000e0c <__aeabi_fdiv>
 800170c:	4603      	mov	r3, r0
 800170e:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f9be 	bl	8000a94 <__addsf3>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <RunTask1+0x1c4>)
 800171e:	601a      	str	r2, [r3, #0]
      RH = (float) ((RH1<<8)|RH2)/10;
 8001720:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <RunTask1+0x198>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <RunTask1+0x19c>)
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fa65 	bl	8000bfc <__aeabi_i2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4911      	ldr	r1, [pc, #68]	@ (800177c <RunTask1+0x1b0>)
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb68 	bl	8000e0c <__aeabi_fdiv>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <RunTask1+0x1c8>)
 8001742:	601a      	str	r2, [r3, #0]
      H=RH*10;
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <RunTask1+0x1c8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	490c      	ldr	r1, [pc, #48]	@ (800177c <RunTask1+0x1b0>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff faaa 	bl	8000ca4 <__aeabi_fmul>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fbf6 	bl	8000f44 <__aeabi_f2uiz>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <RunTask1+0x1cc>)
 800175e:	801a      	strh	r2, [r3, #0]
		if(DHT22_Start())
 8001760:	e73b      	b.n	80015da <RunTask1+0xe>
 8001762:	bf00      	nop
 8001764:	20000488 	.word	0x20000488
 8001768:	20000489 	.word	0x20000489
 800176c:	2000048a 	.word	0x2000048a
 8001770:	2000048b 	.word	0x2000048b
 8001774:	2000048c 	.word	0x2000048c
 8001778:	2000048d 	.word	0x2000048d
 800177c:	41200000 	.word	0x41200000
 8001780:	20000498 	.word	0x20000498
 8001784:	200004d6 	.word	0x200004d6
 8001788:	41100000 	.word	0x41100000
 800178c:	40a00000 	.word	0x40a00000
 8001790:	2000049c 	.word	0x2000049c
 8001794:	200004a0 	.word	0x200004a0
 8001798:	200004d8 	.word	0x200004d8

0800179c <DHT22_Read.1>:
	{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	f8c7 c004 	str.w	ip, [r7, #4]
	  for (a=0;a<8;a++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e066      	b.n	800187a <DHT22_Read.1+0xde>
	    pMillis = HAL_GetTick();
 80017ac:	f000 fb50 	bl	8001e50 <HAL_GetTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a36      	ldr	r2, [pc, #216]	@ (800188c <DHT22_Read.1+0xf0>)
 80017b4:	6013      	str	r3, [r2, #0]
	    cMillis = HAL_GetTick();
 80017b6:	f000 fb4b 	bl	8001e50 <HAL_GetTick>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a34      	ldr	r2, [pc, #208]	@ (8001890 <DHT22_Read.1+0xf4>)
 80017be:	6013      	str	r3, [r2, #0]
	    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80017c0:	e004      	b.n	80017cc <DHT22_Read.1+0x30>
	      cMillis = HAL_GetTick();
 80017c2:	f000 fb45 	bl	8001e50 <HAL_GetTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a31      	ldr	r2, [pc, #196]	@ (8001890 <DHT22_Read.1+0xf4>)
 80017ca:	6013      	str	r3, [r2, #0]
	    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80017cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017d0:	4830      	ldr	r0, [pc, #192]	@ (8001894 <DHT22_Read.1+0xf8>)
 80017d2:	f000 fdd3 	bl	800237c <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <DHT22_Read.1+0x4e>
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <DHT22_Read.1+0xf0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1c9a      	adds	r2, r3, #2
 80017e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <DHT22_Read.1+0xf4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d8eb      	bhi.n	80017c2 <DHT22_Read.1+0x26>
	    microDelay (40);   // wait for 40 us
 80017ea:	2028      	movs	r0, #40	@ 0x28
 80017ec:	f7ff fbe2 	bl	8000fb4 <microDelay>
	    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80017f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017f4:	4827      	ldr	r0, [pc, #156]	@ (8001894 <DHT22_Read.1+0xf8>)
 80017f6:	f000 fdc1 	bl	800237c <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <DHT22_Read.1+0x82>
	      b&= ~(1<<(7-a));
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2201      	movs	r2, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	b25b      	sxtb	r3, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	b25a      	sxtb	r2, r3
 8001812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001816:	4013      	ands	r3, r2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	73bb      	strb	r3, [r7, #14]
 800181c:	e00b      	b.n	8001836 <DHT22_Read.1+0x9a>
	      b|= (1<<(7-a));
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	f1c3 0307 	rsb	r3, r3, #7
 8001824:	2201      	movs	r2, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	b25a      	sxtb	r2, r3
 800182c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001830:	4313      	orrs	r3, r2
 8001832:	b25b      	sxtb	r3, r3
 8001834:	73bb      	strb	r3, [r7, #14]
	    pMillis = HAL_GetTick();
 8001836:	f000 fb0b 	bl	8001e50 <HAL_GetTick>
 800183a:	4603      	mov	r3, r0
 800183c:	4a13      	ldr	r2, [pc, #76]	@ (800188c <DHT22_Read.1+0xf0>)
 800183e:	6013      	str	r3, [r2, #0]
	    cMillis = HAL_GetTick();
 8001840:	f000 fb06 	bl	8001e50 <HAL_GetTick>
 8001844:	4603      	mov	r3, r0
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <DHT22_Read.1+0xf4>)
 8001848:	6013      	str	r3, [r2, #0]
	    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800184a:	e004      	b.n	8001856 <DHT22_Read.1+0xba>
	      cMillis = HAL_GetTick();
 800184c:	f000 fb00 	bl	8001e50 <HAL_GetTick>
 8001850:	4603      	mov	r3, r0
 8001852:	4a0f      	ldr	r2, [pc, #60]	@ (8001890 <DHT22_Read.1+0xf4>)
 8001854:	6013      	str	r3, [r2, #0]
	    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001856:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800185a:	480e      	ldr	r0, [pc, #56]	@ (8001894 <DHT22_Read.1+0xf8>)
 800185c:	f000 fd8e 	bl	800237c <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <DHT22_Read.1+0xd8>
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <DHT22_Read.1+0xf0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1c9a      	adds	r2, r3, #2
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <DHT22_Read.1+0xf4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8eb      	bhi.n	800184c <DHT22_Read.1+0xb0>
	  for (a=0;a<8;a++)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	3301      	adds	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b07      	cmp	r3, #7
 800187e:	d995      	bls.n	80017ac <DHT22_Read.1+0x10>
	  return b;
 8001880:	7bbb      	ldrb	r3, [r7, #14]
	}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000490 	.word	0x20000490
 8001890:	20000494 	.word	0x20000494
 8001894:	40010c00 	.word	0x40010c00

08001898 <RunTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTask2 */
void RunTask2(void const * argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTask2 */
	osDelay(1000);
 80018a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a4:	f001 fefc 	bl	80036a0 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	  // Gui nhiet do qua UART
	    sprintf(uart_buffer, "Temperature: %.1fC\r\n", tCelsius); // Gui nhiet do
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <RunTask2+0x48>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fdbb 	bl	8000428 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	490b      	ldr	r1, [pc, #44]	@ (80018e4 <RunTask2+0x4c>)
 80018b8:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <RunTask2+0x50>)
 80018ba:	f003 fdbb 	bl	8005434 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80018be:	480a      	ldr	r0, [pc, #40]	@ (80018e8 <RunTask2+0x50>)
 80018c0:	f7fe fc46 	bl	8000150 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	4906      	ldr	r1, [pc, #24]	@ (80018e8 <RunTask2+0x50>)
 80018ce:	4807      	ldr	r0, [pc, #28]	@ (80018ec <RunTask2+0x54>)
 80018d0:	f001 fca8 	bl	8003224 <HAL_UART_Transmit>
//		for(int i=0;i<=200;i++){
//		      DisplayNumber(T);
//		  }
//		HAL_GPIO_WritePin(GPIOB, digitPins[0] | digitPins[1] | digitPins[2], GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		osDelay(5000);
 80018d4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018d8:	f001 fee2 	bl	80036a0 <osDelay>
  {
 80018dc:	bf00      	nop
 80018de:	e7e3      	b.n	80018a8 <RunTask2+0x10>
 80018e0:	20000498 	.word	0x20000498
 80018e4:	0800776c 	.word	0x0800776c
 80018e8:	200004a4 	.word	0x200004a4
 80018ec:	20000524 	.word	0x20000524

080018f0 <RunTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTask3 */
void RunTask3(void const * argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTask3 */
	osDelay(2000);
 80018f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018fc:	f001 fed0 	bl	80036a0 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	 for(int i=0;i<=200;i++){
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e007      	b.n	8001916 <RunTask3+0x26>
     DisplayNumber(T);
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <RunTask3+0x60>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fbec 	bl	80010e8 <DisplayNumber>
	 for(int i=0;i<=200;i++){
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2bc8      	cmp	r3, #200	@ 0xc8
 800191a:	ddf4      	ble.n	8001906 <RunTask3+0x16>
  } HAL_GPIO_WritePin(GPIOB, digitPins[0] | digitPins[1] | digitPins[2], GPIO_PIN_RESET);
 800191c:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <RunTask3+0x64>)
 800191e:	881a      	ldrh	r2, [r3, #0]
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <RunTask3+0x64>)
 8001922:	885b      	ldrh	r3, [r3, #2]
 8001924:	4313      	orrs	r3, r2
 8001926:	b29a      	uxth	r2, r3
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <RunTask3+0x64>)
 800192a:	889b      	ldrh	r3, [r3, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	4808      	ldr	r0, [pc, #32]	@ (8001958 <RunTask3+0x68>)
 8001936:	f000 fd38 	bl	80023aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2140      	movs	r1, #64	@ 0x40
 800193e:	4807      	ldr	r0, [pc, #28]	@ (800195c <RunTask3+0x6c>)
 8001940:	f000 fd33 	bl	80023aa <HAL_GPIO_WritePin>
  osDelay(5000);
 8001944:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001948:	f001 feaa 	bl	80036a0 <osDelay>
	 for(int i=0;i<=200;i++){
 800194c:	e7d8      	b.n	8001900 <RunTask3+0x10>
 800194e:	bf00      	nop
 8001950:	200004d6 	.word	0x200004d6
 8001954:	20000038 	.word	0x20000038
 8001958:	40010c00 	.word	0x40010c00
 800195c:	40010800 	.word	0x40010800

08001960 <RunTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTask4 */
void RunTask4(void const * argument)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTask4 */
	  osDelay(3000);
 8001968:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800196c:	f001 fe98 	bl	80036a0 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	sprintf(uart_buffer, "Humidity: %.0f%%\r\n", RH); // Gui do am
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <RunTask4+0x48>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fd57 	bl	8000428 <__aeabi_f2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	490b      	ldr	r1, [pc, #44]	@ (80019ac <RunTask4+0x4c>)
 8001980:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <RunTask4+0x50>)
 8001982:	f003 fd57 	bl	8005434 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001986:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <RunTask4+0x50>)
 8001988:	f7fe fbe2 	bl	8000150 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	b29a      	uxth	r2, r3
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	4906      	ldr	r1, [pc, #24]	@ (80019b0 <RunTask4+0x50>)
 8001996:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <RunTask4+0x54>)
 8001998:	f001 fc44 	bl	8003224 <HAL_UART_Transmit>
     osDelay(5000);
 800199c:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019a0:	f001 fe7e 	bl	80036a0 <osDelay>
  {
 80019a4:	bf00      	nop
 80019a6:	e7e3      	b.n	8001970 <RunTask4+0x10>
 80019a8:	200004a0 	.word	0x200004a0
 80019ac:	08007784 	.word	0x08007784
 80019b0:	200004a4 	.word	0x200004a4
 80019b4:	20000524 	.word	0x20000524

080019b8 <RunTask5>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTask5 */
void RunTask5(void const * argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTask5 */
osDelay(4000);
 80019c0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80019c4:	f001 fe6c 	bl	80036a0 <osDelay>
  /* Infinite loop */
  for(;;)
  {
  for(int i=0;i<=200;i++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e007      	b.n	80019de <RunTask5+0x26>
  DisplayNumber(H);
 80019ce:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <RunTask5+0x60>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fb88 	bl	80010e8 <DisplayNumber>
  for(int i=0;i<=200;i++){
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80019e2:	ddf4      	ble.n	80019ce <RunTask5+0x16>
  }
  HAL_GPIO_WritePin(GPIOB, digitPins[0] | digitPins[1] | digitPins[2], GPIO_PIN_RESET);
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <RunTask5+0x64>)
 80019e6:	881a      	ldrh	r2, [r3, #0]
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <RunTask5+0x64>)
 80019ea:	885b      	ldrh	r3, [r3, #2]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <RunTask5+0x64>)
 80019f2:	889b      	ldrh	r3, [r3, #4]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	4808      	ldr	r0, [pc, #32]	@ (8001a20 <RunTask5+0x68>)
 80019fe:	f000 fcd4 	bl	80023aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2140      	movs	r1, #64	@ 0x40
 8001a06:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <RunTask5+0x6c>)
 8001a08:	f000 fccf 	bl	80023aa <HAL_GPIO_WritePin>
   osDelay(5000);
 8001a0c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a10:	f001 fe46 	bl	80036a0 <osDelay>
  for(int i=0;i<=200;i++){
 8001a14:	e7d8      	b.n	80019c8 <RunTask5+0x10>
 8001a16:	bf00      	nop
 8001a18:	200004d8 	.word	0x200004d8
 8001a1c:	20000038 	.word	0x20000038
 8001a20:	40010c00 	.word	0x40010c00
 8001a24:	40010800 	.word	0x40010800

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <Error_Handler+0x8>

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_MspInit+0x68>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4a17      	ldr	r2, [pc, #92]	@ (8001a9c <HAL_MspInit+0x68>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_MspInit+0x68>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_MspInit+0x68>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <HAL_MspInit+0x68>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_MspInit+0x68>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	f06f 0001 	mvn.w	r0, #1
 8001a72:	f000 fad6 	bl	8002022 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_MspInit+0x6c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_MspInit+0x6c>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000

08001aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x34>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10b      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_TIM_Base_MspInit+0x38>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_TIM_Base_MspInit+0x38>)
 8001abc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_TIM_Base_MspInit+0x38>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b6c <HAL_UART_MspInit+0x8c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d131      	bne.n	8001b64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	480b      	ldr	r0, [pc, #44]	@ (8001b74 <HAL_UART_MspInit+0x94>)
 8001b46:	f000 fa95 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <HAL_UART_MspInit+0x94>)
 8001b60:	f000 fa88 	bl	8002074 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010800 	.word	0x40010800

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <MemManage_Handler+0x4>

08001b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <UsageFault_Handler+0x4>

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 f93c 	bl	8001e2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bb4:	f002 fafe 	bl	80041b4 <xTaskGetSchedulerState>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bbe:	f002 fceb 	bl	8004598 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  return 1;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_kill>:

int _kill(int pid, int sig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bde:	f003 fcdf 	bl	80055a0 <__errno>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2216      	movs	r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
  return -1;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_exit>:

void _exit (int status)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffe7 	bl	8001bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c06:	bf00      	nop
 8001c08:	e7fd      	b.n	8001c06 <_exit+0x12>

08001c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e00a      	b.n	8001c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1c:	f3af 8000 	nop.w
 8001c20:	4601      	mov	r1, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	60ba      	str	r2, [r7, #8]
 8001c28:	b2ca      	uxtb	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dbf0      	blt.n	8001c1c <_read+0x12>
  }

  return len;
 8001c3a:	687b      	ldr	r3, [r7, #4]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e009      	b.n	8001c6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	60ba      	str	r2, [r7, #8]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf1      	blt.n	8001c56 <_write+0x12>
  }
  return len;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_close>:

int _close(int file)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <_isatty>:

int _isatty(int file)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f003 fc48 	bl	80055a0 <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20005000 	.word	0x20005000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	20000580 	.word	0x20000580
 8001d44:	20001428 	.word	0x20001428

08001d48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d54:	f7ff fff8 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d58:	480b      	ldr	r0, [pc, #44]	@ (8001d88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d5a:	490c      	ldr	r1, [pc, #48]	@ (8001d8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d60:	e002      	b.n	8001d68 <LoopCopyDataInit>

08001d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d66:	3304      	adds	r3, #4

08001d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d6c:	d3f9      	bcc.n	8001d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6e:	4a09      	ldr	r2, [pc, #36]	@ (8001d94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d70:	4c09      	ldr	r4, [pc, #36]	@ (8001d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d74:	e001      	b.n	8001d7a <LoopFillZerobss>

08001d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d78:	3204      	adds	r2, #4

08001d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d7c:	d3fb      	bcc.n	8001d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f003 fc15 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d82:	f7ff f9fb 	bl	800117c <main>
  bx lr
 8001d86:	4770      	bx	lr
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001d90:	08007b58 	.word	0x08007b58
  ldr r2, =_sbss
 8001d94:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001d98:	20001428 	.word	0x20001428

08001d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC1_2_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <HAL_Init+0x28>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <HAL_Init+0x28>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f92b 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fe3a 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f935 	bl	800205a <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f000 f90b 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	@ (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000040 	.word	0x20000040
 8001e24:	20000048 	.word	0x20000048
 8001e28:	20000044 	.word	0x20000044

08001e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_IncTick+0x1c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a03      	ldr	r2, [pc, #12]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000048 	.word	0x20000048
 8001e4c:	20000584 	.word	0x20000584

08001e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <HAL_GetTick+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000584 	.word	0x20000584

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff fff0 	bl	8001e50 <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffe0 	bl	8001e50 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000048 	.word	0x20000048

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	@ (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	@ (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff90 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff49 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff5e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff90 	bl	8001f64 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5f 	bl	8001f10 <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffb0 	bl	8001fc8 <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	@ 0x2c
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	e169      	b.n	800235c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002088:	2201      	movs	r2, #1
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8158 	bne.w	8002356 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a9a      	ldr	r2, [pc, #616]	@ (8002314 <HAL_GPIO_Init+0x2a0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d05e      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020b0:	4a98      	ldr	r2, [pc, #608]	@ (8002314 <HAL_GPIO_Init+0x2a0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d875      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020b6:	4a98      	ldr	r2, [pc, #608]	@ (8002318 <HAL_GPIO_Init+0x2a4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d058      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020bc:	4a96      	ldr	r2, [pc, #600]	@ (8002318 <HAL_GPIO_Init+0x2a4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d86f      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020c2:	4a96      	ldr	r2, [pc, #600]	@ (800231c <HAL_GPIO_Init+0x2a8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d052      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020c8:	4a94      	ldr	r2, [pc, #592]	@ (800231c <HAL_GPIO_Init+0x2a8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d869      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020ce:	4a94      	ldr	r2, [pc, #592]	@ (8002320 <HAL_GPIO_Init+0x2ac>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d04c      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020d4:	4a92      	ldr	r2, [pc, #584]	@ (8002320 <HAL_GPIO_Init+0x2ac>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d863      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020da:	4a92      	ldr	r2, [pc, #584]	@ (8002324 <HAL_GPIO_Init+0x2b0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d046      	beq.n	800216e <HAL_GPIO_Init+0xfa>
 80020e0:	4a90      	ldr	r2, [pc, #576]	@ (8002324 <HAL_GPIO_Init+0x2b0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d85d      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d82a      	bhi.n	8002140 <HAL_GPIO_Init+0xcc>
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d859      	bhi.n	80021a2 <HAL_GPIO_Init+0x12e>
 80020ee:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <HAL_GPIO_Init+0x80>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	0800216f 	.word	0x0800216f
 80020f8:	08002149 	.word	0x08002149
 80020fc:	0800215b 	.word	0x0800215b
 8002100:	0800219d 	.word	0x0800219d
 8002104:	080021a3 	.word	0x080021a3
 8002108:	080021a3 	.word	0x080021a3
 800210c:	080021a3 	.word	0x080021a3
 8002110:	080021a3 	.word	0x080021a3
 8002114:	080021a3 	.word	0x080021a3
 8002118:	080021a3 	.word	0x080021a3
 800211c:	080021a3 	.word	0x080021a3
 8002120:	080021a3 	.word	0x080021a3
 8002124:	080021a3 	.word	0x080021a3
 8002128:	080021a3 	.word	0x080021a3
 800212c:	080021a3 	.word	0x080021a3
 8002130:	080021a3 	.word	0x080021a3
 8002134:	080021a3 	.word	0x080021a3
 8002138:	08002151 	.word	0x08002151
 800213c:	08002165 	.word	0x08002165
 8002140:	4a79      	ldr	r2, [pc, #484]	@ (8002328 <HAL_GPIO_Init+0x2b4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002146:	e02c      	b.n	80021a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e029      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	3304      	adds	r3, #4
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e024      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	3308      	adds	r3, #8
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e01f      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	330c      	adds	r3, #12
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e01a      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002176:	2304      	movs	r3, #4
 8002178:	623b      	str	r3, [r7, #32]
          break;
 800217a:	e013      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	611a      	str	r2, [r3, #16]
          break;
 800218e:	e009      	b.n	80021a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002190:	2308      	movs	r3, #8
 8002192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	615a      	str	r2, [r3, #20]
          break;
 800219a:	e003      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e000      	b.n	80021a4 <HAL_GPIO_Init+0x130>
          break;
 80021a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2bff      	cmp	r3, #255	@ 0xff
 80021a8:	d801      	bhi.n	80021ae <HAL_GPIO_Init+0x13a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_Init+0x13e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2bff      	cmp	r3, #255	@ 0xff
 80021b8:	d802      	bhi.n	80021c0 <HAL_GPIO_Init+0x14c>
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_Init+0x152>
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	3b08      	subs	r3, #8
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	210f      	movs	r1, #15
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	6a39      	ldr	r1, [r7, #32]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80b1 	beq.w	8002356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f4:	4b4d      	ldr	r3, [pc, #308]	@ (800232c <HAL_GPIO_Init+0x2b8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a4c      	ldr	r2, [pc, #304]	@ (800232c <HAL_GPIO_Init+0x2b8>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b4a      	ldr	r3, [pc, #296]	@ (800232c <HAL_GPIO_Init+0x2b8>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800220c:	4a48      	ldr	r2, [pc, #288]	@ (8002330 <HAL_GPIO_Init+0x2bc>)
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a40      	ldr	r2, [pc, #256]	@ (8002334 <HAL_GPIO_Init+0x2c0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <HAL_GPIO_Init+0x1ec>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3f      	ldr	r2, [pc, #252]	@ (8002338 <HAL_GPIO_Init+0x2c4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00d      	beq.n	800225c <HAL_GPIO_Init+0x1e8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3e      	ldr	r2, [pc, #248]	@ (800233c <HAL_GPIO_Init+0x2c8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x1e4>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a3d      	ldr	r2, [pc, #244]	@ (8002340 <HAL_GPIO_Init+0x2cc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_GPIO_Init+0x1e0>
 8002250:	2303      	movs	r3, #3
 8002252:	e006      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 8002254:	2304      	movs	r3, #4
 8002256:	e004      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 8002258:	2302      	movs	r3, #2
 800225a:	e002      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_GPIO_Init+0x1ee>
 8002260:	2300      	movs	r3, #0
 8002262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002264:	f002 0203 	and.w	r2, r2, #3
 8002268:	0092      	lsls	r2, r2, #2
 800226a:	4093      	lsls	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002272:	492f      	ldr	r1, [pc, #188]	@ (8002330 <HAL_GPIO_Init+0x2bc>)
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800228c:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	492c      	ldr	r1, [pc, #176]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800229a:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4928      	ldr	r1, [pc, #160]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4922      	ldr	r1, [pc, #136]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60cb      	str	r3, [r1, #12]
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	491e      	ldr	r1, [pc, #120]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4918      	ldr	r1, [pc, #96]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ea:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4914      	ldr	r1, [pc, #80]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d021      	beq.n	8002348 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002304:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	490e      	ldr	r1, [pc, #56]	@ (8002344 <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e021      	b.n	8002356 <HAL_GPIO_Init+0x2e2>
 8002312:	bf00      	nop
 8002314:	10320000 	.word	0x10320000
 8002318:	10310000 	.word	0x10310000
 800231c:	10220000 	.word	0x10220000
 8002320:	10210000 	.word	0x10210000
 8002324:	10120000 	.word	0x10120000
 8002328:	10110000 	.word	0x10110000
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000
 8002334:	40010800 	.word	0x40010800
 8002338:	40010c00 	.word	0x40010c00
 800233c:	40011000 	.word	0x40011000
 8002340:	40011400 	.word	0x40011400
 8002344:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_GPIO_Init+0x304>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	43db      	mvns	r3, r3
 8002350:	4909      	ldr	r1, [pc, #36]	@ (8002378 <HAL_GPIO_Init+0x304>)
 8002352:	4013      	ands	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	f47f ae8e 	bne.w	8002088 <HAL_GPIO_Init+0x14>
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	372c      	adds	r7, #44	@ 0x2c
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40010400 	.word	0x40010400

0800237c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]
 80023b6:	4613      	mov	r3, r2
 80023b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ba:	787b      	ldrb	r3, [r7, #1]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023c6:	e003      	b.n	80023d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	041a      	lsls	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	611a      	str	r2, [r3, #16]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e272      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8087 	beq.w	800250a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023fc:	4b92      	ldr	r3, [pc, #584]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b04      	cmp	r3, #4
 8002406:	d00c      	beq.n	8002422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002408:	4b8f      	ldr	r3, [pc, #572]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d112      	bne.n	800243a <HAL_RCC_OscConfig+0x5e>
 8002414:	4b8c      	ldr	r3, [pc, #560]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002420:	d10b      	bne.n	800243a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002422:	4b89      	ldr	r3, [pc, #548]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06c      	beq.n	8002508 <HAL_RCC_OscConfig+0x12c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d168      	bne.n	8002508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e24c      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x76>
 8002444:	4b80      	ldr	r3, [pc, #512]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7f      	ldr	r2, [pc, #508]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800244a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e02e      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x98>
 800245a:	4b7b      	ldr	r3, [pc, #492]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7a      	ldr	r2, [pc, #488]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b78      	ldr	r3, [pc, #480]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a77      	ldr	r2, [pc, #476]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0xbc>
 800247e:	4b72      	ldr	r3, [pc, #456]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a71      	ldr	r2, [pc, #452]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6e      	ldr	r2, [pc, #440]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002498:	4b6b      	ldr	r3, [pc, #428]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6a      	ldr	r2, [pc, #424]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b68      	ldr	r3, [pc, #416]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a67      	ldr	r2, [pc, #412]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fcca 	bl	8001e50 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff fcc6 	bl	8001e50 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e200      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe4>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fcb6 	bl	8001e50 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff fcb2 	bl	8001e50 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	@ 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1ec      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x10c>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002516:	4b4c      	ldr	r3, [pc, #304]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002522:	4b49      	ldr	r3, [pc, #292]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x18c>
 800252e:	4b46      	ldr	r3, [pc, #280]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b43      	ldr	r3, [pc, #268]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x176>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1c0      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3d      	ldr	r3, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4939      	ldr	r1, [pc, #228]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b36      	ldr	r3, [pc, #216]	@ (800264c <HAL_RCC_OscConfig+0x270>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff fc6b 	bl	8001e50 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7ff fc67 	bl	8001e50 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1a1      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2d      	ldr	r3, [pc, #180]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b2a      	ldr	r3, [pc, #168]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4927      	ldr	r1, [pc, #156]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b26      	ldr	r3, [pc, #152]	@ (800264c <HAL_RCC_OscConfig+0x270>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fc4a 	bl	8001e50 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7ff fc46 	bl	8001e50 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e180      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d03a      	beq.n	8002660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d019      	beq.n	8002626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <HAL_RCC_OscConfig+0x274>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7ff fc2a 	bl	8001e50 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff fc26 	bl	8001e50 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e160      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f000 face 	bl	8002bc0 <RCC_Delay>
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002626:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_RCC_OscConfig+0x274>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fc10 	bl	8001e50 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002632:	e00f      	b.n	8002654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fc0c 	bl	8001e50 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d908      	bls.n	8002654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e146      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	42420000 	.word	0x42420000
 8002650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b92      	ldr	r3, [pc, #584]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e9      	bne.n	8002634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a6 	beq.w	80027ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b8b      	ldr	r3, [pc, #556]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b88      	ldr	r3, [pc, #544]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a87      	ldr	r2, [pc, #540]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]
 800268a:	4b85      	ldr	r3, [pc, #532]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b82      	ldr	r3, [pc, #520]	@ (80028a4 <HAL_RCC_OscConfig+0x4c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a6:	4b7f      	ldr	r3, [pc, #508]	@ (80028a4 <HAL_RCC_OscConfig+0x4c8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7e      	ldr	r2, [pc, #504]	@ (80028a4 <HAL_RCC_OscConfig+0x4c8>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7ff fbcd 	bl	8001e50 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7ff fbc9 	bl	8001e50 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b64      	cmp	r3, #100	@ 0x64
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e103      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b75      	ldr	r3, [pc, #468]	@ (80028a4 <HAL_RCC_OscConfig+0x4c8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x312>
 80026e0:	4b6f      	ldr	r3, [pc, #444]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a6e      	ldr	r2, [pc, #440]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	e02d      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x334>
 80026f6:	4b6a      	ldr	r3, [pc, #424]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a69      	ldr	r2, [pc, #420]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	4b67      	ldr	r3, [pc, #412]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a66      	ldr	r2, [pc, #408]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	e01c      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_OscConfig+0x356>
 8002718:	4b61      	ldr	r3, [pc, #388]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a60      	ldr	r2, [pc, #384]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	4b5e      	ldr	r3, [pc, #376]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a5d      	ldr	r2, [pc, #372]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6213      	str	r3, [r2, #32]
 8002730:	e00b      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 8002732:	4b5b      	ldr	r3, [pc, #364]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a5a      	ldr	r2, [pc, #360]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6213      	str	r3, [r2, #32]
 800273e:	4b58      	ldr	r3, [pc, #352]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a57      	ldr	r2, [pc, #348]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d015      	beq.n	800277e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7ff fb7d 	bl	8001e50 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7ff fb79 	bl	8001e50 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0b1      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	4b4b      	ldr	r3, [pc, #300]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ee      	beq.n	800275a <HAL_RCC_OscConfig+0x37e>
 800277c:	e014      	b.n	80027a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7ff fb67 	bl	8001e50 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fb63 	bl	8001e50 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e09b      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	4b40      	ldr	r3, [pc, #256]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4b3c      	ldr	r3, [pc, #240]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a3b      	ldr	r2, [pc, #236]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8087 	beq.w	80028d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c4:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d061      	beq.n	8002894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d146      	bne.n	8002866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d8:	4b33      	ldr	r3, [pc, #204]	@ (80028a8 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7ff fb37 	bl	8001e50 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7ff fb33 	bl	8001e50 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e06d      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	4b29      	ldr	r3, [pc, #164]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800280e:	4b24      	ldr	r3, [pc, #144]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4921      	ldr	r1, [pc, #132]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002820:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a19      	ldr	r1, [r3, #32]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	430b      	orrs	r3, r1
 8002832:	491b      	ldr	r1, [pc, #108]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x4cc>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7ff fb07 	bl	8001e50 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff fb03 	bl	8001e50 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e03d      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x46a>
 8002864:	e035      	b.n	80028d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_RCC_OscConfig+0x4cc>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff faf0 	bl	8001e50 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7ff faec 	bl	8001e50 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e026      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x498>
 8002892:	e01e      	b.n	80028d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e019      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
 80028a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_RCC_OscConfig+0x500>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d0      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f4:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d910      	bls.n	8002924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b67      	ldr	r3, [pc, #412]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 0207 	bic.w	r2, r3, #7
 800290a:	4965      	ldr	r1, [pc, #404]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a58      	ldr	r2, [pc, #352]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800295e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d040      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d115      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e073      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06b      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4936      	ldr	r1, [pc, #216]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d0:	f7ff fa3e 	bl	8001e50 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7ff fa3a 	bl	8001e50 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e053      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d210      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4922      	ldr	r1, [pc, #136]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490a      	ldr	r1, [pc, #40]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <HAL_RCC_ClockConfig+0x1cc>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f99c 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	080077ac 	.word	0x080077ac
 8002aac:	20000040 	.word	0x20000040
 8002ab0:	20000044 	.word	0x20000044

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ace:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x36>
 8002ae2:	e027      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae4:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae6:	613b      	str	r3, [r7, #16]
      break;
 8002ae8:	e027      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d010      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b02:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0c5b      	lsrs	r3, r3, #17
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b16:	fb03 f202 	mul.w	r2, r3, r2
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e004      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	613b      	str	r3, [r7, #16]
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b36:	613b      	str	r3, [r7, #16]
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	693b      	ldr	r3, [r7, #16]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	080077c4 	.word	0x080077c4
 8002b54:	080077d4 	.word	0x080077d4
 8002b58:	003d0900 	.word	0x003d0900

08002b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b02      	ldr	r3, [pc, #8]	@ (8002b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000040 	.word	0x20000040

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b74:	f7ff fff2 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4903      	ldr	r1, [pc, #12]	@ (8002b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	080077bc 	.word	0x080077bc

08002b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b9c:	f7ff ffde 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0adb      	lsrs	r3, r3, #11
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	080077bc 	.word	0x080077bc

08002bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <RCC_Delay+0x34>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <RCC_Delay+0x38>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bdc:	bf00      	nop
  }
  while (Delay --);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f9      	bne.n	8002bdc <RCC_Delay+0x1c>
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000040 	.word	0x20000040
 8002bf8:	10624dd3 	.word	0x10624dd3

08002bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e041      	b.n	8002c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe ff3e 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 f940 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d001      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a18      	ldr	r2, [pc, #96]	@ (8002d24 <HAL_TIM_Base_Start+0x88>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x48>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cce:	d009      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x48>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a14      	ldr	r2, [pc, #80]	@ (8002d28 <HAL_TIM_Base_Start+0x8c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x48>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a13      	ldr	r2, [pc, #76]	@ (8002d2c <HAL_TIM_Base_Start+0x90>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d111      	bne.n	8002d08 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d010      	beq.n	8002d18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d06:	e007      	b.n	8002d18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800

08002d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIM_ConfigClockSource+0x1c>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0b4      	b.n	8002eb6 <HAL_TIM_ConfigClockSource+0x186>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d84:	d03e      	beq.n	8002e04 <HAL_TIM_ConfigClockSource+0xd4>
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d8a:	f200 8087 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d92:	f000 8086 	beq.w	8002ea2 <HAL_TIM_ConfigClockSource+0x172>
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9a:	d87f      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b70      	cmp	r3, #112	@ 0x70
 8002d9e:	d01a      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8002da0:	2b70      	cmp	r3, #112	@ 0x70
 8002da2:	d87b      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b60      	cmp	r3, #96	@ 0x60
 8002da6:	d050      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x11a>
 8002da8:	2b60      	cmp	r3, #96	@ 0x60
 8002daa:	d877      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b50      	cmp	r3, #80	@ 0x50
 8002dae:	d03c      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0xfa>
 8002db0:	2b50      	cmp	r3, #80	@ 0x50
 8002db2:	d873      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b40      	cmp	r3, #64	@ 0x40
 8002db6:	d058      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x13a>
 8002db8:	2b40      	cmp	r3, #64	@ 0x40
 8002dba:	d86f      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b30      	cmp	r3, #48	@ 0x30
 8002dbe:	d064      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b30      	cmp	r3, #48	@ 0x30
 8002dc2:	d86b      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d060      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d867      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05c      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d05a      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd4:	e062      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002de6:	f000 f950 	bl	800308a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	609a      	str	r2, [r3, #8]
      break;
 8002e02:	e04f      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e14:	f000 f939 	bl	800308a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e26:	609a      	str	r2, [r3, #8]
      break;
 8002e28:	e03c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 f8b0 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2150      	movs	r1, #80	@ 0x50
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f907 	bl	8003056 <TIM_ITRx_SetConfig>
      break;
 8002e48:	e02c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 f8ce 	bl	8002ff8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2160      	movs	r1, #96	@ 0x60
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f8f7 	bl	8003056 <TIM_ITRx_SetConfig>
      break;
 8002e68:	e01c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	461a      	mov	r2, r3
 8002e78:	f000 f890 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2140      	movs	r1, #64	@ 0x40
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f8e7 	bl	8003056 <TIM_ITRx_SetConfig>
      break;
 8002e88:	e00c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f000 f8de 	bl	8003056 <TIM_ITRx_SetConfig>
      break;
 8002e9a:	e003      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	e000      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f90 <TIM_Base_SetConfig+0xd0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f94 <TIM_Base_SetConfig+0xd4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <TIM_Base_SetConfig+0xd8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <TIM_Base_SetConfig+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1f      	ldr	r2, [pc, #124]	@ (8002f94 <TIM_Base_SetConfig+0xd4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002f98 <TIM_Base_SetConfig+0xd8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f90 <TIM_Base_SetConfig+0xd0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
  }
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800

08002f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f023 030a 	bic.w	r3, r3, #10
 8002fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0210 	bic.w	r2, r3, #16
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	031b      	lsls	r3, r3, #12
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	f043 0307 	orr.w	r3, r3, #7
 8003078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	021a      	lsls	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030dc:	2302      	movs	r3, #2
 80030de:	e046      	b.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312c:	d009      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a10      	ldr	r2, [pc, #64]	@ (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10c      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800

08003184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e042      	b.n	800321c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fc98 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	@ 0x24
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f971 	bl	80034b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	@ 0x28
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b20      	cmp	r3, #32
 8003242:	d175      	bne.n	8003330 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UART_Transmit+0x2c>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e06e      	b.n	8003332 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2221      	movs	r2, #33	@ 0x21
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003262:	f7fe fdf5 	bl	8001e50 <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327c:	d108      	bne.n	8003290 <HAL_UART_Transmit+0x6c>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	e003      	b.n	8003298 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003298:	e02e      	b.n	80032f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2180      	movs	r1, #128	@ 0x80
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f848 	bl	800333a <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e03a      	b.n	8003332 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3302      	adds	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e007      	b.n	80032ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3301      	adds	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1cb      	bne.n	800329a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	2140      	movs	r1, #64	@ 0x40
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f814 	bl	800333a <UART_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e006      	b.n	8003332 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	e03b      	b.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d037      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe fd7c 	bl	8001e50 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <UART_WaitOnFlagUntilTimeout+0x30>
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e03a      	b.n	80033e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b80      	cmp	r3, #128	@ 0x80
 8003380:	d020      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d01d      	beq.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b08      	cmp	r3, #8
 8003394:	d116      	bne.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f81d 	bl	80033ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2208      	movs	r2, #8
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e00f      	b.n	80033e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d0b4      	beq.n	800334c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b095      	sub	sp, #84	@ 0x54
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800340a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003414:	643a      	str	r2, [r7, #64]	@ 0x40
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800341a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e5      	bne.n	80033f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	61fb      	str	r3, [r7, #28]
   return(result);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800344a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800344e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	d119      	bne.n	8003498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	60bb      	str	r3, [r7, #8]
   return(result);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	647b      	str	r3, [r7, #68]	@ 0x44
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003484:	61ba      	str	r2, [r7, #24]
 8003486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6979      	ldr	r1, [r7, #20]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	613b      	str	r3, [r7, #16]
   return(result);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e5      	bne.n	8003464 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034a6:	bf00      	nop
 80034a8:	3754      	adds	r7, #84	@ 0x54
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034ea:	f023 030c 	bic.w	r3, r3, #12
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2c      	ldr	r2, [pc, #176]	@ (80035c4 <UART_SetConfig+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d103      	bne.n	8003520 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7ff fb3e 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	e002      	b.n	8003526 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff fb26 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003524:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	4a22      	ldr	r2, [pc, #136]	@ (80035c8 <UART_SetConfig+0x118>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	0119      	lsls	r1, r3, #4
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009a      	lsls	r2, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	fbb2 f2f3 	udiv	r2, r2, r3
 800355c:	4b1a      	ldr	r3, [pc, #104]	@ (80035c8 <UART_SetConfig+0x118>)
 800355e:	fba3 0302 	umull	r0, r3, r3, r2
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2064      	movs	r0, #100	@ 0x64
 8003566:	fb00 f303 	mul.w	r3, r0, r3
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	3332      	adds	r3, #50	@ 0x32
 8003570:	4a15      	ldr	r2, [pc, #84]	@ (80035c8 <UART_SetConfig+0x118>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800357c:	4419      	add	r1, r3
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009a      	lsls	r2, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <UART_SetConfig+0x118>)
 8003596:	fba3 0302 	umull	r0, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2064      	movs	r0, #100	@ 0x64
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	@ 0x32
 80035a8:	4a07      	ldr	r2, [pc, #28]	@ (80035c8 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	440a      	add	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40013800 	.word	0x40013800
 80035c8:	51eb851f 	.word	0x51eb851f

080035cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035de:	2b84      	cmp	r3, #132	@ 0x84
 80035e0:	d005      	beq.n	80035ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4413      	add	r3, r2
 80035ea:	3303      	adds	r3, #3
 80035ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035fe:	f000 fadf 	bl	8003bc0 <vTaskStartScheduler>
  
  return osOK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}

08003608 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360a:	b089      	sub	sp, #36	@ 0x24
 800360c:	af04      	add	r7, sp, #16
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <osThreadCreate+0x54>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01c      	beq.n	800365c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685c      	ldr	r4, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691e      	ldr	r6, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ffc9 	bl	80035cc <makeFreeRtosPriority>
 800363a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003644:	9202      	str	r2, [sp, #8]
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	9100      	str	r1, [sp, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	4632      	mov	r2, r6
 800364e:	4629      	mov	r1, r5
 8003650:	4620      	mov	r0, r4
 8003652:	f000 f8e8 	bl	8003826 <xTaskCreateStatic>
 8003656:	4603      	mov	r3, r0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e01c      	b.n	8003696 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685c      	ldr	r4, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003668:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ffab 	bl	80035cc <makeFreeRtosPriority>
 8003676:	4602      	mov	r2, r0
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	9200      	str	r2, [sp, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4632      	mov	r2, r6
 8003684:	4629      	mov	r1, r5
 8003686:	4620      	mov	r0, r4
 8003688:	f000 f92d 	bl	80038e6 <xTaskCreate>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <osDelay+0x16>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	e000      	b.n	80036b8 <osDelay+0x18>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fa4b 	bl	8003b54 <vTaskDelay>
  
  return osOK;
 80036be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f103 0208 	add.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295
 80036e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f103 0208 	add.w	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f103 0208 	add.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	601a      	str	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e00c      	b.n	800379e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3308      	adds	r3, #8
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e002      	b.n	8003792 <vListInsert+0x2e>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d2f6      	bcs.n	800378c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6852      	ldr	r2, [r2, #4]
 80037f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d103      	bne.n	8003808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	1e5a      	subs	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003826:	b580      	push	{r7, lr}
 8003828:	b08e      	sub	sp, #56	@ 0x38
 800382a:	af04      	add	r7, sp, #16
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61fb      	str	r3, [r7, #28]
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	e7fd      	b.n	800386c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003870:	2354      	movs	r3, #84	@ 0x54
 8003872:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b54      	cmp	r3, #84	@ 0x54
 8003878:	d00b      	beq.n	8003892 <xTaskCreateStatic+0x6c>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	61bb      	str	r3, [r7, #24]
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	e7fd      	b.n	800388e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01e      	beq.n	80038d8 <xTaskCreateStatic+0xb2>
 800389a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038b2:	2300      	movs	r3, #0
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f850 	bl	8003970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038d2:	f000 f8d5 	bl	8003a80 <prvAddNewTaskToReadyList>
 80038d6:	e001      	b.n	80038dc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038dc:	697b      	ldr	r3, [r7, #20]
	}
 80038de:	4618      	mov	r0, r3
 80038e0:	3728      	adds	r7, #40	@ 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b08c      	sub	sp, #48	@ 0x30
 80038ea:	af04      	add	r7, sp, #16
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fe90 	bl	8004620 <pvPortMalloc>
 8003900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00e      	beq.n	8003926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003908:	2054      	movs	r0, #84	@ 0x54
 800390a:	f000 fe89 	bl	8004620 <pvPortMalloc>
 800390e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
 800391c:	e005      	b.n	800392a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f000 ff4c 	bl	80047bc <vPortFree>
 8003924:	e001      	b.n	800392a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	2300      	movs	r3, #0
 800393c:	9303      	str	r3, [sp, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f80e 	bl	8003970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003954:	69f8      	ldr	r0, [r7, #28]
 8003956:	f000 f893 	bl	8003a80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e002      	b.n	8003966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003966:	69bb      	ldr	r3, [r7, #24]
	}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003988:	3b01      	subs	r3, #1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f023 0307 	bic.w	r3, r3, #7
 8003996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <prvInitialiseNewTask+0x4a>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	617b      	str	r3, [r7, #20]
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	e7fd      	b.n	80039b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01f      	beq.n	8003a00 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	e012      	b.n	80039ec <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	7819      	ldrb	r1, [r3, #0]
 80039ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	3334      	adds	r3, #52	@ 0x34
 80039d6:	460a      	mov	r2, r1
 80039d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	d9e9      	bls.n	80039c6 <prvInitialiseNewTask+0x56>
 80039f2:	e000      	b.n	80039f6 <prvInitialiseNewTask+0x86>
			{
				break;
 80039f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fe:	e003      	b.n	8003a08 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d901      	bls.n	8003a12 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a0e:	2306      	movs	r3, #6
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a1c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	2200      	movs	r2, #0
 8003a22:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	3304      	adds	r3, #4
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fe6c 	bl	8003706 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	3318      	adds	r3, #24
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fe67 	bl	8003706 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	f1c3 0207 	rsb	r2, r3, #7
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a50:	2200      	movs	r2, #0
 8003a52:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	69b8      	ldr	r0, [r7, #24]
 8003a62:	f000 fc2b 	bl	80042bc <pxPortInitialiseStack>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a88:	f000 fd08 	bl	800449c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b38 <prvAddNewTaskToReadyList+0xb8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a29      	ldr	r2, [pc, #164]	@ (8003b38 <prvAddNewTaskToReadyList+0xb8>)
 8003a94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a96:	4b29      	ldr	r3, [pc, #164]	@ (8003b3c <prvAddNewTaskToReadyList+0xbc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a9e:	4a27      	ldr	r2, [pc, #156]	@ (8003b3c <prvAddNewTaskToReadyList+0xbc>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aa4:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <prvAddNewTaskToReadyList+0xb8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d110      	bne.n	8003ace <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003aac:	f000 fac4 	bl	8004038 <prvInitialiseTaskLists>
 8003ab0:	e00d      	b.n	8003ace <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ab2:	4b23      	ldr	r3, [pc, #140]	@ (8003b40 <prvAddNewTaskToReadyList+0xc0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aba:	4b20      	ldr	r3, [pc, #128]	@ (8003b3c <prvAddNewTaskToReadyList+0xbc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d802      	bhi.n	8003ace <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b3c <prvAddNewTaskToReadyList+0xbc>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <prvAddNewTaskToReadyList+0xc4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b44 <prvAddNewTaskToReadyList+0xc4>)
 8003ad6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <prvAddNewTaskToReadyList+0xc8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <prvAddNewTaskToReadyList+0xc8>)
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4a15      	ldr	r2, [pc, #84]	@ (8003b4c <prvAddNewTaskToReadyList+0xcc>)
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7ff fe0c 	bl	800371e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b06:	f000 fcf9 	bl	80044fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <prvAddNewTaskToReadyList+0xc0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00e      	beq.n	8003b30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <prvAddNewTaskToReadyList+0xbc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d207      	bcs.n	8003b30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <prvAddNewTaskToReadyList+0xd0>)
 8003b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000688 	.word	0x20000688
 8003b3c:	20000588 	.word	0x20000588
 8003b40:	20000694 	.word	0x20000694
 8003b44:	200006a4 	.word	0x200006a4
 8003b48:	20000690 	.word	0x20000690
 8003b4c:	2000058c 	.word	0x2000058c
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b66:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <vTaskDelay+0x64>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <vTaskDelay+0x32>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60bb      	str	r3, [r7, #8]
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	e7fd      	b.n	8003b82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b86:	f000 f87d 	bl	8003c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb2f 	bl	80041f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b92:	f000 f885 	bl	8003ca0 <xTaskResumeAll>
 8003b96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <vTaskDelay+0x68>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200006b0 	.word	0x200006b0
 8003bbc:	e000ed04 	.word	0xe000ed04

08003bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bce:	463a      	mov	r2, r7
 8003bd0:	1d39      	adds	r1, r7, #4
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f9d4 	bl	8000f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	9202      	str	r2, [sp, #8]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2300      	movs	r3, #0
 8003bec:	460a      	mov	r2, r1
 8003bee:	491f      	ldr	r1, [pc, #124]	@ (8003c6c <vTaskStartScheduler+0xac>)
 8003bf0:	481f      	ldr	r0, [pc, #124]	@ (8003c70 <vTaskStartScheduler+0xb0>)
 8003bf2:	f7ff fe18 	bl	8003826 <xTaskCreateStatic>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c74 <vTaskStartScheduler+0xb4>)
 8003bfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <vTaskStartScheduler+0xb4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e001      	b.n	8003c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d116      	bne.n	8003c42 <vTaskStartScheduler+0x82>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	613b      	str	r3, [r7, #16]
}
 8003c26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c28:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <vTaskStartScheduler+0xb8>)
 8003c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c30:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <vTaskStartScheduler+0xbc>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c36:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <vTaskStartScheduler+0xc0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c3c:	f000 fbbc 	bl	80043b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c40:	e00f      	b.n	8003c62 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d10b      	bne.n	8003c62 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	60fb      	str	r3, [r7, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	e7fd      	b.n	8003c5e <vTaskStartScheduler+0x9e>
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	08007798 	.word	0x08007798
 8003c70:	08004009 	.word	0x08004009
 8003c74:	200006ac 	.word	0x200006ac
 8003c78:	200006a8 	.word	0x200006a8
 8003c7c:	20000694 	.word	0x20000694
 8003c80:	2000068c 	.word	0x2000068c

08003c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c88:	4b04      	ldr	r3, [pc, #16]	@ (8003c9c <vTaskSuspendAll+0x18>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	4a03      	ldr	r2, [pc, #12]	@ (8003c9c <vTaskSuspendAll+0x18>)
 8003c90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	200006b0 	.word	0x200006b0

08003ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cae:	4b42      	ldr	r3, [pc, #264]	@ (8003db8 <xTaskResumeAll+0x118>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <xTaskResumeAll+0x2e>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	603b      	str	r3, [r7, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	e7fd      	b.n	8003cca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cce:	f000 fbe5 	bl	800449c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cd2:	4b39      	ldr	r3, [pc, #228]	@ (8003db8 <xTaskResumeAll+0x118>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	4a37      	ldr	r2, [pc, #220]	@ (8003db8 <xTaskResumeAll+0x118>)
 8003cda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cdc:	4b36      	ldr	r3, [pc, #216]	@ (8003db8 <xTaskResumeAll+0x118>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d161      	bne.n	8003da8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ce4:	4b35      	ldr	r3, [pc, #212]	@ (8003dbc <xTaskResumeAll+0x11c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05d      	beq.n	8003da8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cec:	e02e      	b.n	8003d4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cee:	4b34      	ldr	r3, [pc, #208]	@ (8003dc0 <xTaskResumeAll+0x120>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fd6a 	bl	80037d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fd65 	bl	80037d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	2201      	movs	r2, #1
 8003d10:	409a      	lsls	r2, r3
 8003d12:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc4 <xTaskResumeAll+0x124>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc4 <xTaskResumeAll+0x124>)
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4a27      	ldr	r2, [pc, #156]	@ (8003dc8 <xTaskResumeAll+0x128>)
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f7ff fcf3 	bl	800371e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3c:	4b23      	ldr	r3, [pc, #140]	@ (8003dcc <xTaskResumeAll+0x12c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d46:	4b22      	ldr	r3, [pc, #136]	@ (8003dd0 <xTaskResumeAll+0x130>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc0 <xTaskResumeAll+0x120>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1cc      	bne.n	8003cee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d5a:	f000 fa0b 	bl	8004174 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <xTaskResumeAll+0x134>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d6a:	f000 f837 	bl	8003ddc <xTaskIncrementTick>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d74:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <xTaskResumeAll+0x130>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f1      	bne.n	8003d6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d86:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <xTaskResumeAll+0x134>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d8c:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <xTaskResumeAll+0x130>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d98:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <xTaskResumeAll+0x138>)
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003da8:	f000 fba8 	bl	80044fc <vPortExitCritical>

	return xAlreadyYielded;
 8003dac:	68bb      	ldr	r3, [r7, #8]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200006b0 	.word	0x200006b0
 8003dbc:	20000688 	.word	0x20000688
 8003dc0:	20000648 	.word	0x20000648
 8003dc4:	20000690 	.word	0x20000690
 8003dc8:	2000058c 	.word	0x2000058c
 8003dcc:	20000588 	.word	0x20000588
 8003dd0:	2000069c 	.word	0x2000069c
 8003dd4:	20000698 	.word	0x20000698
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de6:	4b4f      	ldr	r3, [pc, #316]	@ (8003f24 <xTaskIncrementTick+0x148>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 808f 	bne.w	8003f0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003df0:	4b4d      	ldr	r3, [pc, #308]	@ (8003f28 <xTaskIncrementTick+0x14c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003df8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f28 <xTaskIncrementTick+0x14c>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d121      	bne.n	8003e48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e04:	4b49      	ldr	r3, [pc, #292]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	603b      	str	r3, [r7, #0]
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	e7fd      	b.n	8003e22 <xTaskIncrementTick+0x46>
 8003e26:	4b41      	ldr	r3, [pc, #260]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	4b40      	ldr	r3, [pc, #256]	@ (8003f30 <xTaskIncrementTick+0x154>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a3e      	ldr	r2, [pc, #248]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4a3e      	ldr	r2, [pc, #248]	@ (8003f30 <xTaskIncrementTick+0x154>)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f34 <xTaskIncrementTick+0x158>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	4a3c      	ldr	r2, [pc, #240]	@ (8003f34 <xTaskIncrementTick+0x158>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	f000 f996 	bl	8004174 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e48:	4b3b      	ldr	r3, [pc, #236]	@ (8003f38 <xTaskIncrementTick+0x15c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d348      	bcc.n	8003ee4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e52:	4b36      	ldr	r3, [pc, #216]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5c:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <xTaskIncrementTick+0x15c>)
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	601a      	str	r2, [r3, #0]
					break;
 8003e64:	e03e      	b.n	8003ee4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e66:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d203      	bcs.n	8003e86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <xTaskIncrementTick+0x15c>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e84:	e02e      	b.n	8003ee4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fca2 	bl	80037d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fc99 	bl	80037d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	4b24      	ldr	r3, [pc, #144]	@ (8003f3c <xTaskIncrementTick+0x160>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	4a22      	ldr	r2, [pc, #136]	@ (8003f3c <xTaskIncrementTick+0x160>)
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f40 <xTaskIncrementTick+0x164>)
 8003ec2:	441a      	add	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7ff fc27 	bl	800371e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <xTaskIncrementTick+0x168>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d3b9      	bcc.n	8003e52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee2:	e7b6      	b.n	8003e52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ee4:	4b17      	ldr	r3, [pc, #92]	@ (8003f44 <xTaskIncrementTick+0x168>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eea:	4915      	ldr	r1, [pc, #84]	@ (8003f40 <xTaskIncrementTick+0x164>)
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d901      	bls.n	8003f00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <xTaskIncrementTick+0x16c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e004      	b.n	8003f18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f4c <xTaskIncrementTick+0x170>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a0d      	ldr	r2, [pc, #52]	@ (8003f4c <xTaskIncrementTick+0x170>)
 8003f16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f18:	697b      	ldr	r3, [r7, #20]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200006b0 	.word	0x200006b0
 8003f28:	2000068c 	.word	0x2000068c
 8003f2c:	20000640 	.word	0x20000640
 8003f30:	20000644 	.word	0x20000644
 8003f34:	200006a0 	.word	0x200006a0
 8003f38:	200006a8 	.word	0x200006a8
 8003f3c:	20000690 	.word	0x20000690
 8003f40:	2000058c 	.word	0x2000058c
 8003f44:	20000588 	.word	0x20000588
 8003f48:	2000069c 	.word	0x2000069c
 8003f4c:	20000698 	.word	0x20000698

08003f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f56:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <vTaskSwitchContext+0xa4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f5e:	4b26      	ldr	r3, [pc, #152]	@ (8003ff8 <vTaskSwitchContext+0xa8>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f64:	e040      	b.n	8003fe8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003f66:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <vTaskSwitchContext+0xa8>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6c:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <vTaskSwitchContext+0xac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
 8003f7c:	f1c3 031f 	rsb	r3, r3, #31
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	491f      	ldr	r1, [pc, #124]	@ (8004000 <vTaskSwitchContext+0xb0>)
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <vTaskSwitchContext+0x5e>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	607b      	str	r3, [r7, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <vTaskSwitchContext+0x5a>
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4a11      	ldr	r2, [pc, #68]	@ (8004000 <vTaskSwitchContext+0xb0>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d104      	bne.n	8003fde <vTaskSwitchContext+0x8e>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <vTaskSwitchContext+0xb4>)
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200006b0 	.word	0x200006b0
 8003ff8:	2000069c 	.word	0x2000069c
 8003ffc:	20000690 	.word	0x20000690
 8004000:	2000058c 	.word	0x2000058c
 8004004:	20000588 	.word	0x20000588

08004008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004010:	f000 f852 	bl	80040b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004014:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <prvIdleTask+0x28>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d9f9      	bls.n	8004010 <prvIdleTask+0x8>
			{
				taskYIELD();
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <prvIdleTask+0x2c>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800402c:	e7f0      	b.n	8004010 <prvIdleTask+0x8>
 800402e:	bf00      	nop
 8004030:	2000058c 	.word	0x2000058c
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	e00c      	b.n	800405e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a12      	ldr	r2, [pc, #72]	@ (8004098 <prvInitialiseTaskLists+0x60>)
 8004050:	4413      	add	r3, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fb38 	bl	80036c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b06      	cmp	r3, #6
 8004062:	d9ef      	bls.n	8004044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004064:	480d      	ldr	r0, [pc, #52]	@ (800409c <prvInitialiseTaskLists+0x64>)
 8004066:	f7ff fb2f 	bl	80036c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800406a:	480d      	ldr	r0, [pc, #52]	@ (80040a0 <prvInitialiseTaskLists+0x68>)
 800406c:	f7ff fb2c 	bl	80036c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004070:	480c      	ldr	r0, [pc, #48]	@ (80040a4 <prvInitialiseTaskLists+0x6c>)
 8004072:	f7ff fb29 	bl	80036c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004076:	480c      	ldr	r0, [pc, #48]	@ (80040a8 <prvInitialiseTaskLists+0x70>)
 8004078:	f7ff fb26 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800407c:	480b      	ldr	r0, [pc, #44]	@ (80040ac <prvInitialiseTaskLists+0x74>)
 800407e:	f7ff fb23 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <prvInitialiseTaskLists+0x78>)
 8004084:	4a05      	ldr	r2, [pc, #20]	@ (800409c <prvInitialiseTaskLists+0x64>)
 8004086:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004088:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <prvInitialiseTaskLists+0x7c>)
 800408a:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <prvInitialiseTaskLists+0x68>)
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	2000058c 	.word	0x2000058c
 800409c:	20000618 	.word	0x20000618
 80040a0:	2000062c 	.word	0x2000062c
 80040a4:	20000648 	.word	0x20000648
 80040a8:	2000065c 	.word	0x2000065c
 80040ac:	20000674 	.word	0x20000674
 80040b0:	20000640 	.word	0x20000640
 80040b4:	20000644 	.word	0x20000644

080040b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040be:	e019      	b.n	80040f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c0:	f000 f9ec 	bl	800449c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c4:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <prvCheckTasksWaitingTermination+0x50>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fb7f 	bl	80037d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <prvCheckTasksWaitingTermination+0x54>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4a0b      	ldr	r2, [pc, #44]	@ (800410c <prvCheckTasksWaitingTermination+0x54>)
 80040de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ea:	f000 fa07 	bl	80044fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f810 	bl	8004114 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f4:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e1      	bne.n	80040c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	2000065c 	.word	0x2000065c
 800410c:	20000688 	.word	0x20000688
 8004110:	20000670 	.word	0x20000670

08004114 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fb46 	bl	80047bc <vPortFree>
				vPortFree( pxTCB );
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb43 	bl	80047bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004136:	e019      	b.n	800416c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800413e:	2b01      	cmp	r3, #1
 8004140:	d103      	bne.n	800414a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fb3a 	bl	80047bc <vPortFree>
	}
 8004148:	e010      	b.n	800416c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004150:	2b02      	cmp	r3, #2
 8004152:	d00b      	beq.n	800416c <prvDeleteTCB+0x58>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <prvDeleteTCB+0x54>
	}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800417a:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <prvResetNextTaskUnblockTime+0x38>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004184:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800418c:	e008      	b.n	80041a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418e:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <prvResetNextTaskUnblockTime+0x38>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a04      	ldr	r2, [pc, #16]	@ (80041b0 <prvResetNextTaskUnblockTime+0x3c>)
 800419e:	6013      	str	r3, [r2, #0]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000640 	.word	0x20000640
 80041b0:	200006a8 	.word	0x200006a8

080041b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <xTaskGetSchedulerState+0x34>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041c2:	2301      	movs	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	e008      	b.n	80041da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <xTaskGetSchedulerState+0x38>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041d0:	2302      	movs	r3, #2
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	e001      	b.n	80041da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041d6:	2300      	movs	r3, #0
 80041d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041da:	687b      	ldr	r3, [r7, #4]
	}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000694 	.word	0x20000694
 80041ec:	200006b0 	.word	0x200006b0

080041f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041fa:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004200:	4b28      	ldr	r3, [pc, #160]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fae4 	bl	80037d4 <uxListRemove>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004212:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	2201      	movs	r2, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4013      	ands	r3, r2
 8004226:	4a20      	ldr	r2, [pc, #128]	@ (80042a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004228:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d10a      	bne.n	8004248 <prvAddCurrentTaskToDelayedList+0x58>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004238:	4b1a      	ldr	r3, [pc, #104]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	481a      	ldr	r0, [pc, #104]	@ (80042ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8004242:	f7ff fa6c 	bl	800371e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004246:	e026      	b.n	8004296 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004250:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	429a      	cmp	r2, r3
 800425e:	d209      	bcs.n	8004274 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004260:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7ff fa79 	bl	8003764 <vListInsert>
}
 8004272:	e010      	b.n	8004296 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004274:	4b0f      	ldr	r3, [pc, #60]	@ (80042b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7ff fa6f 	bl	8003764 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004286:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d202      	bcs.n	8004296 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004290:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	2000068c 	.word	0x2000068c
 80042a4:	20000588 	.word	0x20000588
 80042a8:	20000690 	.word	0x20000690
 80042ac:	20000674 	.word	0x20000674
 80042b0:	20000644 	.word	0x20000644
 80042b4:	20000640 	.word	0x20000640
 80042b8:	200006a8 	.word	0x200006a8

080042bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3b04      	subs	r3, #4
 80042cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3b04      	subs	r3, #4
 80042da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0201 	bic.w	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b04      	subs	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042ec:	4a08      	ldr	r2, [pc, #32]	@ (8004310 <pxPortInitialiseStack+0x54>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b14      	subs	r3, #20
 80042f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3b20      	subs	r3, #32
 8004302:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004304:	68fb      	ldr	r3, [r7, #12]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	08004315 	.word	0x08004315

08004314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800431e:	4b12      	ldr	r3, [pc, #72]	@ (8004368 <prvTaskExitError+0x54>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d00b      	beq.n	8004340 <prvTaskExitError+0x2c>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
}
 800433a:	bf00      	nop
 800433c:	bf00      	nop
 800433e:	e7fd      	b.n	800433c <prvTaskExitError+0x28>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60bb      	str	r3, [r7, #8]
}
 8004352:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004354:	bf00      	nop
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0fc      	beq.n	8004356 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	2000004c 	.word	0x2000004c
 800436c:	00000000 	.word	0x00000000

08004370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004370:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <pxCurrentTCBConst2>)
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800437a:	f380 8809 	msr	PSP, r0
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8811 	msr	BASEPRI, r0
 800438a:	f04e 0e0d 	orr.w	lr, lr, #13
 800438e:	4770      	bx	lr

08004390 <pxCurrentTCBConst2>:
 8004390:	20000588 	.word	0x20000588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004398:	4806      	ldr	r0, [pc, #24]	@ (80043b4 <prvPortStartFirstTask+0x1c>)
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	6800      	ldr	r0, [r0, #0]
 800439e:	f380 8808 	msr	MSP, r0
 80043a2:	b662      	cpsie	i
 80043a4:	b661      	cpsie	f
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	df00      	svc	0
 80043b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043b2:	bf00      	nop
 80043b4:	e000ed08 	.word	0xe000ed08

080043b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043be:	4b32      	ldr	r3, [pc, #200]	@ (8004488 <xPortStartScheduler+0xd0>)
 80043c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	22ff      	movs	r2, #255	@ 0xff
 80043ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	4b2a      	ldr	r3, [pc, #168]	@ (800448c <xPortStartScheduler+0xd4>)
 80043e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004490 <xPortStartScheduler+0xd8>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ec:	e009      	b.n	8004402 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80043ee:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <xPortStartScheduler+0xd8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	4a26      	ldr	r2, [pc, #152]	@ (8004490 <xPortStartScheduler+0xd8>)
 80043f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d0ef      	beq.n	80043ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800440e:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <xPortStartScheduler+0xd8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1c3 0307 	rsb	r3, r3, #7
 8004416:	2b04      	cmp	r3, #4
 8004418:	d00b      	beq.n	8004432 <xPortStartScheduler+0x7a>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004432:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <xPortStartScheduler+0xd8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	4a15      	ldr	r2, [pc, #84]	@ (8004490 <xPortStartScheduler+0xd8>)
 800443a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800443c:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <xPortStartScheduler+0xd8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004444:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <xPortStartScheduler+0xd8>)
 8004446:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004450:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <xPortStartScheduler+0xdc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0f      	ldr	r2, [pc, #60]	@ (8004494 <xPortStartScheduler+0xdc>)
 8004456:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800445a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800445c:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <xPortStartScheduler+0xdc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <xPortStartScheduler+0xdc>)
 8004462:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004466:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004468:	f000 f8b8 	bl	80045dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800446c:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <xPortStartScheduler+0xe0>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004472:	f7ff ff91 	bl	8004398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004476:	f7ff fd6b 	bl	8003f50 <vTaskSwitchContext>
	prvTaskExitError();
 800447a:	f7ff ff4b 	bl	8004314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	e000e400 	.word	0xe000e400
 800448c:	200006b4 	.word	0x200006b4
 8004490:	200006b8 	.word	0x200006b8
 8004494:	e000ed20 	.word	0xe000ed20
 8004498:	2000004c 	.word	0x2000004c

0800449c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	607b      	str	r3, [r7, #4]
}
 80044b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <vPortEnterCritical+0x58>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <vPortEnterCritical+0x58>)
 80044be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <vPortEnterCritical+0x58>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d110      	bne.n	80044ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <vPortEnterCritical+0x5c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <vPortEnterCritical+0x4e>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	603b      	str	r3, [r7, #0]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <vPortEnterCritical+0x4a>
	}
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	2000004c 	.word	0x2000004c
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004502:	4b12      	ldr	r3, [pc, #72]	@ (800454c <vPortExitCritical+0x50>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <vPortExitCritical+0x26>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	607b      	str	r3, [r7, #4]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <vPortExitCritical+0x50>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3b01      	subs	r3, #1
 8004528:	4a08      	ldr	r2, [pc, #32]	@ (800454c <vPortExitCritical+0x50>)
 800452a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800452c:	4b07      	ldr	r3, [pc, #28]	@ (800454c <vPortExitCritical+0x50>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <vPortExitCritical+0x44>
 8004534:	2300      	movs	r3, #0
 8004536:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800453e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000004c 	.word	0x2000004c

08004550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004550:	f3ef 8009 	mrs	r0, PSP
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <pxCurrentTCBConst>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004560:	6010      	str	r0, [r2, #0]
 8004562:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004566:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800456a:	f380 8811 	msr	BASEPRI, r0
 800456e:	f7ff fcef 	bl	8003f50 <vTaskSwitchContext>
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	6808      	ldr	r0, [r1, #0]
 8004582:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004586:	f380 8809 	msr	PSP, r0
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	4770      	bx	lr

08004590 <pxCurrentTCBConst>:
 8004590:	20000588 	.word	0x20000588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
}
 80045b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045b2:	f7ff fc13 	bl	8003ddc <xTaskIncrementTick>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045bc:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <xPortSysTickHandler+0x40>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f383 8811 	msr	BASEPRI, r3
}
 80045ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045e0:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <vPortSetupTimerInterrupt+0x30>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <vPortSetupTimerInterrupt+0x34>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045ec:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <vPortSetupTimerInterrupt+0x38>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <vPortSetupTimerInterrupt+0x3c>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	4a08      	ldr	r2, [pc, #32]	@ (800461c <vPortSetupTimerInterrupt+0x40>)
 80045fa:	3b01      	subs	r3, #1
 80045fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045fe:	4b03      	ldr	r3, [pc, #12]	@ (800460c <vPortSetupTimerInterrupt+0x30>)
 8004600:	2207      	movs	r2, #7
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	e000e010 	.word	0xe000e010
 8004610:	e000e018 	.word	0xe000e018
 8004614:	20000040 	.word	0x20000040
 8004618:	10624dd3 	.word	0x10624dd3
 800461c:	e000e014 	.word	0xe000e014

08004620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	@ 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800462c:	f7ff fb2a 	bl	8003c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004630:	4b5c      	ldr	r3, [pc, #368]	@ (80047a4 <pvPortMalloc+0x184>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004638:	f000 f924 	bl	8004884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800463c:	4b5a      	ldr	r3, [pc, #360]	@ (80047a8 <pvPortMalloc+0x188>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 8095 	bne.w	8004774 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01e      	beq.n	800468e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004650:	2208      	movs	r2, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d015      	beq.n	800468e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f023 0307 	bic.w	r3, r3, #7
 8004668:	3308      	adds	r3, #8
 800466a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <pvPortMalloc+0x6e>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	617b      	str	r3, [r7, #20]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d06f      	beq.n	8004774 <pvPortMalloc+0x154>
 8004694:	4b45      	ldr	r3, [pc, #276]	@ (80047ac <pvPortMalloc+0x18c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d86a      	bhi.n	8004774 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800469e:	4b44      	ldr	r3, [pc, #272]	@ (80047b0 <pvPortMalloc+0x190>)
 80046a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046a2:	4b43      	ldr	r3, [pc, #268]	@ (80047b0 <pvPortMalloc+0x190>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046a8:	e004      	b.n	80046b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d903      	bls.n	80046c6 <pvPortMalloc+0xa6>
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f1      	bne.n	80046aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046c6:	4b37      	ldr	r3, [pc, #220]	@ (80047a4 <pvPortMalloc+0x184>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d051      	beq.n	8004774 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	4413      	add	r3, r2
 80046d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad2      	subs	r2, r2, r3
 80046ea:	2308      	movs	r3, #8
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d920      	bls.n	8004734 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4413      	add	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <pvPortMalloc+0xfc>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	613b      	str	r3, [r7, #16]
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800472e:	69b8      	ldr	r0, [r7, #24]
 8004730:	f000 f90a 	bl	8004948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004734:	4b1d      	ldr	r3, [pc, #116]	@ (80047ac <pvPortMalloc+0x18c>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <pvPortMalloc+0x18c>)
 8004740:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004742:	4b1a      	ldr	r3, [pc, #104]	@ (80047ac <pvPortMalloc+0x18c>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <pvPortMalloc+0x194>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d203      	bcs.n	8004756 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800474e:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <pvPortMalloc+0x18c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <pvPortMalloc+0x194>)
 8004754:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	4b13      	ldr	r3, [pc, #76]	@ (80047a8 <pvPortMalloc+0x188>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	431a      	orrs	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800476a:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <pvPortMalloc+0x198>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3301      	adds	r3, #1
 8004770:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <pvPortMalloc+0x198>)
 8004772:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004774:	f7ff fa94 	bl	8003ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <pvPortMalloc+0x17a>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	60fb      	str	r3, [r7, #12]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <pvPortMalloc+0x176>
	return pvReturn;
 800479a:	69fb      	ldr	r3, [r7, #28]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	@ 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	200012c4 	.word	0x200012c4
 80047a8:	200012d8 	.word	0x200012d8
 80047ac:	200012c8 	.word	0x200012c8
 80047b0:	200012bc 	.word	0x200012bc
 80047b4:	200012cc 	.word	0x200012cc
 80047b8:	200012d0 	.word	0x200012d0

080047bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04f      	beq.n	800486e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047ce:	2308      	movs	r3, #8
 80047d0:	425b      	negs	r3, r3
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	4b25      	ldr	r3, [pc, #148]	@ (8004878 <vPortFree+0xbc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <vPortFree+0x46>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60fb      	str	r3, [r7, #12]
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	e7fd      	b.n	80047fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <vPortFree+0x66>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60bb      	str	r3, [r7, #8]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <vPortFree+0xbc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01e      	beq.n	800486e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11a      	bne.n	800486e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4b0e      	ldr	r3, [pc, #56]	@ (8004878 <vPortFree+0xbc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004848:	f7ff fa1c 	bl	8003c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <vPortFree+0xc0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4413      	add	r3, r2
 8004856:	4a09      	ldr	r2, [pc, #36]	@ (800487c <vPortFree+0xc0>)
 8004858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800485a:	6938      	ldr	r0, [r7, #16]
 800485c:	f000 f874 	bl	8004948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004860:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <vPortFree+0xc4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	4a06      	ldr	r2, [pc, #24]	@ (8004880 <vPortFree+0xc4>)
 8004868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800486a:	f7ff fa19 	bl	8003ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200012d8 	.word	0x200012d8
 800487c:	200012c8 	.word	0x200012c8
 8004880:	200012d4 	.word	0x200012d4

08004884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800488a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800488e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004890:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <prvHeapInit+0xac>)
 8004892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00c      	beq.n	80048b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3307      	adds	r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004930 <prvHeapInit+0xac>)
 80048b4:	4413      	add	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004934 <prvHeapInit+0xb0>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004934 <prvHeapInit+0xb0>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4413      	add	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048d0:	2208      	movs	r2, #8
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a15      	ldr	r2, [pc, #84]	@ (8004938 <prvHeapInit+0xb4>)
 80048e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048e6:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <prvHeapInit+0xb4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048ee:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <prvHeapInit+0xb4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004904:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <prvHeapInit+0xb4>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <prvHeapInit+0xb8>)
 8004912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a09      	ldr	r2, [pc, #36]	@ (8004940 <prvHeapInit+0xbc>)
 800491a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800491c:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <prvHeapInit+0xc0>)
 800491e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	200006bc 	.word	0x200006bc
 8004934:	200012bc 	.word	0x200012bc
 8004938:	200012c4 	.word	0x200012c4
 800493c:	200012cc 	.word	0x200012cc
 8004940:	200012c8 	.word	0x200012c8
 8004944:	200012d8 	.word	0x200012d8

08004948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004950:	4b27      	ldr	r3, [pc, #156]	@ (80049f0 <prvInsertBlockIntoFreeList+0xa8>)
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e002      	b.n	800495c <prvInsertBlockIntoFreeList+0x14>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d8f7      	bhi.n	8004956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d108      	bne.n	800498a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d118      	bne.n	80049d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b14      	ldr	r3, [pc, #80]	@ (80049f4 <prvInsertBlockIntoFreeList+0xac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d00d      	beq.n	80049c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e008      	b.n	80049d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049c6:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <prvInsertBlockIntoFreeList+0xac>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e003      	b.n	80049d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d002      	beq.n	80049e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	200012bc 	.word	0x200012bc
 80049f4:	200012c4 	.word	0x200012c4

080049f8 <__cvt>:
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fe:	461d      	mov	r5, r3
 8004a00:	bfbb      	ittet	lt
 8004a02:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004a06:	461d      	movlt	r5, r3
 8004a08:	2300      	movge	r3, #0
 8004a0a:	232d      	movlt	r3, #45	@ 0x2d
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	4614      	mov	r4, r2
 8004a10:	bfb8      	it	lt
 8004a12:	4614      	movlt	r4, r2
 8004a14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a16:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004a18:	7013      	strb	r3, [r2, #0]
 8004a1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004a20:	f023 0820 	bic.w	r8, r3, #32
 8004a24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a28:	d005      	beq.n	8004a36 <__cvt+0x3e>
 8004a2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a2e:	d100      	bne.n	8004a32 <__cvt+0x3a>
 8004a30:	3601      	adds	r6, #1
 8004a32:	2302      	movs	r3, #2
 8004a34:	e000      	b.n	8004a38 <__cvt+0x40>
 8004a36:	2303      	movs	r3, #3
 8004a38:	aa07      	add	r2, sp, #28
 8004a3a:	9204      	str	r2, [sp, #16]
 8004a3c:	aa06      	add	r2, sp, #24
 8004a3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a42:	e9cd 3600 	strd	r3, r6, [sp]
 8004a46:	4622      	mov	r2, r4
 8004a48:	462b      	mov	r3, r5
 8004a4a:	f000 fe7d 	bl	8005748 <_dtoa_r>
 8004a4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a52:	4607      	mov	r7, r0
 8004a54:	d119      	bne.n	8004a8a <__cvt+0x92>
 8004a56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a58:	07db      	lsls	r3, r3, #31
 8004a5a:	d50e      	bpl.n	8004a7a <__cvt+0x82>
 8004a5c:	eb00 0906 	add.w	r9, r0, r6
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fb ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8004a6c:	b108      	cbz	r0, 8004a72 <__cvt+0x7a>
 8004a6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a72:	2230      	movs	r2, #48	@ 0x30
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	454b      	cmp	r3, r9
 8004a78:	d31e      	bcc.n	8004ab8 <__cvt+0xc0>
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004a80:	1bdb      	subs	r3, r3, r7
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	b008      	add	sp, #32
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a8e:	eb00 0906 	add.w	r9, r0, r6
 8004a92:	d1e5      	bne.n	8004a60 <__cvt+0x68>
 8004a94:	7803      	ldrb	r3, [r0, #0]
 8004a96:	2b30      	cmp	r3, #48	@ 0x30
 8004a98:	d10a      	bne.n	8004ab0 <__cvt+0xb8>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7fb ff81 	bl	80009a8 <__aeabi_dcmpeq>
 8004aa6:	b918      	cbnz	r0, 8004ab0 <__cvt+0xb8>
 8004aa8:	f1c6 0601 	rsb	r6, r6, #1
 8004aac:	f8ca 6000 	str.w	r6, [sl]
 8004ab0:	f8da 3000 	ldr.w	r3, [sl]
 8004ab4:	4499      	add	r9, r3
 8004ab6:	e7d3      	b.n	8004a60 <__cvt+0x68>
 8004ab8:	1c59      	adds	r1, r3, #1
 8004aba:	9107      	str	r1, [sp, #28]
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e7d9      	b.n	8004a74 <__cvt+0x7c>

08004ac0 <__exponent>:
 8004ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ac2:	2900      	cmp	r1, #0
 8004ac4:	bfb6      	itet	lt
 8004ac6:	232d      	movlt	r3, #45	@ 0x2d
 8004ac8:	232b      	movge	r3, #43	@ 0x2b
 8004aca:	4249      	neglt	r1, r1
 8004acc:	2909      	cmp	r1, #9
 8004ace:	7002      	strb	r2, [r0, #0]
 8004ad0:	7043      	strb	r3, [r0, #1]
 8004ad2:	dd29      	ble.n	8004b28 <__exponent+0x68>
 8004ad4:	f10d 0307 	add.w	r3, sp, #7
 8004ad8:	461d      	mov	r5, r3
 8004ada:	270a      	movs	r7, #10
 8004adc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	fb07 1416 	mls	r4, r7, r6, r1
 8004ae6:	3430      	adds	r4, #48	@ 0x30
 8004ae8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004aec:	460c      	mov	r4, r1
 8004aee:	2c63      	cmp	r4, #99	@ 0x63
 8004af0:	4631      	mov	r1, r6
 8004af2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004af6:	dcf1      	bgt.n	8004adc <__exponent+0x1c>
 8004af8:	3130      	adds	r1, #48	@ 0x30
 8004afa:	1e94      	subs	r4, r2, #2
 8004afc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b00:	4623      	mov	r3, r4
 8004b02:	1c41      	adds	r1, r0, #1
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	d30a      	bcc.n	8004b1e <__exponent+0x5e>
 8004b08:	f10d 0309 	add.w	r3, sp, #9
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	42ac      	cmp	r4, r5
 8004b10:	bf88      	it	hi
 8004b12:	2300      	movhi	r3, #0
 8004b14:	3302      	adds	r3, #2
 8004b16:	4403      	add	r3, r0
 8004b18:	1a18      	subs	r0, r3, r0
 8004b1a:	b003      	add	sp, #12
 8004b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b26:	e7ed      	b.n	8004b04 <__exponent+0x44>
 8004b28:	2330      	movs	r3, #48	@ 0x30
 8004b2a:	3130      	adds	r1, #48	@ 0x30
 8004b2c:	7083      	strb	r3, [r0, #2]
 8004b2e:	70c1      	strb	r1, [r0, #3]
 8004b30:	1d03      	adds	r3, r0, #4
 8004b32:	e7f1      	b.n	8004b18 <__exponent+0x58>

08004b34 <_printf_float>:
 8004b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b38:	b091      	sub	sp, #68	@ 0x44
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004b40:	4616      	mov	r6, r2
 8004b42:	461f      	mov	r7, r3
 8004b44:	4605      	mov	r5, r0
 8004b46:	f000 fce1 	bl	800550c <_localeconv_r>
 8004b4a:	6803      	ldr	r3, [r0, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	9308      	str	r3, [sp, #32]
 8004b50:	f7fb fafe 	bl	8000150 <strlen>
 8004b54:	2300      	movs	r3, #0
 8004b56:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b58:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b5e:	3307      	adds	r3, #7
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	f103 0208 	add.w	r2, r3, #8
 8004b68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b6c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b70:	f8c8 2000 	str.w	r2, [r8]
 8004b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b7e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004b82:	f04f 32ff 	mov.w	r2, #4294967295
 8004b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004e00 <_printf_float+0x2cc>)
 8004b90:	f7fb ff3c 	bl	8000a0c <__aeabi_dcmpun>
 8004b94:	bb70      	cbnz	r0, 8004bf4 <_printf_float+0xc0>
 8004b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9e:	4b98      	ldr	r3, [pc, #608]	@ (8004e00 <_printf_float+0x2cc>)
 8004ba0:	f7fb ff16 	bl	80009d0 <__aeabi_dcmple>
 8004ba4:	bb30      	cbnz	r0, 8004bf4 <_printf_float+0xc0>
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4640      	mov	r0, r8
 8004bac:	4649      	mov	r1, r9
 8004bae:	f7fb ff05 	bl	80009bc <__aeabi_dcmplt>
 8004bb2:	b110      	cbz	r0, 8004bba <_printf_float+0x86>
 8004bb4:	232d      	movs	r3, #45	@ 0x2d
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bba:	4a92      	ldr	r2, [pc, #584]	@ (8004e04 <_printf_float+0x2d0>)
 8004bbc:	4b92      	ldr	r3, [pc, #584]	@ (8004e08 <_printf_float+0x2d4>)
 8004bbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bc2:	bf94      	ite	ls
 8004bc4:	4690      	movls	r8, r2
 8004bc6:	4698      	movhi	r8, r3
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f04f 0900 	mov.w	r9, #0
 8004bce:	6123      	str	r3, [r4, #16]
 8004bd0:	f02b 0304 	bic.w	r3, fp, #4
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	4633      	mov	r3, r6
 8004bd8:	4621      	mov	r1, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	9700      	str	r7, [sp, #0]
 8004bde:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004be0:	f000 f9d4 	bl	8004f8c <_printf_common>
 8004be4:	3001      	adds	r0, #1
 8004be6:	f040 8090 	bne.w	8004d0a <_printf_float+0x1d6>
 8004bea:	f04f 30ff 	mov.w	r0, #4294967295
 8004bee:	b011      	add	sp, #68	@ 0x44
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	f7fb ff06 	bl	8000a0c <__aeabi_dcmpun>
 8004c00:	b148      	cbz	r0, 8004c16 <_printf_float+0xe2>
 8004c02:	464b      	mov	r3, r9
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bfb8      	it	lt
 8004c08:	232d      	movlt	r3, #45	@ 0x2d
 8004c0a:	4a80      	ldr	r2, [pc, #512]	@ (8004e0c <_printf_float+0x2d8>)
 8004c0c:	bfb8      	it	lt
 8004c0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c12:	4b7f      	ldr	r3, [pc, #508]	@ (8004e10 <_printf_float+0x2dc>)
 8004c14:	e7d3      	b.n	8004bbe <_printf_float+0x8a>
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	d13f      	bne.n	8004ca0 <_printf_float+0x16c>
 8004c20:	2306      	movs	r3, #6
 8004c22:	6063      	str	r3, [r4, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	9206      	str	r2, [sp, #24]
 8004c2e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c30:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004c34:	aa0d      	add	r2, sp, #52	@ 0x34
 8004c36:	9203      	str	r2, [sp, #12]
 8004c38:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004c3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	4642      	mov	r2, r8
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4628      	mov	r0, r5
 8004c48:	464b      	mov	r3, r9
 8004c4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c4c:	f7ff fed4 	bl	80049f8 <__cvt>
 8004c50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c52:	4680      	mov	r8, r0
 8004c54:	2947      	cmp	r1, #71	@ 0x47
 8004c56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c58:	d128      	bne.n	8004cac <_printf_float+0x178>
 8004c5a:	1cc8      	adds	r0, r1, #3
 8004c5c:	db02      	blt.n	8004c64 <_printf_float+0x130>
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	4299      	cmp	r1, r3
 8004c62:	dd40      	ble.n	8004ce6 <_printf_float+0x1b2>
 8004c64:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c68:	fa5f fa8a 	uxtb.w	sl, sl
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	3901      	subs	r1, #1
 8004c70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c74:	910d      	str	r1, [sp, #52]	@ 0x34
 8004c76:	f7ff ff23 	bl	8004ac0 <__exponent>
 8004c7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c7c:	4681      	mov	r9, r0
 8004c7e:	1813      	adds	r3, r2, r0
 8004c80:	2a01      	cmp	r2, #1
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	dc02      	bgt.n	8004c8c <_printf_float+0x158>
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	07d2      	lsls	r2, r2, #31
 8004c8a:	d501      	bpl.n	8004c90 <_printf_float+0x15c>
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d09e      	beq.n	8004bd6 <_printf_float+0xa2>
 8004c98:	232d      	movs	r3, #45	@ 0x2d
 8004c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c9e:	e79a      	b.n	8004bd6 <_printf_float+0xa2>
 8004ca0:	2947      	cmp	r1, #71	@ 0x47
 8004ca2:	d1bf      	bne.n	8004c24 <_printf_float+0xf0>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1bd      	bne.n	8004c24 <_printf_float+0xf0>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e7ba      	b.n	8004c22 <_printf_float+0xee>
 8004cac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cb0:	d9dc      	bls.n	8004c6c <_printf_float+0x138>
 8004cb2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cb6:	d118      	bne.n	8004cea <_printf_float+0x1b6>
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	dd0b      	ble.n	8004cd6 <_printf_float+0x1a2>
 8004cbe:	6121      	str	r1, [r4, #16]
 8004cc0:	b913      	cbnz	r3, 8004cc8 <_printf_float+0x194>
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	07d0      	lsls	r0, r2, #31
 8004cc6:	d502      	bpl.n	8004cce <_printf_float+0x19a>
 8004cc8:	3301      	adds	r3, #1
 8004cca:	440b      	add	r3, r1
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	f04f 0900 	mov.w	r9, #0
 8004cd2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004cd4:	e7dc      	b.n	8004c90 <_printf_float+0x15c>
 8004cd6:	b913      	cbnz	r3, 8004cde <_printf_float+0x1aa>
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	07d2      	lsls	r2, r2, #31
 8004cdc:	d501      	bpl.n	8004ce2 <_printf_float+0x1ae>
 8004cde:	3302      	adds	r3, #2
 8004ce0:	e7f4      	b.n	8004ccc <_printf_float+0x198>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e7f2      	b.n	8004ccc <_printf_float+0x198>
 8004ce6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cec:	4299      	cmp	r1, r3
 8004cee:	db05      	blt.n	8004cfc <_printf_float+0x1c8>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	6121      	str	r1, [r4, #16]
 8004cf4:	07d8      	lsls	r0, r3, #31
 8004cf6:	d5ea      	bpl.n	8004cce <_printf_float+0x19a>
 8004cf8:	1c4b      	adds	r3, r1, #1
 8004cfa:	e7e7      	b.n	8004ccc <_printf_float+0x198>
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	bfcc      	ite	gt
 8004d00:	2201      	movgt	r2, #1
 8004d02:	f1c1 0202 	rsble	r2, r1, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	e7e0      	b.n	8004ccc <_printf_float+0x198>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	055a      	lsls	r2, r3, #21
 8004d0e:	d407      	bmi.n	8004d20 <_printf_float+0x1ec>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	4642      	mov	r2, r8
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d12b      	bne.n	8004d76 <_printf_float+0x242>
 8004d1e:	e764      	b.n	8004bea <_printf_float+0xb6>
 8004d20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d24:	f240 80dc 	bls.w	8004ee0 <_printf_float+0x3ac>
 8004d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f7fb fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d033      	beq.n	8004da0 <_printf_float+0x26c>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	4a35      	ldr	r2, [pc, #212]	@ (8004e14 <_printf_float+0x2e0>)
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f af51 	beq.w	8004bea <_printf_float+0xb6>
 8004d48:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004d4c:	4543      	cmp	r3, r8
 8004d4e:	db02      	blt.n	8004d56 <_printf_float+0x222>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	07d8      	lsls	r0, r3, #31
 8004d54:	d50f      	bpl.n	8004d76 <_printf_float+0x242>
 8004d56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f af42 	beq.w	8004bea <_printf_float+0xb6>
 8004d66:	f04f 0900 	mov.w	r9, #0
 8004d6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d6e:	f104 0a1a 	add.w	sl, r4, #26
 8004d72:	45c8      	cmp	r8, r9
 8004d74:	dc09      	bgt.n	8004d8a <_printf_float+0x256>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	079b      	lsls	r3, r3, #30
 8004d7a:	f100 8102 	bmi.w	8004f82 <_printf_float+0x44e>
 8004d7e:	68e0      	ldr	r0, [r4, #12]
 8004d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d82:	4298      	cmp	r0, r3
 8004d84:	bfb8      	it	lt
 8004d86:	4618      	movlt	r0, r3
 8004d88:	e731      	b.n	8004bee <_printf_float+0xba>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4652      	mov	r2, sl
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b8      	blx	r7
 8004d94:	3001      	adds	r0, #1
 8004d96:	f43f af28 	beq.w	8004bea <_printf_float+0xb6>
 8004d9a:	f109 0901 	add.w	r9, r9, #1
 8004d9e:	e7e8      	b.n	8004d72 <_printf_float+0x23e>
 8004da0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dc38      	bgt.n	8004e18 <_printf_float+0x2e4>
 8004da6:	2301      	movs	r3, #1
 8004da8:	4631      	mov	r1, r6
 8004daa:	4628      	mov	r0, r5
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <_printf_float+0x2e0>)
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f af1a 	beq.w	8004bea <_printf_float+0xb6>
 8004db6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004dba:	ea59 0303 	orrs.w	r3, r9, r3
 8004dbe:	d102      	bne.n	8004dc6 <_printf_float+0x292>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07d9      	lsls	r1, r3, #31
 8004dc4:	d5d7      	bpl.n	8004d76 <_printf_float+0x242>
 8004dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f af0a 	beq.w	8004bea <_printf_float+0xb6>
 8004dd6:	f04f 0a00 	mov.w	sl, #0
 8004dda:	f104 0b1a 	add.w	fp, r4, #26
 8004dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004de0:	425b      	negs	r3, r3
 8004de2:	4553      	cmp	r3, sl
 8004de4:	dc01      	bgt.n	8004dea <_printf_float+0x2b6>
 8004de6:	464b      	mov	r3, r9
 8004de8:	e793      	b.n	8004d12 <_printf_float+0x1de>
 8004dea:	2301      	movs	r3, #1
 8004dec:	465a      	mov	r2, fp
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	f43f aef8 	beq.w	8004bea <_printf_float+0xb6>
 8004dfa:	f10a 0a01 	add.w	sl, sl, #1
 8004dfe:	e7ee      	b.n	8004dde <_printf_float+0x2aa>
 8004e00:	7fefffff 	.word	0x7fefffff
 8004e04:	080077d6 	.word	0x080077d6
 8004e08:	080077da 	.word	0x080077da
 8004e0c:	080077de 	.word	0x080077de
 8004e10:	080077e2 	.word	0x080077e2
 8004e14:	080077e6 	.word	0x080077e6
 8004e18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e1a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e1e:	4553      	cmp	r3, sl
 8004e20:	bfa8      	it	ge
 8004e22:	4653      	movge	r3, sl
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	4699      	mov	r9, r3
 8004e28:	dc36      	bgt.n	8004e98 <_printf_float+0x364>
 8004e2a:	f04f 0b00 	mov.w	fp, #0
 8004e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e32:	f104 021a 	add.w	r2, r4, #26
 8004e36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e38:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e3a:	eba3 0309 	sub.w	r3, r3, r9
 8004e3e:	455b      	cmp	r3, fp
 8004e40:	dc31      	bgt.n	8004ea6 <_printf_float+0x372>
 8004e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e44:	459a      	cmp	sl, r3
 8004e46:	dc3a      	bgt.n	8004ebe <_printf_float+0x38a>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07da      	lsls	r2, r3, #31
 8004e4c:	d437      	bmi.n	8004ebe <_printf_float+0x38a>
 8004e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e50:	ebaa 0903 	sub.w	r9, sl, r3
 8004e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e56:	ebaa 0303 	sub.w	r3, sl, r3
 8004e5a:	4599      	cmp	r9, r3
 8004e5c:	bfa8      	it	ge
 8004e5e:	4699      	movge	r9, r3
 8004e60:	f1b9 0f00 	cmp.w	r9, #0
 8004e64:	dc33      	bgt.n	8004ece <_printf_float+0x39a>
 8004e66:	f04f 0800 	mov.w	r8, #0
 8004e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e6e:	f104 0b1a 	add.w	fp, r4, #26
 8004e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e74:	ebaa 0303 	sub.w	r3, sl, r3
 8004e78:	eba3 0309 	sub.w	r3, r3, r9
 8004e7c:	4543      	cmp	r3, r8
 8004e7e:	f77f af7a 	ble.w	8004d76 <_printf_float+0x242>
 8004e82:	2301      	movs	r3, #1
 8004e84:	465a      	mov	r2, fp
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f aeac 	beq.w	8004bea <_printf_float+0xb6>
 8004e92:	f108 0801 	add.w	r8, r8, #1
 8004e96:	e7ec      	b.n	8004e72 <_printf_float+0x33e>
 8004e98:	4642      	mov	r2, r8
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d1c2      	bne.n	8004e2a <_printf_float+0x2f6>
 8004ea4:	e6a1      	b.n	8004bea <_printf_float+0xb6>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4628      	mov	r0, r5
 8004eac:	920a      	str	r2, [sp, #40]	@ 0x28
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	f43f ae9a 	beq.w	8004bea <_printf_float+0xb6>
 8004eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004eb8:	f10b 0b01 	add.w	fp, fp, #1
 8004ebc:	e7bb      	b.n	8004e36 <_printf_float+0x302>
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d1c0      	bne.n	8004e4e <_printf_float+0x31a>
 8004ecc:	e68d      	b.n	8004bea <_printf_float+0xb6>
 8004ece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	4442      	add	r2, r8
 8004ed8:	47b8      	blx	r7
 8004eda:	3001      	adds	r0, #1
 8004edc:	d1c3      	bne.n	8004e66 <_printf_float+0x332>
 8004ede:	e684      	b.n	8004bea <_printf_float+0xb6>
 8004ee0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ee4:	f1ba 0f01 	cmp.w	sl, #1
 8004ee8:	dc01      	bgt.n	8004eee <_printf_float+0x3ba>
 8004eea:	07db      	lsls	r3, r3, #31
 8004eec:	d536      	bpl.n	8004f5c <_printf_float+0x428>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f ae76 	beq.w	8004bea <_printf_float+0xb6>
 8004efe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f ae6e 	beq.w	8004bea <_printf_float+0xb6>
 8004f0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f12:	2200      	movs	r2, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f1a:	f7fb fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8004f1e:	b9c0      	cbnz	r0, 8004f52 <_printf_float+0x41e>
 8004f20:	4653      	mov	r3, sl
 8004f22:	f108 0201 	add.w	r2, r8, #1
 8004f26:	4631      	mov	r1, r6
 8004f28:	4628      	mov	r0, r5
 8004f2a:	47b8      	blx	r7
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d10c      	bne.n	8004f4a <_printf_float+0x416>
 8004f30:	e65b      	b.n	8004bea <_printf_float+0xb6>
 8004f32:	2301      	movs	r3, #1
 8004f34:	465a      	mov	r2, fp
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f43f ae54 	beq.w	8004bea <_printf_float+0xb6>
 8004f42:	f108 0801 	add.w	r8, r8, #1
 8004f46:	45d0      	cmp	r8, sl
 8004f48:	dbf3      	blt.n	8004f32 <_printf_float+0x3fe>
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f50:	e6e0      	b.n	8004d14 <_printf_float+0x1e0>
 8004f52:	f04f 0800 	mov.w	r8, #0
 8004f56:	f104 0b1a 	add.w	fp, r4, #26
 8004f5a:	e7f4      	b.n	8004f46 <_printf_float+0x412>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4642      	mov	r2, r8
 8004f60:	e7e1      	b.n	8004f26 <_printf_float+0x3f2>
 8004f62:	2301      	movs	r3, #1
 8004f64:	464a      	mov	r2, r9
 8004f66:	4631      	mov	r1, r6
 8004f68:	4628      	mov	r0, r5
 8004f6a:	47b8      	blx	r7
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	f43f ae3c 	beq.w	8004bea <_printf_float+0xb6>
 8004f72:	f108 0801 	add.w	r8, r8, #1
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f7a:	1a5b      	subs	r3, r3, r1
 8004f7c:	4543      	cmp	r3, r8
 8004f7e:	dcf0      	bgt.n	8004f62 <_printf_float+0x42e>
 8004f80:	e6fd      	b.n	8004d7e <_printf_float+0x24a>
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	f104 0919 	add.w	r9, r4, #25
 8004f8a:	e7f4      	b.n	8004f76 <_printf_float+0x442>

08004f8c <_printf_common>:
 8004f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	4616      	mov	r6, r2
 8004f92:	4698      	mov	r8, r3
 8004f94:	688a      	ldr	r2, [r1, #8]
 8004f96:	690b      	ldr	r3, [r1, #16]
 8004f98:	4607      	mov	r7, r0
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	bfb8      	it	lt
 8004f9e:	4613      	movlt	r3, r2
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fac:	b10a      	cbz	r2, 8004fb2 <_printf_common+0x26>
 8004fae:	3301      	adds	r3, #1
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	0699      	lsls	r1, r3, #26
 8004fb6:	bf42      	ittt	mi
 8004fb8:	6833      	ldrmi	r3, [r6, #0]
 8004fba:	3302      	addmi	r3, #2
 8004fbc:	6033      	strmi	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	f015 0506 	ands.w	r5, r5, #6
 8004fc4:	d106      	bne.n	8004fd4 <_printf_common+0x48>
 8004fc6:	f104 0a19 	add.w	sl, r4, #25
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	6832      	ldr	r2, [r6, #0]
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dc2b      	bgt.n	800502c <_printf_common+0xa0>
 8004fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	3b00      	subs	r3, #0
 8004fdc:	bf18      	it	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	0692      	lsls	r2, r2, #26
 8004fe2:	d430      	bmi.n	8005046 <_printf_common+0xba>
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fec:	47c8      	blx	r9
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d023      	beq.n	800503a <_printf_common+0xae>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	6922      	ldr	r2, [r4, #16]
 8004ff6:	f003 0306 	and.w	r3, r3, #6
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	bf14      	ite	ne
 8004ffe:	2500      	movne	r5, #0
 8005000:	6833      	ldreq	r3, [r6, #0]
 8005002:	f04f 0600 	mov.w	r6, #0
 8005006:	bf08      	it	eq
 8005008:	68e5      	ldreq	r5, [r4, #12]
 800500a:	f104 041a 	add.w	r4, r4, #26
 800500e:	bf08      	it	eq
 8005010:	1aed      	subeq	r5, r5, r3
 8005012:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005016:	bf08      	it	eq
 8005018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800501c:	4293      	cmp	r3, r2
 800501e:	bfc4      	itt	gt
 8005020:	1a9b      	subgt	r3, r3, r2
 8005022:	18ed      	addgt	r5, r5, r3
 8005024:	42b5      	cmp	r5, r6
 8005026:	d11a      	bne.n	800505e <_printf_common+0xd2>
 8005028:	2000      	movs	r0, #0
 800502a:	e008      	b.n	800503e <_printf_common+0xb2>
 800502c:	2301      	movs	r3, #1
 800502e:	4652      	mov	r2, sl
 8005030:	4641      	mov	r1, r8
 8005032:	4638      	mov	r0, r7
 8005034:	47c8      	blx	r9
 8005036:	3001      	adds	r0, #1
 8005038:	d103      	bne.n	8005042 <_printf_common+0xb6>
 800503a:	f04f 30ff 	mov.w	r0, #4294967295
 800503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005042:	3501      	adds	r5, #1
 8005044:	e7c1      	b.n	8004fca <_printf_common+0x3e>
 8005046:	2030      	movs	r0, #48	@ 0x30
 8005048:	18e1      	adds	r1, r4, r3
 800504a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005054:	4422      	add	r2, r4
 8005056:	3302      	adds	r3, #2
 8005058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800505c:	e7c2      	b.n	8004fe4 <_printf_common+0x58>
 800505e:	2301      	movs	r3, #1
 8005060:	4622      	mov	r2, r4
 8005062:	4641      	mov	r1, r8
 8005064:	4638      	mov	r0, r7
 8005066:	47c8      	blx	r9
 8005068:	3001      	adds	r0, #1
 800506a:	d0e6      	beq.n	800503a <_printf_common+0xae>
 800506c:	3601      	adds	r6, #1
 800506e:	e7d9      	b.n	8005024 <_printf_common+0x98>

08005070 <_printf_i>:
 8005070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	7e0f      	ldrb	r7, [r1, #24]
 8005076:	4691      	mov	r9, r2
 8005078:	2f78      	cmp	r7, #120	@ 0x78
 800507a:	4680      	mov	r8, r0
 800507c:	460c      	mov	r4, r1
 800507e:	469a      	mov	sl, r3
 8005080:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005086:	d807      	bhi.n	8005098 <_printf_i+0x28>
 8005088:	2f62      	cmp	r7, #98	@ 0x62
 800508a:	d80a      	bhi.n	80050a2 <_printf_i+0x32>
 800508c:	2f00      	cmp	r7, #0
 800508e:	f000 80d3 	beq.w	8005238 <_printf_i+0x1c8>
 8005092:	2f58      	cmp	r7, #88	@ 0x58
 8005094:	f000 80ba 	beq.w	800520c <_printf_i+0x19c>
 8005098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800509c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050a0:	e03a      	b.n	8005118 <_printf_i+0xa8>
 80050a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050a6:	2b15      	cmp	r3, #21
 80050a8:	d8f6      	bhi.n	8005098 <_printf_i+0x28>
 80050aa:	a101      	add	r1, pc, #4	@ (adr r1, 80050b0 <_printf_i+0x40>)
 80050ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050b0:	08005109 	.word	0x08005109
 80050b4:	0800511d 	.word	0x0800511d
 80050b8:	08005099 	.word	0x08005099
 80050bc:	08005099 	.word	0x08005099
 80050c0:	08005099 	.word	0x08005099
 80050c4:	08005099 	.word	0x08005099
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	08005099 	.word	0x08005099
 80050d0:	08005099 	.word	0x08005099
 80050d4:	08005099 	.word	0x08005099
 80050d8:	08005099 	.word	0x08005099
 80050dc:	0800521f 	.word	0x0800521f
 80050e0:	08005147 	.word	0x08005147
 80050e4:	080051d9 	.word	0x080051d9
 80050e8:	08005099 	.word	0x08005099
 80050ec:	08005099 	.word	0x08005099
 80050f0:	08005241 	.word	0x08005241
 80050f4:	08005099 	.word	0x08005099
 80050f8:	08005147 	.word	0x08005147
 80050fc:	08005099 	.word	0x08005099
 8005100:	08005099 	.word	0x08005099
 8005104:	080051e1 	.word	0x080051e1
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	1d1a      	adds	r2, r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6032      	str	r2, [r6, #0]
 8005110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005118:	2301      	movs	r3, #1
 800511a:	e09e      	b.n	800525a <_printf_i+0x1ea>
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	1d19      	adds	r1, r3, #4
 8005122:	6031      	str	r1, [r6, #0]
 8005124:	0606      	lsls	r6, r0, #24
 8005126:	d501      	bpl.n	800512c <_printf_i+0xbc>
 8005128:	681d      	ldr	r5, [r3, #0]
 800512a:	e003      	b.n	8005134 <_printf_i+0xc4>
 800512c:	0645      	lsls	r5, r0, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0xb8>
 8005130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005134:	2d00      	cmp	r5, #0
 8005136:	da03      	bge.n	8005140 <_printf_i+0xd0>
 8005138:	232d      	movs	r3, #45	@ 0x2d
 800513a:	426d      	negs	r5, r5
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005140:	230a      	movs	r3, #10
 8005142:	4859      	ldr	r0, [pc, #356]	@ (80052a8 <_printf_i+0x238>)
 8005144:	e011      	b.n	800516a <_printf_i+0xfa>
 8005146:	6821      	ldr	r1, [r4, #0]
 8005148:	6833      	ldr	r3, [r6, #0]
 800514a:	0608      	lsls	r0, r1, #24
 800514c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005150:	d402      	bmi.n	8005158 <_printf_i+0xe8>
 8005152:	0649      	lsls	r1, r1, #25
 8005154:	bf48      	it	mi
 8005156:	b2ad      	uxthmi	r5, r5
 8005158:	2f6f      	cmp	r7, #111	@ 0x6f
 800515a:	6033      	str	r3, [r6, #0]
 800515c:	bf14      	ite	ne
 800515e:	230a      	movne	r3, #10
 8005160:	2308      	moveq	r3, #8
 8005162:	4851      	ldr	r0, [pc, #324]	@ (80052a8 <_printf_i+0x238>)
 8005164:	2100      	movs	r1, #0
 8005166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800516a:	6866      	ldr	r6, [r4, #4]
 800516c:	2e00      	cmp	r6, #0
 800516e:	bfa8      	it	ge
 8005170:	6821      	ldrge	r1, [r4, #0]
 8005172:	60a6      	str	r6, [r4, #8]
 8005174:	bfa4      	itt	ge
 8005176:	f021 0104 	bicge.w	r1, r1, #4
 800517a:	6021      	strge	r1, [r4, #0]
 800517c:	b90d      	cbnz	r5, 8005182 <_printf_i+0x112>
 800517e:	2e00      	cmp	r6, #0
 8005180:	d04b      	beq.n	800521a <_printf_i+0x1aa>
 8005182:	4616      	mov	r6, r2
 8005184:	fbb5 f1f3 	udiv	r1, r5, r3
 8005188:	fb03 5711 	mls	r7, r3, r1, r5
 800518c:	5dc7      	ldrb	r7, [r0, r7]
 800518e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005192:	462f      	mov	r7, r5
 8005194:	42bb      	cmp	r3, r7
 8005196:	460d      	mov	r5, r1
 8005198:	d9f4      	bls.n	8005184 <_printf_i+0x114>
 800519a:	2b08      	cmp	r3, #8
 800519c:	d10b      	bne.n	80051b6 <_printf_i+0x146>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07df      	lsls	r7, r3, #31
 80051a2:	d508      	bpl.n	80051b6 <_printf_i+0x146>
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	6861      	ldr	r1, [r4, #4]
 80051a8:	4299      	cmp	r1, r3
 80051aa:	bfde      	ittt	le
 80051ac:	2330      	movle	r3, #48	@ 0x30
 80051ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051b6:	1b92      	subs	r2, r2, r6
 80051b8:	6122      	str	r2, [r4, #16]
 80051ba:	464b      	mov	r3, r9
 80051bc:	4621      	mov	r1, r4
 80051be:	4640      	mov	r0, r8
 80051c0:	f8cd a000 	str.w	sl, [sp]
 80051c4:	aa03      	add	r2, sp, #12
 80051c6:	f7ff fee1 	bl	8004f8c <_printf_common>
 80051ca:	3001      	adds	r0, #1
 80051cc:	d14a      	bne.n	8005264 <_printf_i+0x1f4>
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295
 80051d2:	b004      	add	sp, #16
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	f043 0320 	orr.w	r3, r3, #32
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	2778      	movs	r7, #120	@ 0x78
 80051e2:	4832      	ldr	r0, [pc, #200]	@ (80052ac <_printf_i+0x23c>)
 80051e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	6831      	ldr	r1, [r6, #0]
 80051ec:	061f      	lsls	r7, r3, #24
 80051ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80051f2:	d402      	bmi.n	80051fa <_printf_i+0x18a>
 80051f4:	065f      	lsls	r7, r3, #25
 80051f6:	bf48      	it	mi
 80051f8:	b2ad      	uxthmi	r5, r5
 80051fa:	6031      	str	r1, [r6, #0]
 80051fc:	07d9      	lsls	r1, r3, #31
 80051fe:	bf44      	itt	mi
 8005200:	f043 0320 	orrmi.w	r3, r3, #32
 8005204:	6023      	strmi	r3, [r4, #0]
 8005206:	b11d      	cbz	r5, 8005210 <_printf_i+0x1a0>
 8005208:	2310      	movs	r3, #16
 800520a:	e7ab      	b.n	8005164 <_printf_i+0xf4>
 800520c:	4826      	ldr	r0, [pc, #152]	@ (80052a8 <_printf_i+0x238>)
 800520e:	e7e9      	b.n	80051e4 <_printf_i+0x174>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	f023 0320 	bic.w	r3, r3, #32
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	e7f6      	b.n	8005208 <_printf_i+0x198>
 800521a:	4616      	mov	r6, r2
 800521c:	e7bd      	b.n	800519a <_printf_i+0x12a>
 800521e:	6833      	ldr	r3, [r6, #0]
 8005220:	6825      	ldr	r5, [r4, #0]
 8005222:	1d18      	adds	r0, r3, #4
 8005224:	6961      	ldr	r1, [r4, #20]
 8005226:	6030      	str	r0, [r6, #0]
 8005228:	062e      	lsls	r6, r5, #24
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	d501      	bpl.n	8005232 <_printf_i+0x1c2>
 800522e:	6019      	str	r1, [r3, #0]
 8005230:	e002      	b.n	8005238 <_printf_i+0x1c8>
 8005232:	0668      	lsls	r0, r5, #25
 8005234:	d5fb      	bpl.n	800522e <_printf_i+0x1be>
 8005236:	8019      	strh	r1, [r3, #0]
 8005238:	2300      	movs	r3, #0
 800523a:	4616      	mov	r6, r2
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	e7bc      	b.n	80051ba <_printf_i+0x14a>
 8005240:	6833      	ldr	r3, [r6, #0]
 8005242:	2100      	movs	r1, #0
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	6032      	str	r2, [r6, #0]
 8005248:	681e      	ldr	r6, [r3, #0]
 800524a:	6862      	ldr	r2, [r4, #4]
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f9d4 	bl	80055fa <memchr>
 8005252:	b108      	cbz	r0, 8005258 <_printf_i+0x1e8>
 8005254:	1b80      	subs	r0, r0, r6
 8005256:	6060      	str	r0, [r4, #4]
 8005258:	6863      	ldr	r3, [r4, #4]
 800525a:	6123      	str	r3, [r4, #16]
 800525c:	2300      	movs	r3, #0
 800525e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005262:	e7aa      	b.n	80051ba <_printf_i+0x14a>
 8005264:	4632      	mov	r2, r6
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	47d0      	blx	sl
 800526e:	3001      	adds	r0, #1
 8005270:	d0ad      	beq.n	80051ce <_printf_i+0x15e>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	079b      	lsls	r3, r3, #30
 8005276:	d413      	bmi.n	80052a0 <_printf_i+0x230>
 8005278:	68e0      	ldr	r0, [r4, #12]
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	4298      	cmp	r0, r3
 800527e:	bfb8      	it	lt
 8005280:	4618      	movlt	r0, r3
 8005282:	e7a6      	b.n	80051d2 <_printf_i+0x162>
 8005284:	2301      	movs	r3, #1
 8005286:	4632      	mov	r2, r6
 8005288:	4649      	mov	r1, r9
 800528a:	4640      	mov	r0, r8
 800528c:	47d0      	blx	sl
 800528e:	3001      	adds	r0, #1
 8005290:	d09d      	beq.n	80051ce <_printf_i+0x15e>
 8005292:	3501      	adds	r5, #1
 8005294:	68e3      	ldr	r3, [r4, #12]
 8005296:	9903      	ldr	r1, [sp, #12]
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	42ab      	cmp	r3, r5
 800529c:	dcf2      	bgt.n	8005284 <_printf_i+0x214>
 800529e:	e7eb      	b.n	8005278 <_printf_i+0x208>
 80052a0:	2500      	movs	r5, #0
 80052a2:	f104 0619 	add.w	r6, r4, #25
 80052a6:	e7f5      	b.n	8005294 <_printf_i+0x224>
 80052a8:	080077e8 	.word	0x080077e8
 80052ac:	080077f9 	.word	0x080077f9

080052b0 <std>:
 80052b0:	2300      	movs	r3, #0
 80052b2:	b510      	push	{r4, lr}
 80052b4:	4604      	mov	r4, r0
 80052b6:	e9c0 3300 	strd	r3, r3, [r0]
 80052ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052be:	6083      	str	r3, [r0, #8]
 80052c0:	8181      	strh	r1, [r0, #12]
 80052c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80052c4:	81c2      	strh	r2, [r0, #14]
 80052c6:	6183      	str	r3, [r0, #24]
 80052c8:	4619      	mov	r1, r3
 80052ca:	2208      	movs	r2, #8
 80052cc:	305c      	adds	r0, #92	@ 0x5c
 80052ce:	f000 f914 	bl	80054fa <memset>
 80052d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <std+0x58>)
 80052d4:	6224      	str	r4, [r4, #32]
 80052d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <std+0x5c>)
 80052da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <std+0x60>)
 80052de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <std+0x64>)
 80052e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80052e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005318 <std+0x68>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d006      	beq.n	80052f8 <std+0x48>
 80052ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052ee:	4294      	cmp	r4, r2
 80052f0:	d002      	beq.n	80052f8 <std+0x48>
 80052f2:	33d0      	adds	r3, #208	@ 0xd0
 80052f4:	429c      	cmp	r4, r3
 80052f6:	d105      	bne.n	8005304 <std+0x54>
 80052f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005300:	f000 b978 	b.w	80055f4 <__retarget_lock_init_recursive>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	bf00      	nop
 8005308:	08005475 	.word	0x08005475
 800530c:	08005497 	.word	0x08005497
 8005310:	080054cf 	.word	0x080054cf
 8005314:	080054f3 	.word	0x080054f3
 8005318:	200012dc 	.word	0x200012dc

0800531c <stdio_exit_handler>:
 800531c:	4a02      	ldr	r2, [pc, #8]	@ (8005328 <stdio_exit_handler+0xc>)
 800531e:	4903      	ldr	r1, [pc, #12]	@ (800532c <stdio_exit_handler+0x10>)
 8005320:	4803      	ldr	r0, [pc, #12]	@ (8005330 <stdio_exit_handler+0x14>)
 8005322:	f000 b869 	b.w	80053f8 <_fwalk_sglue>
 8005326:	bf00      	nop
 8005328:	20000050 	.word	0x20000050
 800532c:	08006f85 	.word	0x08006f85
 8005330:	20000060 	.word	0x20000060

08005334 <cleanup_stdio>:
 8005334:	6841      	ldr	r1, [r0, #4]
 8005336:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <cleanup_stdio+0x34>)
 8005338:	b510      	push	{r4, lr}
 800533a:	4299      	cmp	r1, r3
 800533c:	4604      	mov	r4, r0
 800533e:	d001      	beq.n	8005344 <cleanup_stdio+0x10>
 8005340:	f001 fe20 	bl	8006f84 <_fflush_r>
 8005344:	68a1      	ldr	r1, [r4, #8]
 8005346:	4b09      	ldr	r3, [pc, #36]	@ (800536c <cleanup_stdio+0x38>)
 8005348:	4299      	cmp	r1, r3
 800534a:	d002      	beq.n	8005352 <cleanup_stdio+0x1e>
 800534c:	4620      	mov	r0, r4
 800534e:	f001 fe19 	bl	8006f84 <_fflush_r>
 8005352:	68e1      	ldr	r1, [r4, #12]
 8005354:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <cleanup_stdio+0x3c>)
 8005356:	4299      	cmp	r1, r3
 8005358:	d004      	beq.n	8005364 <cleanup_stdio+0x30>
 800535a:	4620      	mov	r0, r4
 800535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005360:	f001 be10 	b.w	8006f84 <_fflush_r>
 8005364:	bd10      	pop	{r4, pc}
 8005366:	bf00      	nop
 8005368:	200012dc 	.word	0x200012dc
 800536c:	20001344 	.word	0x20001344
 8005370:	200013ac 	.word	0x200013ac

08005374 <global_stdio_init.part.0>:
 8005374:	b510      	push	{r4, lr}
 8005376:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <global_stdio_init.part.0+0x30>)
 8005378:	4c0b      	ldr	r4, [pc, #44]	@ (80053a8 <global_stdio_init.part.0+0x34>)
 800537a:	4a0c      	ldr	r2, [pc, #48]	@ (80053ac <global_stdio_init.part.0+0x38>)
 800537c:	4620      	mov	r0, r4
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	2104      	movs	r1, #4
 8005382:	2200      	movs	r2, #0
 8005384:	f7ff ff94 	bl	80052b0 <std>
 8005388:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800538c:	2201      	movs	r2, #1
 800538e:	2109      	movs	r1, #9
 8005390:	f7ff ff8e 	bl	80052b0 <std>
 8005394:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005398:	2202      	movs	r2, #2
 800539a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800539e:	2112      	movs	r1, #18
 80053a0:	f7ff bf86 	b.w	80052b0 <std>
 80053a4:	20001414 	.word	0x20001414
 80053a8:	200012dc 	.word	0x200012dc
 80053ac:	0800531d 	.word	0x0800531d

080053b0 <__sfp_lock_acquire>:
 80053b0:	4801      	ldr	r0, [pc, #4]	@ (80053b8 <__sfp_lock_acquire+0x8>)
 80053b2:	f000 b920 	b.w	80055f6 <__retarget_lock_acquire_recursive>
 80053b6:	bf00      	nop
 80053b8:	2000141d 	.word	0x2000141d

080053bc <__sfp_lock_release>:
 80053bc:	4801      	ldr	r0, [pc, #4]	@ (80053c4 <__sfp_lock_release+0x8>)
 80053be:	f000 b91b 	b.w	80055f8 <__retarget_lock_release_recursive>
 80053c2:	bf00      	nop
 80053c4:	2000141d 	.word	0x2000141d

080053c8 <__sinit>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	4604      	mov	r4, r0
 80053cc:	f7ff fff0 	bl	80053b0 <__sfp_lock_acquire>
 80053d0:	6a23      	ldr	r3, [r4, #32]
 80053d2:	b11b      	cbz	r3, 80053dc <__sinit+0x14>
 80053d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d8:	f7ff bff0 	b.w	80053bc <__sfp_lock_release>
 80053dc:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <__sinit+0x28>)
 80053de:	6223      	str	r3, [r4, #32]
 80053e0:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <__sinit+0x2c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f5      	bne.n	80053d4 <__sinit+0xc>
 80053e8:	f7ff ffc4 	bl	8005374 <global_stdio_init.part.0>
 80053ec:	e7f2      	b.n	80053d4 <__sinit+0xc>
 80053ee:	bf00      	nop
 80053f0:	08005335 	.word	0x08005335
 80053f4:	20001414 	.word	0x20001414

080053f8 <_fwalk_sglue>:
 80053f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053fc:	4607      	mov	r7, r0
 80053fe:	4688      	mov	r8, r1
 8005400:	4614      	mov	r4, r2
 8005402:	2600      	movs	r6, #0
 8005404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005408:	f1b9 0901 	subs.w	r9, r9, #1
 800540c:	d505      	bpl.n	800541a <_fwalk_sglue+0x22>
 800540e:	6824      	ldr	r4, [r4, #0]
 8005410:	2c00      	cmp	r4, #0
 8005412:	d1f7      	bne.n	8005404 <_fwalk_sglue+0xc>
 8005414:	4630      	mov	r0, r6
 8005416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541a:	89ab      	ldrh	r3, [r5, #12]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d907      	bls.n	8005430 <_fwalk_sglue+0x38>
 8005420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005424:	3301      	adds	r3, #1
 8005426:	d003      	beq.n	8005430 <_fwalk_sglue+0x38>
 8005428:	4629      	mov	r1, r5
 800542a:	4638      	mov	r0, r7
 800542c:	47c0      	blx	r8
 800542e:	4306      	orrs	r6, r0
 8005430:	3568      	adds	r5, #104	@ 0x68
 8005432:	e7e9      	b.n	8005408 <_fwalk_sglue+0x10>

08005434 <siprintf>:
 8005434:	b40e      	push	{r1, r2, r3}
 8005436:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800543a:	b500      	push	{lr}
 800543c:	b09c      	sub	sp, #112	@ 0x70
 800543e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005440:	9002      	str	r0, [sp, #8]
 8005442:	9006      	str	r0, [sp, #24]
 8005444:	9107      	str	r1, [sp, #28]
 8005446:	9104      	str	r1, [sp, #16]
 8005448:	4808      	ldr	r0, [pc, #32]	@ (800546c <siprintf+0x38>)
 800544a:	4909      	ldr	r1, [pc, #36]	@ (8005470 <siprintf+0x3c>)
 800544c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005450:	9105      	str	r1, [sp, #20]
 8005452:	6800      	ldr	r0, [r0, #0]
 8005454:	a902      	add	r1, sp, #8
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	f001 fc18 	bl	8006c8c <_svfiprintf_r>
 800545c:	2200      	movs	r2, #0
 800545e:	9b02      	ldr	r3, [sp, #8]
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	b01c      	add	sp, #112	@ 0x70
 8005464:	f85d eb04 	ldr.w	lr, [sp], #4
 8005468:	b003      	add	sp, #12
 800546a:	4770      	bx	lr
 800546c:	2000005c 	.word	0x2000005c
 8005470:	ffff0208 	.word	0xffff0208

08005474 <__sread>:
 8005474:	b510      	push	{r4, lr}
 8005476:	460c      	mov	r4, r1
 8005478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547c:	f000 f86c 	bl	8005558 <_read_r>
 8005480:	2800      	cmp	r0, #0
 8005482:	bfab      	itete	ge
 8005484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005486:	89a3      	ldrhlt	r3, [r4, #12]
 8005488:	181b      	addge	r3, r3, r0
 800548a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800548e:	bfac      	ite	ge
 8005490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005492:	81a3      	strhlt	r3, [r4, #12]
 8005494:	bd10      	pop	{r4, pc}

08005496 <__swrite>:
 8005496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800549a:	461f      	mov	r7, r3
 800549c:	898b      	ldrh	r3, [r1, #12]
 800549e:	4605      	mov	r5, r0
 80054a0:	05db      	lsls	r3, r3, #23
 80054a2:	460c      	mov	r4, r1
 80054a4:	4616      	mov	r6, r2
 80054a6:	d505      	bpl.n	80054b4 <__swrite+0x1e>
 80054a8:	2302      	movs	r3, #2
 80054aa:	2200      	movs	r2, #0
 80054ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b0:	f000 f840 	bl	8005534 <_lseek_r>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	4632      	mov	r2, r6
 80054b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054bc:	81a3      	strh	r3, [r4, #12]
 80054be:	4628      	mov	r0, r5
 80054c0:	463b      	mov	r3, r7
 80054c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	f000 b857 	b.w	800557c <_write_r>

080054ce <__sseek>:
 80054ce:	b510      	push	{r4, lr}
 80054d0:	460c      	mov	r4, r1
 80054d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d6:	f000 f82d 	bl	8005534 <_lseek_r>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	bf15      	itete	ne
 80054e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054ea:	81a3      	strheq	r3, [r4, #12]
 80054ec:	bf18      	it	ne
 80054ee:	81a3      	strhne	r3, [r4, #12]
 80054f0:	bd10      	pop	{r4, pc}

080054f2 <__sclose>:
 80054f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f6:	f000 b80d 	b.w	8005514 <_close_r>

080054fa <memset>:
 80054fa:	4603      	mov	r3, r0
 80054fc:	4402      	add	r2, r0
 80054fe:	4293      	cmp	r3, r2
 8005500:	d100      	bne.n	8005504 <memset+0xa>
 8005502:	4770      	bx	lr
 8005504:	f803 1b01 	strb.w	r1, [r3], #1
 8005508:	e7f9      	b.n	80054fe <memset+0x4>
	...

0800550c <_localeconv_r>:
 800550c:	4800      	ldr	r0, [pc, #0]	@ (8005510 <_localeconv_r+0x4>)
 800550e:	4770      	bx	lr
 8005510:	2000019c 	.word	0x2000019c

08005514 <_close_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	2300      	movs	r3, #0
 8005518:	4d05      	ldr	r5, [pc, #20]	@ (8005530 <_close_r+0x1c>)
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	f7fc fbac 	bl	8001c7c <_close>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_close_r+0x1a>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_close_r+0x1a>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	20001418 	.word	0x20001418

08005534 <_lseek_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	4611      	mov	r1, r2
 800553c:	2200      	movs	r2, #0
 800553e:	4d05      	ldr	r5, [pc, #20]	@ (8005554 <_lseek_r+0x20>)
 8005540:	602a      	str	r2, [r5, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f7fc fbbe 	bl	8001cc4 <_lseek>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_lseek_r+0x1e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_lseek_r+0x1e>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20001418 	.word	0x20001418

08005558 <_read_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	2200      	movs	r2, #0
 8005562:	4d05      	ldr	r5, [pc, #20]	@ (8005578 <_read_r+0x20>)
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fc fb4f 	bl	8001c0a <_read>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_read_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_read_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20001418 	.word	0x20001418

0800557c <_write_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	4611      	mov	r1, r2
 8005584:	2200      	movs	r2, #0
 8005586:	4d05      	ldr	r5, [pc, #20]	@ (800559c <_write_r+0x20>)
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fc fb5a 	bl	8001c44 <_write>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_write_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_write_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	20001418 	.word	0x20001418

080055a0 <__errno>:
 80055a0:	4b01      	ldr	r3, [pc, #4]	@ (80055a8 <__errno+0x8>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	2000005c 	.word	0x2000005c

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	2600      	movs	r6, #0
 80055b0:	4d0c      	ldr	r5, [pc, #48]	@ (80055e4 <__libc_init_array+0x38>)
 80055b2:	4c0d      	ldr	r4, [pc, #52]	@ (80055e8 <__libc_init_array+0x3c>)
 80055b4:	1b64      	subs	r4, r4, r5
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	42a6      	cmp	r6, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	f002 f870 	bl	80076a0 <_init>
 80055c0:	2600      	movs	r6, #0
 80055c2:	4d0a      	ldr	r5, [pc, #40]	@ (80055ec <__libc_init_array+0x40>)
 80055c4:	4c0a      	ldr	r4, [pc, #40]	@ (80055f0 <__libc_init_array+0x44>)
 80055c6:	1b64      	subs	r4, r4, r5
 80055c8:	10a4      	asrs	r4, r4, #2
 80055ca:	42a6      	cmp	r6, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d4:	4798      	blx	r3
 80055d6:	3601      	adds	r6, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f855 3b04 	ldr.w	r3, [r5], #4
 80055de:	4798      	blx	r3
 80055e0:	3601      	adds	r6, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	08007b50 	.word	0x08007b50
 80055e8:	08007b50 	.word	0x08007b50
 80055ec:	08007b50 	.word	0x08007b50
 80055f0:	08007b54 	.word	0x08007b54

080055f4 <__retarget_lock_init_recursive>:
 80055f4:	4770      	bx	lr

080055f6 <__retarget_lock_acquire_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <__retarget_lock_release_recursive>:
 80055f8:	4770      	bx	lr

080055fa <memchr>:
 80055fa:	4603      	mov	r3, r0
 80055fc:	b510      	push	{r4, lr}
 80055fe:	b2c9      	uxtb	r1, r1
 8005600:	4402      	add	r2, r0
 8005602:	4293      	cmp	r3, r2
 8005604:	4618      	mov	r0, r3
 8005606:	d101      	bne.n	800560c <memchr+0x12>
 8005608:	2000      	movs	r0, #0
 800560a:	e003      	b.n	8005614 <memchr+0x1a>
 800560c:	7804      	ldrb	r4, [r0, #0]
 800560e:	3301      	adds	r3, #1
 8005610:	428c      	cmp	r4, r1
 8005612:	d1f6      	bne.n	8005602 <memchr+0x8>
 8005614:	bd10      	pop	{r4, pc}

08005616 <memcpy>:
 8005616:	440a      	add	r2, r1
 8005618:	4291      	cmp	r1, r2
 800561a:	f100 33ff 	add.w	r3, r0, #4294967295
 800561e:	d100      	bne.n	8005622 <memcpy+0xc>
 8005620:	4770      	bx	lr
 8005622:	b510      	push	{r4, lr}
 8005624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005628:	4291      	cmp	r1, r2
 800562a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800562e:	d1f9      	bne.n	8005624 <memcpy+0xe>
 8005630:	bd10      	pop	{r4, pc}

08005632 <quorem>:
 8005632:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005636:	6903      	ldr	r3, [r0, #16]
 8005638:	690c      	ldr	r4, [r1, #16]
 800563a:	4607      	mov	r7, r0
 800563c:	42a3      	cmp	r3, r4
 800563e:	db7e      	blt.n	800573e <quorem+0x10c>
 8005640:	3c01      	subs	r4, #1
 8005642:	00a3      	lsls	r3, r4, #2
 8005644:	f100 0514 	add.w	r5, r0, #20
 8005648:	f101 0814 	add.w	r8, r1, #20
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800565c:	3301      	adds	r3, #1
 800565e:	429a      	cmp	r2, r3
 8005660:	fbb2 f6f3 	udiv	r6, r2, r3
 8005664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005668:	d32e      	bcc.n	80056c8 <quorem+0x96>
 800566a:	f04f 0a00 	mov.w	sl, #0
 800566e:	46c4      	mov	ip, r8
 8005670:	46ae      	mov	lr, r5
 8005672:	46d3      	mov	fp, sl
 8005674:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005678:	b298      	uxth	r0, r3
 800567a:	fb06 a000 	mla	r0, r6, r0, sl
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	0c02      	lsrs	r2, r0, #16
 8005682:	fb06 2303 	mla	r3, r6, r3, r2
 8005686:	f8de 2000 	ldr.w	r2, [lr]
 800568a:	b280      	uxth	r0, r0
 800568c:	b292      	uxth	r2, r2
 800568e:	1a12      	subs	r2, r2, r0
 8005690:	445a      	add	r2, fp
 8005692:	f8de 0000 	ldr.w	r0, [lr]
 8005696:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800569a:	b29b      	uxth	r3, r3
 800569c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80056a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056a4:	b292      	uxth	r2, r2
 80056a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056aa:	45e1      	cmp	r9, ip
 80056ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80056b0:	f84e 2b04 	str.w	r2, [lr], #4
 80056b4:	d2de      	bcs.n	8005674 <quorem+0x42>
 80056b6:	9b00      	ldr	r3, [sp, #0]
 80056b8:	58eb      	ldr	r3, [r5, r3]
 80056ba:	b92b      	cbnz	r3, 80056c8 <quorem+0x96>
 80056bc:	9b01      	ldr	r3, [sp, #4]
 80056be:	3b04      	subs	r3, #4
 80056c0:	429d      	cmp	r5, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	d32f      	bcc.n	8005726 <quorem+0xf4>
 80056c6:	613c      	str	r4, [r7, #16]
 80056c8:	4638      	mov	r0, r7
 80056ca:	f001 f97b 	bl	80069c4 <__mcmp>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	db25      	blt.n	800571e <quorem+0xec>
 80056d2:	4629      	mov	r1, r5
 80056d4:	2000      	movs	r0, #0
 80056d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80056da:	f8d1 c000 	ldr.w	ip, [r1]
 80056de:	fa1f fe82 	uxth.w	lr, r2
 80056e2:	fa1f f38c 	uxth.w	r3, ip
 80056e6:	eba3 030e 	sub.w	r3, r3, lr
 80056ea:	4403      	add	r3, r0
 80056ec:	0c12      	lsrs	r2, r2, #16
 80056ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056fc:	45c1      	cmp	r9, r8
 80056fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005702:	f841 3b04 	str.w	r3, [r1], #4
 8005706:	d2e6      	bcs.n	80056d6 <quorem+0xa4>
 8005708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800570c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005710:	b922      	cbnz	r2, 800571c <quorem+0xea>
 8005712:	3b04      	subs	r3, #4
 8005714:	429d      	cmp	r5, r3
 8005716:	461a      	mov	r2, r3
 8005718:	d30b      	bcc.n	8005732 <quorem+0x100>
 800571a:	613c      	str	r4, [r7, #16]
 800571c:	3601      	adds	r6, #1
 800571e:	4630      	mov	r0, r6
 8005720:	b003      	add	sp, #12
 8005722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	3b04      	subs	r3, #4
 800572a:	2a00      	cmp	r2, #0
 800572c:	d1cb      	bne.n	80056c6 <quorem+0x94>
 800572e:	3c01      	subs	r4, #1
 8005730:	e7c6      	b.n	80056c0 <quorem+0x8e>
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	3b04      	subs	r3, #4
 8005736:	2a00      	cmp	r2, #0
 8005738:	d1ef      	bne.n	800571a <quorem+0xe8>
 800573a:	3c01      	subs	r4, #1
 800573c:	e7ea      	b.n	8005714 <quorem+0xe2>
 800573e:	2000      	movs	r0, #0
 8005740:	e7ee      	b.n	8005720 <quorem+0xee>
 8005742:	0000      	movs	r0, r0
 8005744:	0000      	movs	r0, r0
	...

08005748 <_dtoa_r>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	4614      	mov	r4, r2
 800574e:	461d      	mov	r5, r3
 8005750:	69c7      	ldr	r7, [r0, #28]
 8005752:	b097      	sub	sp, #92	@ 0x5c
 8005754:	4683      	mov	fp, r0
 8005756:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800575a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800575c:	b97f      	cbnz	r7, 800577e <_dtoa_r+0x36>
 800575e:	2010      	movs	r0, #16
 8005760:	f000 fe02 	bl	8006368 <malloc>
 8005764:	4602      	mov	r2, r0
 8005766:	f8cb 001c 	str.w	r0, [fp, #28]
 800576a:	b920      	cbnz	r0, 8005776 <_dtoa_r+0x2e>
 800576c:	21ef      	movs	r1, #239	@ 0xef
 800576e:	4ba8      	ldr	r3, [pc, #672]	@ (8005a10 <_dtoa_r+0x2c8>)
 8005770:	48a8      	ldr	r0, [pc, #672]	@ (8005a14 <_dtoa_r+0x2cc>)
 8005772:	f001 fc59 	bl	8007028 <__assert_func>
 8005776:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800577a:	6007      	str	r7, [r0, #0]
 800577c:	60c7      	str	r7, [r0, #12]
 800577e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	b159      	cbz	r1, 800579e <_dtoa_r+0x56>
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	2301      	movs	r3, #1
 800578a:	4093      	lsls	r3, r2
 800578c:	604a      	str	r2, [r1, #4]
 800578e:	608b      	str	r3, [r1, #8]
 8005790:	4658      	mov	r0, fp
 8005792:	f000 fedf 	bl	8006554 <_Bfree>
 8005796:	2200      	movs	r2, #0
 8005798:	f8db 301c 	ldr.w	r3, [fp, #28]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	1e2b      	subs	r3, r5, #0
 80057a0:	bfaf      	iteee	ge
 80057a2:	2300      	movge	r3, #0
 80057a4:	2201      	movlt	r2, #1
 80057a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057aa:	9303      	strlt	r3, [sp, #12]
 80057ac:	bfa8      	it	ge
 80057ae:	6033      	strge	r3, [r6, #0]
 80057b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80057b4:	4b98      	ldr	r3, [pc, #608]	@ (8005a18 <_dtoa_r+0x2d0>)
 80057b6:	bfb8      	it	lt
 80057b8:	6032      	strlt	r2, [r6, #0]
 80057ba:	ea33 0308 	bics.w	r3, r3, r8
 80057be:	d112      	bne.n	80057e6 <_dtoa_r+0x9e>
 80057c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80057c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80057cc:	4323      	orrs	r3, r4
 80057ce:	f000 8550 	beq.w	8006272 <_dtoa_r+0xb2a>
 80057d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057d4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005a1c <_dtoa_r+0x2d4>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8552 	beq.w	8006282 <_dtoa_r+0xb3a>
 80057de:	f10a 0303 	add.w	r3, sl, #3
 80057e2:	f000 bd4c 	b.w	800627e <_dtoa_r+0xb36>
 80057e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057f2:	2200      	movs	r2, #0
 80057f4:	2300      	movs	r3, #0
 80057f6:	f7fb f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 80057fa:	4607      	mov	r7, r0
 80057fc:	b158      	cbz	r0, 8005816 <_dtoa_r+0xce>
 80057fe:	2301      	movs	r3, #1
 8005800:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005806:	b113      	cbz	r3, 800580e <_dtoa_r+0xc6>
 8005808:	4b85      	ldr	r3, [pc, #532]	@ (8005a20 <_dtoa_r+0x2d8>)
 800580a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005a24 <_dtoa_r+0x2dc>
 8005812:	f000 bd36 	b.w	8006282 <_dtoa_r+0xb3a>
 8005816:	ab14      	add	r3, sp, #80	@ 0x50
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	ab15      	add	r3, sp, #84	@ 0x54
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4658      	mov	r0, fp
 8005820:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005824:	f001 f97e 	bl	8006b24 <__d2b>
 8005828:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800582c:	4681      	mov	r9, r0
 800582e:	2e00      	cmp	r6, #0
 8005830:	d077      	beq.n	8005922 <_dtoa_r+0x1da>
 8005832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005838:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800583c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005840:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005844:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005848:	9712      	str	r7, [sp, #72]	@ 0x48
 800584a:	4619      	mov	r1, r3
 800584c:	2200      	movs	r2, #0
 800584e:	4b76      	ldr	r3, [pc, #472]	@ (8005a28 <_dtoa_r+0x2e0>)
 8005850:	f7fa fc8a 	bl	8000168 <__aeabi_dsub>
 8005854:	a368      	add	r3, pc, #416	@ (adr r3, 80059f8 <_dtoa_r+0x2b0>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f7fa fe3d 	bl	80004d8 <__aeabi_dmul>
 800585e:	a368      	add	r3, pc, #416	@ (adr r3, 8005a00 <_dtoa_r+0x2b8>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f7fa fc82 	bl	800016c <__adddf3>
 8005868:	4604      	mov	r4, r0
 800586a:	4630      	mov	r0, r6
 800586c:	460d      	mov	r5, r1
 800586e:	f7fa fdc9 	bl	8000404 <__aeabi_i2d>
 8005872:	a365      	add	r3, pc, #404	@ (adr r3, 8005a08 <_dtoa_r+0x2c0>)
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f7fa fe2e 	bl	80004d8 <__aeabi_dmul>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4620      	mov	r0, r4
 8005882:	4629      	mov	r1, r5
 8005884:	f7fa fc72 	bl	800016c <__adddf3>
 8005888:	4604      	mov	r4, r0
 800588a:	460d      	mov	r5, r1
 800588c:	f7fb f8d4 	bl	8000a38 <__aeabi_d2iz>
 8005890:	2200      	movs	r2, #0
 8005892:	4607      	mov	r7, r0
 8005894:	2300      	movs	r3, #0
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fb f88f 	bl	80009bc <__aeabi_dcmplt>
 800589e:	b140      	cbz	r0, 80058b2 <_dtoa_r+0x16a>
 80058a0:	4638      	mov	r0, r7
 80058a2:	f7fa fdaf 	bl	8000404 <__aeabi_i2d>
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	f7fb f87d 	bl	80009a8 <__aeabi_dcmpeq>
 80058ae:	b900      	cbnz	r0, 80058b2 <_dtoa_r+0x16a>
 80058b0:	3f01      	subs	r7, #1
 80058b2:	2f16      	cmp	r7, #22
 80058b4:	d853      	bhi.n	800595e <_dtoa_r+0x216>
 80058b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058ba:	4b5c      	ldr	r3, [pc, #368]	@ (8005a2c <_dtoa_r+0x2e4>)
 80058bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f7fb f87a 	bl	80009bc <__aeabi_dcmplt>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d04a      	beq.n	8005962 <_dtoa_r+0x21a>
 80058cc:	2300      	movs	r3, #0
 80058ce:	3f01      	subs	r7, #1
 80058d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058d4:	1b9b      	subs	r3, r3, r6
 80058d6:	1e5a      	subs	r2, r3, #1
 80058d8:	bf46      	itte	mi
 80058da:	f1c3 0801 	rsbmi	r8, r3, #1
 80058de:	2300      	movmi	r3, #0
 80058e0:	f04f 0800 	movpl.w	r8, #0
 80058e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80058e6:	bf48      	it	mi
 80058e8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80058ea:	2f00      	cmp	r7, #0
 80058ec:	db3b      	blt.n	8005966 <_dtoa_r+0x21e>
 80058ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f0:	970e      	str	r7, [sp, #56]	@ 0x38
 80058f2:	443b      	add	r3, r7
 80058f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058f6:	2300      	movs	r3, #0
 80058f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058fc:	2b09      	cmp	r3, #9
 80058fe:	d866      	bhi.n	80059ce <_dtoa_r+0x286>
 8005900:	2b05      	cmp	r3, #5
 8005902:	bfc4      	itt	gt
 8005904:	3b04      	subgt	r3, #4
 8005906:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005908:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800590a:	bfc8      	it	gt
 800590c:	2400      	movgt	r4, #0
 800590e:	f1a3 0302 	sub.w	r3, r3, #2
 8005912:	bfd8      	it	le
 8005914:	2401      	movle	r4, #1
 8005916:	2b03      	cmp	r3, #3
 8005918:	d864      	bhi.n	80059e4 <_dtoa_r+0x29c>
 800591a:	e8df f003 	tbb	[pc, r3]
 800591e:	382b      	.short	0x382b
 8005920:	5636      	.short	0x5636
 8005922:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005926:	441e      	add	r6, r3
 8005928:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800592c:	2b20      	cmp	r3, #32
 800592e:	bfc1      	itttt	gt
 8005930:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005934:	fa08 f803 	lslgt.w	r8, r8, r3
 8005938:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800593c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005940:	bfd6      	itet	le
 8005942:	f1c3 0320 	rsble	r3, r3, #32
 8005946:	ea48 0003 	orrgt.w	r0, r8, r3
 800594a:	fa04 f003 	lslle.w	r0, r4, r3
 800594e:	f7fa fd49 	bl	80003e4 <__aeabi_ui2d>
 8005952:	2201      	movs	r2, #1
 8005954:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005958:	3e01      	subs	r6, #1
 800595a:	9212      	str	r2, [sp, #72]	@ 0x48
 800595c:	e775      	b.n	800584a <_dtoa_r+0x102>
 800595e:	2301      	movs	r3, #1
 8005960:	e7b6      	b.n	80058d0 <_dtoa_r+0x188>
 8005962:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005964:	e7b5      	b.n	80058d2 <_dtoa_r+0x18a>
 8005966:	427b      	negs	r3, r7
 8005968:	930a      	str	r3, [sp, #40]	@ 0x28
 800596a:	2300      	movs	r3, #0
 800596c:	eba8 0807 	sub.w	r8, r8, r7
 8005970:	930e      	str	r3, [sp, #56]	@ 0x38
 8005972:	e7c2      	b.n	80058fa <_dtoa_r+0x1b2>
 8005974:	2300      	movs	r3, #0
 8005976:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005978:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800597a:	2b00      	cmp	r3, #0
 800597c:	dc35      	bgt.n	80059ea <_dtoa_r+0x2a2>
 800597e:	2301      	movs	r3, #1
 8005980:	461a      	mov	r2, r3
 8005982:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005986:	9221      	str	r2, [sp, #132]	@ 0x84
 8005988:	e00b      	b.n	80059a2 <_dtoa_r+0x25a>
 800598a:	2301      	movs	r3, #1
 800598c:	e7f3      	b.n	8005976 <_dtoa_r+0x22e>
 800598e:	2300      	movs	r3, #0
 8005990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005992:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	9308      	str	r3, [sp, #32]
 8005998:	3301      	adds	r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	9307      	str	r3, [sp, #28]
 800599e:	bfb8      	it	lt
 80059a0:	2301      	movlt	r3, #1
 80059a2:	2100      	movs	r1, #0
 80059a4:	2204      	movs	r2, #4
 80059a6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80059aa:	f102 0514 	add.w	r5, r2, #20
 80059ae:	429d      	cmp	r5, r3
 80059b0:	d91f      	bls.n	80059f2 <_dtoa_r+0x2aa>
 80059b2:	6041      	str	r1, [r0, #4]
 80059b4:	4658      	mov	r0, fp
 80059b6:	f000 fd8d 	bl	80064d4 <_Balloc>
 80059ba:	4682      	mov	sl, r0
 80059bc:	2800      	cmp	r0, #0
 80059be:	d139      	bne.n	8005a34 <_dtoa_r+0x2ec>
 80059c0:	4602      	mov	r2, r0
 80059c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80059c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a30 <_dtoa_r+0x2e8>)
 80059c8:	e6d2      	b.n	8005770 <_dtoa_r+0x28>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e7e0      	b.n	8005990 <_dtoa_r+0x248>
 80059ce:	2401      	movs	r4, #1
 80059d0:	2300      	movs	r3, #0
 80059d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	2200      	movs	r2, #0
 80059dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059e0:	2312      	movs	r3, #18
 80059e2:	e7d0      	b.n	8005986 <_dtoa_r+0x23e>
 80059e4:	2301      	movs	r3, #1
 80059e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059e8:	e7f5      	b.n	80059d6 <_dtoa_r+0x28e>
 80059ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059f0:	e7d7      	b.n	80059a2 <_dtoa_r+0x25a>
 80059f2:	3101      	adds	r1, #1
 80059f4:	0052      	lsls	r2, r2, #1
 80059f6:	e7d8      	b.n	80059aa <_dtoa_r+0x262>
 80059f8:	636f4361 	.word	0x636f4361
 80059fc:	3fd287a7 	.word	0x3fd287a7
 8005a00:	8b60c8b3 	.word	0x8b60c8b3
 8005a04:	3fc68a28 	.word	0x3fc68a28
 8005a08:	509f79fb 	.word	0x509f79fb
 8005a0c:	3fd34413 	.word	0x3fd34413
 8005a10:	08007817 	.word	0x08007817
 8005a14:	0800782e 	.word	0x0800782e
 8005a18:	7ff00000 	.word	0x7ff00000
 8005a1c:	08007813 	.word	0x08007813
 8005a20:	080077e7 	.word	0x080077e7
 8005a24:	080077e6 	.word	0x080077e6
 8005a28:	3ff80000 	.word	0x3ff80000
 8005a2c:	08007928 	.word	0x08007928
 8005a30:	08007886 	.word	0x08007886
 8005a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a38:	6018      	str	r0, [r3, #0]
 8005a3a:	9b07      	ldr	r3, [sp, #28]
 8005a3c:	2b0e      	cmp	r3, #14
 8005a3e:	f200 80a4 	bhi.w	8005b8a <_dtoa_r+0x442>
 8005a42:	2c00      	cmp	r4, #0
 8005a44:	f000 80a1 	beq.w	8005b8a <_dtoa_r+0x442>
 8005a48:	2f00      	cmp	r7, #0
 8005a4a:	dd33      	ble.n	8005ab4 <_dtoa_r+0x36c>
 8005a4c:	4b86      	ldr	r3, [pc, #536]	@ (8005c68 <_dtoa_r+0x520>)
 8005a4e:	f007 020f 	and.w	r2, r7, #15
 8005a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a56:	05f8      	lsls	r0, r7, #23
 8005a58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a64:	d516      	bpl.n	8005a94 <_dtoa_r+0x34c>
 8005a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a6a:	4b80      	ldr	r3, [pc, #512]	@ (8005c6c <_dtoa_r+0x524>)
 8005a6c:	2603      	movs	r6, #3
 8005a6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a72:	f7fa fe5b 	bl	800072c <__aeabi_ddiv>
 8005a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a7a:	f004 040f 	and.w	r4, r4, #15
 8005a7e:	4d7b      	ldr	r5, [pc, #492]	@ (8005c6c <_dtoa_r+0x524>)
 8005a80:	b954      	cbnz	r4, 8005a98 <_dtoa_r+0x350>
 8005a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8a:	f7fa fe4f 	bl	800072c <__aeabi_ddiv>
 8005a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a92:	e028      	b.n	8005ae6 <_dtoa_r+0x39e>
 8005a94:	2602      	movs	r6, #2
 8005a96:	e7f2      	b.n	8005a7e <_dtoa_r+0x336>
 8005a98:	07e1      	lsls	r1, r4, #31
 8005a9a:	d508      	bpl.n	8005aae <_dtoa_r+0x366>
 8005a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005aa4:	f7fa fd18 	bl	80004d8 <__aeabi_dmul>
 8005aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aac:	3601      	adds	r6, #1
 8005aae:	1064      	asrs	r4, r4, #1
 8005ab0:	3508      	adds	r5, #8
 8005ab2:	e7e5      	b.n	8005a80 <_dtoa_r+0x338>
 8005ab4:	f000 80d2 	beq.w	8005c5c <_dtoa_r+0x514>
 8005ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005abc:	427c      	negs	r4, r7
 8005abe:	4b6a      	ldr	r3, [pc, #424]	@ (8005c68 <_dtoa_r+0x520>)
 8005ac0:	f004 020f 	and.w	r2, r4, #15
 8005ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fd04 	bl	80004d8 <__aeabi_dmul>
 8005ad0:	2602      	movs	r6, #2
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad8:	4d64      	ldr	r5, [pc, #400]	@ (8005c6c <_dtoa_r+0x524>)
 8005ada:	1124      	asrs	r4, r4, #4
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	f040 80b2 	bne.w	8005c46 <_dtoa_r+0x4fe>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1d3      	bne.n	8005a8e <_dtoa_r+0x346>
 8005ae6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80b7 	beq.w	8005c60 <_dtoa_r+0x518>
 8005af2:	2200      	movs	r2, #0
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	4b5d      	ldr	r3, [pc, #372]	@ (8005c70 <_dtoa_r+0x528>)
 8005afa:	f7fa ff5f 	bl	80009bc <__aeabi_dcmplt>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f000 80ae 	beq.w	8005c60 <_dtoa_r+0x518>
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80aa 	beq.w	8005c60 <_dtoa_r+0x518>
 8005b0c:	9b08      	ldr	r3, [sp, #32]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	dd37      	ble.n	8005b82 <_dtoa_r+0x43a>
 8005b12:	1e7b      	subs	r3, r7, #1
 8005b14:	4620      	mov	r0, r4
 8005b16:	9304      	str	r3, [sp, #16]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4b55      	ldr	r3, [pc, #340]	@ (8005c74 <_dtoa_r+0x52c>)
 8005b1e:	f7fa fcdb 	bl	80004d8 <__aeabi_dmul>
 8005b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b26:	9c08      	ldr	r4, [sp, #32]
 8005b28:	3601      	adds	r6, #1
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7fa fc6a 	bl	8000404 <__aeabi_i2d>
 8005b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b34:	f7fa fcd0 	bl	80004d8 <__aeabi_dmul>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c78 <_dtoa_r+0x530>)
 8005b3c:	f7fa fb16 	bl	800016c <__adddf3>
 8005b40:	4605      	mov	r5, r0
 8005b42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	f040 809a 	bne.w	8005c80 <_dtoa_r+0x538>
 8005b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	4b4a      	ldr	r3, [pc, #296]	@ (8005c7c <_dtoa_r+0x534>)
 8005b54:	f7fa fb08 	bl	8000168 <__aeabi_dsub>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b60:	462a      	mov	r2, r5
 8005b62:	4633      	mov	r3, r6
 8005b64:	f7fa ff48 	bl	80009f8 <__aeabi_dcmpgt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f040 828e 	bne.w	800608a <_dtoa_r+0x942>
 8005b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b72:	462a      	mov	r2, r5
 8005b74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b78:	f7fa ff20 	bl	80009bc <__aeabi_dcmplt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f040 8127 	bne.w	8005dd0 <_dtoa_r+0x688>
 8005b82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f2c0 8163 	blt.w	8005e58 <_dtoa_r+0x710>
 8005b92:	2f0e      	cmp	r7, #14
 8005b94:	f300 8160 	bgt.w	8005e58 <_dtoa_r+0x710>
 8005b98:	4b33      	ldr	r3, [pc, #204]	@ (8005c68 <_dtoa_r+0x520>)
 8005b9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ba2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ba6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	da03      	bge.n	8005bb4 <_dtoa_r+0x46c>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f340 8100 	ble.w	8005db4 <_dtoa_r+0x66c>
 8005bb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bb8:	4656      	mov	r6, sl
 8005bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa fdb3 	bl	800072c <__aeabi_ddiv>
 8005bc6:	f7fa ff37 	bl	8000a38 <__aeabi_d2iz>
 8005bca:	4680      	mov	r8, r0
 8005bcc:	f7fa fc1a 	bl	8000404 <__aeabi_i2d>
 8005bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd4:	f7fa fc80 	bl	80004d8 <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	4629      	mov	r1, r5
 8005be0:	f7fa fac2 	bl	8000168 <__aeabi_dsub>
 8005be4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005be8:	9d07      	ldr	r5, [sp, #28]
 8005bea:	f806 4b01 	strb.w	r4, [r6], #1
 8005bee:	eba6 040a 	sub.w	r4, r6, sl
 8005bf2:	42a5      	cmp	r5, r4
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	f040 8116 	bne.w	8005e28 <_dtoa_r+0x6e0>
 8005bfc:	f7fa fab6 	bl	800016c <__adddf3>
 8005c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c04:	4604      	mov	r4, r0
 8005c06:	460d      	mov	r5, r1
 8005c08:	f7fa fef6 	bl	80009f8 <__aeabi_dcmpgt>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f040 80f8 	bne.w	8005e02 <_dtoa_r+0x6ba>
 8005c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fec5 	bl	80009a8 <__aeabi_dcmpeq>
 8005c1e:	b118      	cbz	r0, 8005c28 <_dtoa_r+0x4e0>
 8005c20:	f018 0f01 	tst.w	r8, #1
 8005c24:	f040 80ed 	bne.w	8005e02 <_dtoa_r+0x6ba>
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4658      	mov	r0, fp
 8005c2c:	f000 fc92 	bl	8006554 <_Bfree>
 8005c30:	2300      	movs	r3, #0
 8005c32:	7033      	strb	r3, [r6, #0]
 8005c34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c36:	3701      	adds	r7, #1
 8005c38:	601f      	str	r7, [r3, #0]
 8005c3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8320 	beq.w	8006282 <_dtoa_r+0xb3a>
 8005c42:	601e      	str	r6, [r3, #0]
 8005c44:	e31d      	b.n	8006282 <_dtoa_r+0xb3a>
 8005c46:	07e2      	lsls	r2, r4, #31
 8005c48:	d505      	bpl.n	8005c56 <_dtoa_r+0x50e>
 8005c4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c4e:	f7fa fc43 	bl	80004d8 <__aeabi_dmul>
 8005c52:	2301      	movs	r3, #1
 8005c54:	3601      	adds	r6, #1
 8005c56:	1064      	asrs	r4, r4, #1
 8005c58:	3508      	adds	r5, #8
 8005c5a:	e73f      	b.n	8005adc <_dtoa_r+0x394>
 8005c5c:	2602      	movs	r6, #2
 8005c5e:	e742      	b.n	8005ae6 <_dtoa_r+0x39e>
 8005c60:	9c07      	ldr	r4, [sp, #28]
 8005c62:	9704      	str	r7, [sp, #16]
 8005c64:	e761      	b.n	8005b2a <_dtoa_r+0x3e2>
 8005c66:	bf00      	nop
 8005c68:	08007928 	.word	0x08007928
 8005c6c:	08007900 	.word	0x08007900
 8005c70:	3ff00000 	.word	0x3ff00000
 8005c74:	40240000 	.word	0x40240000
 8005c78:	401c0000 	.word	0x401c0000
 8005c7c:	40140000 	.word	0x40140000
 8005c80:	4b70      	ldr	r3, [pc, #448]	@ (8005e44 <_dtoa_r+0x6fc>)
 8005c82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c8c:	4454      	add	r4, sl
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d045      	beq.n	8005d1e <_dtoa_r+0x5d6>
 8005c92:	2000      	movs	r0, #0
 8005c94:	496c      	ldr	r1, [pc, #432]	@ (8005e48 <_dtoa_r+0x700>)
 8005c96:	f7fa fd49 	bl	800072c <__aeabi_ddiv>
 8005c9a:	4633      	mov	r3, r6
 8005c9c:	462a      	mov	r2, r5
 8005c9e:	f7fa fa63 	bl	8000168 <__aeabi_dsub>
 8005ca2:	4656      	mov	r6, sl
 8005ca4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cac:	f7fa fec4 	bl	8000a38 <__aeabi_d2iz>
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	f7fa fba7 	bl	8000404 <__aeabi_i2d>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cbe:	f7fa fa53 	bl	8000168 <__aeabi_dsub>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	3530      	adds	r5, #48	@ 0x30
 8005cc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ccc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cd0:	f806 5b01 	strb.w	r5, [r6], #1
 8005cd4:	f7fa fe72 	bl	80009bc <__aeabi_dcmplt>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d163      	bne.n	8005da4 <_dtoa_r+0x65c>
 8005cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	495a      	ldr	r1, [pc, #360]	@ (8005e4c <_dtoa_r+0x704>)
 8005ce4:	f7fa fa40 	bl	8000168 <__aeabi_dsub>
 8005ce8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cec:	f7fa fe66 	bl	80009bc <__aeabi_dcmplt>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f040 8087 	bne.w	8005e04 <_dtoa_r+0x6bc>
 8005cf6:	42a6      	cmp	r6, r4
 8005cf8:	f43f af43 	beq.w	8005b82 <_dtoa_r+0x43a>
 8005cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d00:	2200      	movs	r2, #0
 8005d02:	4b53      	ldr	r3, [pc, #332]	@ (8005e50 <_dtoa_r+0x708>)
 8005d04:	f7fa fbe8 	bl	80004d8 <__aeabi_dmul>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d12:	4b4f      	ldr	r3, [pc, #316]	@ (8005e50 <_dtoa_r+0x708>)
 8005d14:	f7fa fbe0 	bl	80004d8 <__aeabi_dmul>
 8005d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1c:	e7c4      	b.n	8005ca8 <_dtoa_r+0x560>
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4628      	mov	r0, r5
 8005d22:	f7fa fbd9 	bl	80004d8 <__aeabi_dmul>
 8005d26:	4656      	mov	r6, sl
 8005d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d2c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d32:	f7fa fe81 	bl	8000a38 <__aeabi_d2iz>
 8005d36:	4605      	mov	r5, r0
 8005d38:	f7fa fb64 	bl	8000404 <__aeabi_i2d>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d44:	f7fa fa10 	bl	8000168 <__aeabi_dsub>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	3530      	adds	r5, #48	@ 0x30
 8005d4e:	f806 5b01 	strb.w	r5, [r6], #1
 8005d52:	42a6      	cmp	r6, r4
 8005d54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	d124      	bne.n	8005da8 <_dtoa_r+0x660>
 8005d5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d62:	4b39      	ldr	r3, [pc, #228]	@ (8005e48 <_dtoa_r+0x700>)
 8005d64:	f7fa fa02 	bl	800016c <__adddf3>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d70:	f7fa fe42 	bl	80009f8 <__aeabi_dcmpgt>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d145      	bne.n	8005e04 <_dtoa_r+0x6bc>
 8005d78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	4932      	ldr	r1, [pc, #200]	@ (8005e48 <_dtoa_r+0x700>)
 8005d80:	f7fa f9f2 	bl	8000168 <__aeabi_dsub>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d8c:	f7fa fe16 	bl	80009bc <__aeabi_dcmplt>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f43f aef6 	beq.w	8005b82 <_dtoa_r+0x43a>
 8005d96:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d98:	1e73      	subs	r3, r6, #1
 8005d9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005da0:	2b30      	cmp	r3, #48	@ 0x30
 8005da2:	d0f8      	beq.n	8005d96 <_dtoa_r+0x64e>
 8005da4:	9f04      	ldr	r7, [sp, #16]
 8005da6:	e73f      	b.n	8005c28 <_dtoa_r+0x4e0>
 8005da8:	4b29      	ldr	r3, [pc, #164]	@ (8005e50 <_dtoa_r+0x708>)
 8005daa:	f7fa fb95 	bl	80004d8 <__aeabi_dmul>
 8005dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db2:	e7bc      	b.n	8005d2e <_dtoa_r+0x5e6>
 8005db4:	d10c      	bne.n	8005dd0 <_dtoa_r+0x688>
 8005db6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4b25      	ldr	r3, [pc, #148]	@ (8005e54 <_dtoa_r+0x70c>)
 8005dbe:	f7fa fb8b 	bl	80004d8 <__aeabi_dmul>
 8005dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc6:	f7fa fe0d 	bl	80009e4 <__aeabi_dcmpge>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f000 815b 	beq.w	8006086 <_dtoa_r+0x93e>
 8005dd0:	2400      	movs	r4, #0
 8005dd2:	4625      	mov	r5, r4
 8005dd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dd6:	4656      	mov	r6, sl
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	2700      	movs	r7, #0
 8005dde:	4621      	mov	r1, r4
 8005de0:	4658      	mov	r0, fp
 8005de2:	f000 fbb7 	bl	8006554 <_Bfree>
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	d0dc      	beq.n	8005da4 <_dtoa_r+0x65c>
 8005dea:	b12f      	cbz	r7, 8005df8 <_dtoa_r+0x6b0>
 8005dec:	42af      	cmp	r7, r5
 8005dee:	d003      	beq.n	8005df8 <_dtoa_r+0x6b0>
 8005df0:	4639      	mov	r1, r7
 8005df2:	4658      	mov	r0, fp
 8005df4:	f000 fbae 	bl	8006554 <_Bfree>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4658      	mov	r0, fp
 8005dfc:	f000 fbaa 	bl	8006554 <_Bfree>
 8005e00:	e7d0      	b.n	8005da4 <_dtoa_r+0x65c>
 8005e02:	9704      	str	r7, [sp, #16]
 8005e04:	4633      	mov	r3, r6
 8005e06:	461e      	mov	r6, r3
 8005e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e0c:	2a39      	cmp	r2, #57	@ 0x39
 8005e0e:	d107      	bne.n	8005e20 <_dtoa_r+0x6d8>
 8005e10:	459a      	cmp	sl, r3
 8005e12:	d1f8      	bne.n	8005e06 <_dtoa_r+0x6be>
 8005e14:	9a04      	ldr	r2, [sp, #16]
 8005e16:	3201      	adds	r2, #1
 8005e18:	9204      	str	r2, [sp, #16]
 8005e1a:	2230      	movs	r2, #48	@ 0x30
 8005e1c:	f88a 2000 	strb.w	r2, [sl]
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	3201      	adds	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e7bd      	b.n	8005da4 <_dtoa_r+0x65c>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4b09      	ldr	r3, [pc, #36]	@ (8005e50 <_dtoa_r+0x708>)
 8005e2c:	f7fa fb54 	bl	80004d8 <__aeabi_dmul>
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	4604      	mov	r4, r0
 8005e36:	460d      	mov	r5, r1
 8005e38:	f7fa fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f43f aebc 	beq.w	8005bba <_dtoa_r+0x472>
 8005e42:	e6f1      	b.n	8005c28 <_dtoa_r+0x4e0>
 8005e44:	08007928 	.word	0x08007928
 8005e48:	3fe00000 	.word	0x3fe00000
 8005e4c:	3ff00000 	.word	0x3ff00000
 8005e50:	40240000 	.word	0x40240000
 8005e54:	40140000 	.word	0x40140000
 8005e58:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	f000 80db 	beq.w	8006016 <_dtoa_r+0x8ce>
 8005e60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e62:	2a01      	cmp	r2, #1
 8005e64:	f300 80bf 	bgt.w	8005fe6 <_dtoa_r+0x89e>
 8005e68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e6a:	2a00      	cmp	r2, #0
 8005e6c:	f000 80b7 	beq.w	8005fde <_dtoa_r+0x896>
 8005e70:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e74:	4646      	mov	r6, r8
 8005e76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	441a      	add	r2, r3
 8005e7e:	4658      	mov	r0, fp
 8005e80:	4498      	add	r8, r3
 8005e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e84:	f000 fc1a 	bl	80066bc <__i2b>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	b15e      	cbz	r6, 8005ea4 <_dtoa_r+0x75c>
 8005e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dd08      	ble.n	8005ea4 <_dtoa_r+0x75c>
 8005e92:	42b3      	cmp	r3, r6
 8005e94:	bfa8      	it	ge
 8005e96:	4633      	movge	r3, r6
 8005e98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e9a:	eba8 0803 	sub.w	r8, r8, r3
 8005e9e:	1af6      	subs	r6, r6, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ea6:	b1f3      	cbz	r3, 8005ee6 <_dtoa_r+0x79e>
 8005ea8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80b7 	beq.w	800601e <_dtoa_r+0x8d6>
 8005eb0:	b18c      	cbz	r4, 8005ed6 <_dtoa_r+0x78e>
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	4658      	mov	r0, fp
 8005eb8:	f000 fcbe 	bl	8006838 <__pow5mult>
 8005ebc:	464a      	mov	r2, r9
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	4658      	mov	r0, fp
 8005ec4:	f000 fc10 	bl	80066e8 <__multiply>
 8005ec8:	4649      	mov	r1, r9
 8005eca:	9004      	str	r0, [sp, #16]
 8005ecc:	4658      	mov	r0, fp
 8005ece:	f000 fb41 	bl	8006554 <_Bfree>
 8005ed2:	9b04      	ldr	r3, [sp, #16]
 8005ed4:	4699      	mov	r9, r3
 8005ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ed8:	1b1a      	subs	r2, r3, r4
 8005eda:	d004      	beq.n	8005ee6 <_dtoa_r+0x79e>
 8005edc:	4649      	mov	r1, r9
 8005ede:	4658      	mov	r0, fp
 8005ee0:	f000 fcaa 	bl	8006838 <__pow5mult>
 8005ee4:	4681      	mov	r9, r0
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	4658      	mov	r0, fp
 8005eea:	f000 fbe7 	bl	80066bc <__i2b>
 8005eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 81c9 	beq.w	800628a <_dtoa_r+0xb42>
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4601      	mov	r1, r0
 8005efc:	4658      	mov	r0, fp
 8005efe:	f000 fc9b 	bl	8006838 <__pow5mult>
 8005f02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f04:	4604      	mov	r4, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	f300 808f 	bgt.w	800602a <_dtoa_r+0x8e2>
 8005f0c:	9b02      	ldr	r3, [sp, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 8087 	bne.w	8006022 <_dtoa_r+0x8da>
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 8083 	bne.w	8006026 <_dtoa_r+0x8de>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f26:	0d1b      	lsrs	r3, r3, #20
 8005f28:	051b      	lsls	r3, r3, #20
 8005f2a:	b12b      	cbz	r3, 8005f38 <_dtoa_r+0x7f0>
 8005f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f2e:	f108 0801 	add.w	r8, r8, #1
 8005f32:	3301      	adds	r3, #1
 8005f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f36:	2301      	movs	r3, #1
 8005f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 81aa 	beq.w	8006296 <_dtoa_r+0xb4e>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f48:	6918      	ldr	r0, [r3, #16]
 8005f4a:	f000 fb6b 	bl	8006624 <__hi0bits>
 8005f4e:	f1c0 0020 	rsb	r0, r0, #32
 8005f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f54:	4418      	add	r0, r3
 8005f56:	f010 001f 	ands.w	r0, r0, #31
 8005f5a:	d071      	beq.n	8006040 <_dtoa_r+0x8f8>
 8005f5c:	f1c0 0320 	rsb	r3, r0, #32
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	dd65      	ble.n	8006030 <_dtoa_r+0x8e8>
 8005f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f66:	f1c0 001c 	rsb	r0, r0, #28
 8005f6a:	4403      	add	r3, r0
 8005f6c:	4480      	add	r8, r0
 8005f6e:	4406      	add	r6, r0
 8005f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f72:	f1b8 0f00 	cmp.w	r8, #0
 8005f76:	dd05      	ble.n	8005f84 <_dtoa_r+0x83c>
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	4658      	mov	r0, fp
 8005f7e:	f000 fcb5 	bl	80068ec <__lshift>
 8005f82:	4681      	mov	r9, r0
 8005f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd05      	ble.n	8005f96 <_dtoa_r+0x84e>
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4658      	mov	r0, fp
 8005f90:	f000 fcac 	bl	80068ec <__lshift>
 8005f94:	4604      	mov	r4, r0
 8005f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d053      	beq.n	8006044 <_dtoa_r+0x8fc>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4648      	mov	r0, r9
 8005fa0:	f000 fd10 	bl	80069c4 <__mcmp>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	da4d      	bge.n	8006044 <_dtoa_r+0x8fc>
 8005fa8:	1e7b      	subs	r3, r7, #1
 8005faa:	4649      	mov	r1, r9
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	220a      	movs	r2, #10
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4658      	mov	r0, fp
 8005fb4:	f000 faf0 	bl	8006598 <__multadd>
 8005fb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fba:	4681      	mov	r9, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 816c 	beq.w	800629a <_dtoa_r+0xb52>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	220a      	movs	r2, #10
 8005fc8:	4658      	mov	r0, fp
 8005fca:	f000 fae5 	bl	8006598 <__multadd>
 8005fce:	9b08      	ldr	r3, [sp, #32]
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	dc61      	bgt.n	800609a <_dtoa_r+0x952>
 8005fd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	dc3b      	bgt.n	8006054 <_dtoa_r+0x90c>
 8005fdc:	e05d      	b.n	800609a <_dtoa_r+0x952>
 8005fde:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fe0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005fe4:	e746      	b.n	8005e74 <_dtoa_r+0x72c>
 8005fe6:	9b07      	ldr	r3, [sp, #28]
 8005fe8:	1e5c      	subs	r4, r3, #1
 8005fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	bfbf      	itttt	lt
 8005ff0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ff2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005ff4:	1ae3      	sublt	r3, r4, r3
 8005ff6:	18d2      	addlt	r2, r2, r3
 8005ff8:	bfa8      	it	ge
 8005ffa:	1b1c      	subge	r4, r3, r4
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	bfbe      	ittt	lt
 8006000:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006002:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006004:	2400      	movlt	r4, #0
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfb5      	itete	lt
 800600a:	eba8 0603 	sublt.w	r6, r8, r3
 800600e:	4646      	movge	r6, r8
 8006010:	2300      	movlt	r3, #0
 8006012:	9b07      	ldrge	r3, [sp, #28]
 8006014:	e730      	b.n	8005e78 <_dtoa_r+0x730>
 8006016:	4646      	mov	r6, r8
 8006018:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800601a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800601c:	e735      	b.n	8005e8a <_dtoa_r+0x742>
 800601e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006020:	e75c      	b.n	8005edc <_dtoa_r+0x794>
 8006022:	2300      	movs	r3, #0
 8006024:	e788      	b.n	8005f38 <_dtoa_r+0x7f0>
 8006026:	9b02      	ldr	r3, [sp, #8]
 8006028:	e786      	b.n	8005f38 <_dtoa_r+0x7f0>
 800602a:	2300      	movs	r3, #0
 800602c:	930a      	str	r3, [sp, #40]	@ 0x28
 800602e:	e788      	b.n	8005f42 <_dtoa_r+0x7fa>
 8006030:	d09f      	beq.n	8005f72 <_dtoa_r+0x82a>
 8006032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006034:	331c      	adds	r3, #28
 8006036:	441a      	add	r2, r3
 8006038:	4498      	add	r8, r3
 800603a:	441e      	add	r6, r3
 800603c:	9209      	str	r2, [sp, #36]	@ 0x24
 800603e:	e798      	b.n	8005f72 <_dtoa_r+0x82a>
 8006040:	4603      	mov	r3, r0
 8006042:	e7f6      	b.n	8006032 <_dtoa_r+0x8ea>
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	9704      	str	r7, [sp, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc20      	bgt.n	800608e <_dtoa_r+0x946>
 800604c:	9308      	str	r3, [sp, #32]
 800604e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006050:	2b02      	cmp	r3, #2
 8006052:	dd1e      	ble.n	8006092 <_dtoa_r+0x94a>
 8006054:	9b08      	ldr	r3, [sp, #32]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f47f aebc 	bne.w	8005dd4 <_dtoa_r+0x68c>
 800605c:	4621      	mov	r1, r4
 800605e:	2205      	movs	r2, #5
 8006060:	4658      	mov	r0, fp
 8006062:	f000 fa99 	bl	8006598 <__multadd>
 8006066:	4601      	mov	r1, r0
 8006068:	4604      	mov	r4, r0
 800606a:	4648      	mov	r0, r9
 800606c:	f000 fcaa 	bl	80069c4 <__mcmp>
 8006070:	2800      	cmp	r0, #0
 8006072:	f77f aeaf 	ble.w	8005dd4 <_dtoa_r+0x68c>
 8006076:	2331      	movs	r3, #49	@ 0x31
 8006078:	4656      	mov	r6, sl
 800607a:	f806 3b01 	strb.w	r3, [r6], #1
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	3301      	adds	r3, #1
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	e6aa      	b.n	8005ddc <_dtoa_r+0x694>
 8006086:	9c07      	ldr	r4, [sp, #28]
 8006088:	9704      	str	r7, [sp, #16]
 800608a:	4625      	mov	r5, r4
 800608c:	e7f3      	b.n	8006076 <_dtoa_r+0x92e>
 800608e:	9b07      	ldr	r3, [sp, #28]
 8006090:	9308      	str	r3, [sp, #32]
 8006092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8104 	beq.w	80062a2 <_dtoa_r+0xb5a>
 800609a:	2e00      	cmp	r6, #0
 800609c:	dd05      	ble.n	80060aa <_dtoa_r+0x962>
 800609e:	4629      	mov	r1, r5
 80060a0:	4632      	mov	r2, r6
 80060a2:	4658      	mov	r0, fp
 80060a4:	f000 fc22 	bl	80068ec <__lshift>
 80060a8:	4605      	mov	r5, r0
 80060aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d05a      	beq.n	8006166 <_dtoa_r+0xa1e>
 80060b0:	4658      	mov	r0, fp
 80060b2:	6869      	ldr	r1, [r5, #4]
 80060b4:	f000 fa0e 	bl	80064d4 <_Balloc>
 80060b8:	4606      	mov	r6, r0
 80060ba:	b928      	cbnz	r0, 80060c8 <_dtoa_r+0x980>
 80060bc:	4602      	mov	r2, r0
 80060be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060c2:	4b83      	ldr	r3, [pc, #524]	@ (80062d0 <_dtoa_r+0xb88>)
 80060c4:	f7ff bb54 	b.w	8005770 <_dtoa_r+0x28>
 80060c8:	692a      	ldr	r2, [r5, #16]
 80060ca:	f105 010c 	add.w	r1, r5, #12
 80060ce:	3202      	adds	r2, #2
 80060d0:	0092      	lsls	r2, r2, #2
 80060d2:	300c      	adds	r0, #12
 80060d4:	f7ff fa9f 	bl	8005616 <memcpy>
 80060d8:	2201      	movs	r2, #1
 80060da:	4631      	mov	r1, r6
 80060dc:	4658      	mov	r0, fp
 80060de:	f000 fc05 	bl	80068ec <__lshift>
 80060e2:	462f      	mov	r7, r5
 80060e4:	4605      	mov	r5, r0
 80060e6:	f10a 0301 	add.w	r3, sl, #1
 80060ea:	9307      	str	r3, [sp, #28]
 80060ec:	9b08      	ldr	r3, [sp, #32]
 80060ee:	4453      	add	r3, sl
 80060f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060f2:	9b02      	ldr	r3, [sp, #8]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060fa:	9b07      	ldr	r3, [sp, #28]
 80060fc:	4621      	mov	r1, r4
 80060fe:	3b01      	subs	r3, #1
 8006100:	4648      	mov	r0, r9
 8006102:	9302      	str	r3, [sp, #8]
 8006104:	f7ff fa95 	bl	8005632 <quorem>
 8006108:	4639      	mov	r1, r7
 800610a:	9008      	str	r0, [sp, #32]
 800610c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006110:	4648      	mov	r0, r9
 8006112:	f000 fc57 	bl	80069c4 <__mcmp>
 8006116:	462a      	mov	r2, r5
 8006118:	9009      	str	r0, [sp, #36]	@ 0x24
 800611a:	4621      	mov	r1, r4
 800611c:	4658      	mov	r0, fp
 800611e:	f000 fc6d 	bl	80069fc <__mdiff>
 8006122:	68c2      	ldr	r2, [r0, #12]
 8006124:	4606      	mov	r6, r0
 8006126:	bb02      	cbnz	r2, 800616a <_dtoa_r+0xa22>
 8006128:	4601      	mov	r1, r0
 800612a:	4648      	mov	r0, r9
 800612c:	f000 fc4a 	bl	80069c4 <__mcmp>
 8006130:	4602      	mov	r2, r0
 8006132:	4631      	mov	r1, r6
 8006134:	4658      	mov	r0, fp
 8006136:	920c      	str	r2, [sp, #48]	@ 0x30
 8006138:	f000 fa0c 	bl	8006554 <_Bfree>
 800613c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800613e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006140:	9e07      	ldr	r6, [sp, #28]
 8006142:	ea43 0102 	orr.w	r1, r3, r2
 8006146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006148:	4319      	orrs	r1, r3
 800614a:	d110      	bne.n	800616e <_dtoa_r+0xa26>
 800614c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006150:	d029      	beq.n	80061a6 <_dtoa_r+0xa5e>
 8006152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006154:	2b00      	cmp	r3, #0
 8006156:	dd02      	ble.n	800615e <_dtoa_r+0xa16>
 8006158:	9b08      	ldr	r3, [sp, #32]
 800615a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800615e:	9b02      	ldr	r3, [sp, #8]
 8006160:	f883 8000 	strb.w	r8, [r3]
 8006164:	e63b      	b.n	8005dde <_dtoa_r+0x696>
 8006166:	4628      	mov	r0, r5
 8006168:	e7bb      	b.n	80060e2 <_dtoa_r+0x99a>
 800616a:	2201      	movs	r2, #1
 800616c:	e7e1      	b.n	8006132 <_dtoa_r+0x9ea>
 800616e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	db04      	blt.n	800617e <_dtoa_r+0xa36>
 8006174:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006176:	430b      	orrs	r3, r1
 8006178:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800617a:	430b      	orrs	r3, r1
 800617c:	d120      	bne.n	80061c0 <_dtoa_r+0xa78>
 800617e:	2a00      	cmp	r2, #0
 8006180:	dded      	ble.n	800615e <_dtoa_r+0xa16>
 8006182:	4649      	mov	r1, r9
 8006184:	2201      	movs	r2, #1
 8006186:	4658      	mov	r0, fp
 8006188:	f000 fbb0 	bl	80068ec <__lshift>
 800618c:	4621      	mov	r1, r4
 800618e:	4681      	mov	r9, r0
 8006190:	f000 fc18 	bl	80069c4 <__mcmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	dc03      	bgt.n	80061a0 <_dtoa_r+0xa58>
 8006198:	d1e1      	bne.n	800615e <_dtoa_r+0xa16>
 800619a:	f018 0f01 	tst.w	r8, #1
 800619e:	d0de      	beq.n	800615e <_dtoa_r+0xa16>
 80061a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061a4:	d1d8      	bne.n	8006158 <_dtoa_r+0xa10>
 80061a6:	2339      	movs	r3, #57	@ 0x39
 80061a8:	9a02      	ldr	r2, [sp, #8]
 80061aa:	7013      	strb	r3, [r2, #0]
 80061ac:	4633      	mov	r3, r6
 80061ae:	461e      	mov	r6, r3
 80061b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	2a39      	cmp	r2, #57	@ 0x39
 80061b8:	d052      	beq.n	8006260 <_dtoa_r+0xb18>
 80061ba:	3201      	adds	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e60e      	b.n	8005dde <_dtoa_r+0x696>
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	dd07      	ble.n	80061d4 <_dtoa_r+0xa8c>
 80061c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061c8:	d0ed      	beq.n	80061a6 <_dtoa_r+0xa5e>
 80061ca:	9a02      	ldr	r2, [sp, #8]
 80061cc:	f108 0301 	add.w	r3, r8, #1
 80061d0:	7013      	strb	r3, [r2, #0]
 80061d2:	e604      	b.n	8005dde <_dtoa_r+0x696>
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	9a07      	ldr	r2, [sp, #28]
 80061d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80061dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061de:	4293      	cmp	r3, r2
 80061e0:	d028      	beq.n	8006234 <_dtoa_r+0xaec>
 80061e2:	4649      	mov	r1, r9
 80061e4:	2300      	movs	r3, #0
 80061e6:	220a      	movs	r2, #10
 80061e8:	4658      	mov	r0, fp
 80061ea:	f000 f9d5 	bl	8006598 <__multadd>
 80061ee:	42af      	cmp	r7, r5
 80061f0:	4681      	mov	r9, r0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	f04f 020a 	mov.w	r2, #10
 80061fa:	4639      	mov	r1, r7
 80061fc:	4658      	mov	r0, fp
 80061fe:	d107      	bne.n	8006210 <_dtoa_r+0xac8>
 8006200:	f000 f9ca 	bl	8006598 <__multadd>
 8006204:	4607      	mov	r7, r0
 8006206:	4605      	mov	r5, r0
 8006208:	9b07      	ldr	r3, [sp, #28]
 800620a:	3301      	adds	r3, #1
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	e774      	b.n	80060fa <_dtoa_r+0x9b2>
 8006210:	f000 f9c2 	bl	8006598 <__multadd>
 8006214:	4629      	mov	r1, r5
 8006216:	4607      	mov	r7, r0
 8006218:	2300      	movs	r3, #0
 800621a:	220a      	movs	r2, #10
 800621c:	4658      	mov	r0, fp
 800621e:	f000 f9bb 	bl	8006598 <__multadd>
 8006222:	4605      	mov	r5, r0
 8006224:	e7f0      	b.n	8006208 <_dtoa_r+0xac0>
 8006226:	9b08      	ldr	r3, [sp, #32]
 8006228:	2700      	movs	r7, #0
 800622a:	2b00      	cmp	r3, #0
 800622c:	bfcc      	ite	gt
 800622e:	461e      	movgt	r6, r3
 8006230:	2601      	movle	r6, #1
 8006232:	4456      	add	r6, sl
 8006234:	4649      	mov	r1, r9
 8006236:	2201      	movs	r2, #1
 8006238:	4658      	mov	r0, fp
 800623a:	f000 fb57 	bl	80068ec <__lshift>
 800623e:	4621      	mov	r1, r4
 8006240:	4681      	mov	r9, r0
 8006242:	f000 fbbf 	bl	80069c4 <__mcmp>
 8006246:	2800      	cmp	r0, #0
 8006248:	dcb0      	bgt.n	80061ac <_dtoa_r+0xa64>
 800624a:	d102      	bne.n	8006252 <_dtoa_r+0xb0a>
 800624c:	f018 0f01 	tst.w	r8, #1
 8006250:	d1ac      	bne.n	80061ac <_dtoa_r+0xa64>
 8006252:	4633      	mov	r3, r6
 8006254:	461e      	mov	r6, r3
 8006256:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800625a:	2a30      	cmp	r2, #48	@ 0x30
 800625c:	d0fa      	beq.n	8006254 <_dtoa_r+0xb0c>
 800625e:	e5be      	b.n	8005dde <_dtoa_r+0x696>
 8006260:	459a      	cmp	sl, r3
 8006262:	d1a4      	bne.n	80061ae <_dtoa_r+0xa66>
 8006264:	9b04      	ldr	r3, [sp, #16]
 8006266:	3301      	adds	r3, #1
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	2331      	movs	r3, #49	@ 0x31
 800626c:	f88a 3000 	strb.w	r3, [sl]
 8006270:	e5b5      	b.n	8005dde <_dtoa_r+0x696>
 8006272:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006274:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80062d4 <_dtoa_r+0xb8c>
 8006278:	b11b      	cbz	r3, 8006282 <_dtoa_r+0xb3a>
 800627a:	f10a 0308 	add.w	r3, sl, #8
 800627e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	4650      	mov	r0, sl
 8006284:	b017      	add	sp, #92	@ 0x5c
 8006286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800628c:	2b01      	cmp	r3, #1
 800628e:	f77f ae3d 	ble.w	8005f0c <_dtoa_r+0x7c4>
 8006292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006294:	930a      	str	r3, [sp, #40]	@ 0x28
 8006296:	2001      	movs	r0, #1
 8006298:	e65b      	b.n	8005f52 <_dtoa_r+0x80a>
 800629a:	9b08      	ldr	r3, [sp, #32]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f77f aed6 	ble.w	800604e <_dtoa_r+0x906>
 80062a2:	4656      	mov	r6, sl
 80062a4:	4621      	mov	r1, r4
 80062a6:	4648      	mov	r0, r9
 80062a8:	f7ff f9c3 	bl	8005632 <quorem>
 80062ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062b0:	9b08      	ldr	r3, [sp, #32]
 80062b2:	f806 8b01 	strb.w	r8, [r6], #1
 80062b6:	eba6 020a 	sub.w	r2, r6, sl
 80062ba:	4293      	cmp	r3, r2
 80062bc:	ddb3      	ble.n	8006226 <_dtoa_r+0xade>
 80062be:	4649      	mov	r1, r9
 80062c0:	2300      	movs	r3, #0
 80062c2:	220a      	movs	r2, #10
 80062c4:	4658      	mov	r0, fp
 80062c6:	f000 f967 	bl	8006598 <__multadd>
 80062ca:	4681      	mov	r9, r0
 80062cc:	e7ea      	b.n	80062a4 <_dtoa_r+0xb5c>
 80062ce:	bf00      	nop
 80062d0:	08007886 	.word	0x08007886
 80062d4:	0800780a 	.word	0x0800780a

080062d8 <_free_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4605      	mov	r5, r0
 80062dc:	2900      	cmp	r1, #0
 80062de:	d040      	beq.n	8006362 <_free_r+0x8a>
 80062e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e4:	1f0c      	subs	r4, r1, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bfb8      	it	lt
 80062ea:	18e4      	addlt	r4, r4, r3
 80062ec:	f000 f8e6 	bl	80064bc <__malloc_lock>
 80062f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006364 <_free_r+0x8c>)
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	b933      	cbnz	r3, 8006304 <_free_r+0x2c>
 80062f6:	6063      	str	r3, [r4, #4]
 80062f8:	6014      	str	r4, [r2, #0]
 80062fa:	4628      	mov	r0, r5
 80062fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006300:	f000 b8e2 	b.w	80064c8 <__malloc_unlock>
 8006304:	42a3      	cmp	r3, r4
 8006306:	d908      	bls.n	800631a <_free_r+0x42>
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	1821      	adds	r1, r4, r0
 800630c:	428b      	cmp	r3, r1
 800630e:	bf01      	itttt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	1809      	addeq	r1, r1, r0
 8006316:	6021      	streq	r1, [r4, #0]
 8006318:	e7ed      	b.n	80062f6 <_free_r+0x1e>
 800631a:	461a      	mov	r2, r3
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	b10b      	cbz	r3, 8006324 <_free_r+0x4c>
 8006320:	42a3      	cmp	r3, r4
 8006322:	d9fa      	bls.n	800631a <_free_r+0x42>
 8006324:	6811      	ldr	r1, [r2, #0]
 8006326:	1850      	adds	r0, r2, r1
 8006328:	42a0      	cmp	r0, r4
 800632a:	d10b      	bne.n	8006344 <_free_r+0x6c>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	4401      	add	r1, r0
 8006330:	1850      	adds	r0, r2, r1
 8006332:	4283      	cmp	r3, r0
 8006334:	6011      	str	r1, [r2, #0]
 8006336:	d1e0      	bne.n	80062fa <_free_r+0x22>
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4408      	add	r0, r1
 800633e:	6010      	str	r0, [r2, #0]
 8006340:	6053      	str	r3, [r2, #4]
 8006342:	e7da      	b.n	80062fa <_free_r+0x22>
 8006344:	d902      	bls.n	800634c <_free_r+0x74>
 8006346:	230c      	movs	r3, #12
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	e7d6      	b.n	80062fa <_free_r+0x22>
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	1821      	adds	r1, r4, r0
 8006350:	428b      	cmp	r3, r1
 8006352:	bf01      	itttt	eq
 8006354:	6819      	ldreq	r1, [r3, #0]
 8006356:	685b      	ldreq	r3, [r3, #4]
 8006358:	1809      	addeq	r1, r1, r0
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	6063      	str	r3, [r4, #4]
 800635e:	6054      	str	r4, [r2, #4]
 8006360:	e7cb      	b.n	80062fa <_free_r+0x22>
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	20001424 	.word	0x20001424

08006368 <malloc>:
 8006368:	4b02      	ldr	r3, [pc, #8]	@ (8006374 <malloc+0xc>)
 800636a:	4601      	mov	r1, r0
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f000 b825 	b.w	80063bc <_malloc_r>
 8006372:	bf00      	nop
 8006374:	2000005c 	.word	0x2000005c

08006378 <sbrk_aligned>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4e0f      	ldr	r6, [pc, #60]	@ (80063b8 <sbrk_aligned+0x40>)
 800637c:	460c      	mov	r4, r1
 800637e:	6831      	ldr	r1, [r6, #0]
 8006380:	4605      	mov	r5, r0
 8006382:	b911      	cbnz	r1, 800638a <sbrk_aligned+0x12>
 8006384:	f000 fe40 	bl	8007008 <_sbrk_r>
 8006388:	6030      	str	r0, [r6, #0]
 800638a:	4621      	mov	r1, r4
 800638c:	4628      	mov	r0, r5
 800638e:	f000 fe3b 	bl	8007008 <_sbrk_r>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d103      	bne.n	800639e <sbrk_aligned+0x26>
 8006396:	f04f 34ff 	mov.w	r4, #4294967295
 800639a:	4620      	mov	r0, r4
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	1cc4      	adds	r4, r0, #3
 80063a0:	f024 0403 	bic.w	r4, r4, #3
 80063a4:	42a0      	cmp	r0, r4
 80063a6:	d0f8      	beq.n	800639a <sbrk_aligned+0x22>
 80063a8:	1a21      	subs	r1, r4, r0
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 fe2c 	bl	8007008 <_sbrk_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d1f2      	bne.n	800639a <sbrk_aligned+0x22>
 80063b4:	e7ef      	b.n	8006396 <sbrk_aligned+0x1e>
 80063b6:	bf00      	nop
 80063b8:	20001420 	.word	0x20001420

080063bc <_malloc_r>:
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	1ccd      	adds	r5, r1, #3
 80063c2:	f025 0503 	bic.w	r5, r5, #3
 80063c6:	3508      	adds	r5, #8
 80063c8:	2d0c      	cmp	r5, #12
 80063ca:	bf38      	it	cc
 80063cc:	250c      	movcc	r5, #12
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	4606      	mov	r6, r0
 80063d2:	db01      	blt.n	80063d8 <_malloc_r+0x1c>
 80063d4:	42a9      	cmp	r1, r5
 80063d6:	d904      	bls.n	80063e2 <_malloc_r+0x26>
 80063d8:	230c      	movs	r3, #12
 80063da:	6033      	str	r3, [r6, #0]
 80063dc:	2000      	movs	r0, #0
 80063de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064b8 <_malloc_r+0xfc>
 80063e6:	f000 f869 	bl	80064bc <__malloc_lock>
 80063ea:	f8d8 3000 	ldr.w	r3, [r8]
 80063ee:	461c      	mov	r4, r3
 80063f0:	bb44      	cbnz	r4, 8006444 <_malloc_r+0x88>
 80063f2:	4629      	mov	r1, r5
 80063f4:	4630      	mov	r0, r6
 80063f6:	f7ff ffbf 	bl	8006378 <sbrk_aligned>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	4604      	mov	r4, r0
 80063fe:	d158      	bne.n	80064b2 <_malloc_r+0xf6>
 8006400:	f8d8 4000 	ldr.w	r4, [r8]
 8006404:	4627      	mov	r7, r4
 8006406:	2f00      	cmp	r7, #0
 8006408:	d143      	bne.n	8006492 <_malloc_r+0xd6>
 800640a:	2c00      	cmp	r4, #0
 800640c:	d04b      	beq.n	80064a6 <_malloc_r+0xea>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	4639      	mov	r1, r7
 8006412:	4630      	mov	r0, r6
 8006414:	eb04 0903 	add.w	r9, r4, r3
 8006418:	f000 fdf6 	bl	8007008 <_sbrk_r>
 800641c:	4581      	cmp	r9, r0
 800641e:	d142      	bne.n	80064a6 <_malloc_r+0xea>
 8006420:	6821      	ldr	r1, [r4, #0]
 8006422:	4630      	mov	r0, r6
 8006424:	1a6d      	subs	r5, r5, r1
 8006426:	4629      	mov	r1, r5
 8006428:	f7ff ffa6 	bl	8006378 <sbrk_aligned>
 800642c:	3001      	adds	r0, #1
 800642e:	d03a      	beq.n	80064a6 <_malloc_r+0xea>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	442b      	add	r3, r5
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	f8d8 3000 	ldr.w	r3, [r8]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	bb62      	cbnz	r2, 8006498 <_malloc_r+0xdc>
 800643e:	f8c8 7000 	str.w	r7, [r8]
 8006442:	e00f      	b.n	8006464 <_malloc_r+0xa8>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	1b52      	subs	r2, r2, r5
 8006448:	d420      	bmi.n	800648c <_malloc_r+0xd0>
 800644a:	2a0b      	cmp	r2, #11
 800644c:	d917      	bls.n	800647e <_malloc_r+0xc2>
 800644e:	1961      	adds	r1, r4, r5
 8006450:	42a3      	cmp	r3, r4
 8006452:	6025      	str	r5, [r4, #0]
 8006454:	bf18      	it	ne
 8006456:	6059      	strne	r1, [r3, #4]
 8006458:	6863      	ldr	r3, [r4, #4]
 800645a:	bf08      	it	eq
 800645c:	f8c8 1000 	streq.w	r1, [r8]
 8006460:	5162      	str	r2, [r4, r5]
 8006462:	604b      	str	r3, [r1, #4]
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f82f 	bl	80064c8 <__malloc_unlock>
 800646a:	f104 000b 	add.w	r0, r4, #11
 800646e:	1d23      	adds	r3, r4, #4
 8006470:	f020 0007 	bic.w	r0, r0, #7
 8006474:	1ac2      	subs	r2, r0, r3
 8006476:	bf1c      	itt	ne
 8006478:	1a1b      	subne	r3, r3, r0
 800647a:	50a3      	strne	r3, [r4, r2]
 800647c:	e7af      	b.n	80063de <_malloc_r+0x22>
 800647e:	6862      	ldr	r2, [r4, #4]
 8006480:	42a3      	cmp	r3, r4
 8006482:	bf0c      	ite	eq
 8006484:	f8c8 2000 	streq.w	r2, [r8]
 8006488:	605a      	strne	r2, [r3, #4]
 800648a:	e7eb      	b.n	8006464 <_malloc_r+0xa8>
 800648c:	4623      	mov	r3, r4
 800648e:	6864      	ldr	r4, [r4, #4]
 8006490:	e7ae      	b.n	80063f0 <_malloc_r+0x34>
 8006492:	463c      	mov	r4, r7
 8006494:	687f      	ldr	r7, [r7, #4]
 8006496:	e7b6      	b.n	8006406 <_malloc_r+0x4a>
 8006498:	461a      	mov	r2, r3
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	42a3      	cmp	r3, r4
 800649e:	d1fb      	bne.n	8006498 <_malloc_r+0xdc>
 80064a0:	2300      	movs	r3, #0
 80064a2:	6053      	str	r3, [r2, #4]
 80064a4:	e7de      	b.n	8006464 <_malloc_r+0xa8>
 80064a6:	230c      	movs	r3, #12
 80064a8:	4630      	mov	r0, r6
 80064aa:	6033      	str	r3, [r6, #0]
 80064ac:	f000 f80c 	bl	80064c8 <__malloc_unlock>
 80064b0:	e794      	b.n	80063dc <_malloc_r+0x20>
 80064b2:	6005      	str	r5, [r0, #0]
 80064b4:	e7d6      	b.n	8006464 <_malloc_r+0xa8>
 80064b6:	bf00      	nop
 80064b8:	20001424 	.word	0x20001424

080064bc <__malloc_lock>:
 80064bc:	4801      	ldr	r0, [pc, #4]	@ (80064c4 <__malloc_lock+0x8>)
 80064be:	f7ff b89a 	b.w	80055f6 <__retarget_lock_acquire_recursive>
 80064c2:	bf00      	nop
 80064c4:	2000141c 	.word	0x2000141c

080064c8 <__malloc_unlock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	@ (80064d0 <__malloc_unlock+0x8>)
 80064ca:	f7ff b895 	b.w	80055f8 <__retarget_lock_release_recursive>
 80064ce:	bf00      	nop
 80064d0:	2000141c 	.word	0x2000141c

080064d4 <_Balloc>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	69c6      	ldr	r6, [r0, #28]
 80064d8:	4604      	mov	r4, r0
 80064da:	460d      	mov	r5, r1
 80064dc:	b976      	cbnz	r6, 80064fc <_Balloc+0x28>
 80064de:	2010      	movs	r0, #16
 80064e0:	f7ff ff42 	bl	8006368 <malloc>
 80064e4:	4602      	mov	r2, r0
 80064e6:	61e0      	str	r0, [r4, #28]
 80064e8:	b920      	cbnz	r0, 80064f4 <_Balloc+0x20>
 80064ea:	216b      	movs	r1, #107	@ 0x6b
 80064ec:	4b17      	ldr	r3, [pc, #92]	@ (800654c <_Balloc+0x78>)
 80064ee:	4818      	ldr	r0, [pc, #96]	@ (8006550 <_Balloc+0x7c>)
 80064f0:	f000 fd9a 	bl	8007028 <__assert_func>
 80064f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f8:	6006      	str	r6, [r0, #0]
 80064fa:	60c6      	str	r6, [r0, #12]
 80064fc:	69e6      	ldr	r6, [r4, #28]
 80064fe:	68f3      	ldr	r3, [r6, #12]
 8006500:	b183      	cbz	r3, 8006524 <_Balloc+0x50>
 8006502:	69e3      	ldr	r3, [r4, #28]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800650a:	b9b8      	cbnz	r0, 800653c <_Balloc+0x68>
 800650c:	2101      	movs	r1, #1
 800650e:	fa01 f605 	lsl.w	r6, r1, r5
 8006512:	1d72      	adds	r2, r6, #5
 8006514:	4620      	mov	r0, r4
 8006516:	0092      	lsls	r2, r2, #2
 8006518:	f000 fda4 	bl	8007064 <_calloc_r>
 800651c:	b160      	cbz	r0, 8006538 <_Balloc+0x64>
 800651e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006522:	e00e      	b.n	8006542 <_Balloc+0x6e>
 8006524:	2221      	movs	r2, #33	@ 0x21
 8006526:	2104      	movs	r1, #4
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fd9b 	bl	8007064 <_calloc_r>
 800652e:	69e3      	ldr	r3, [r4, #28]
 8006530:	60f0      	str	r0, [r6, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e4      	bne.n	8006502 <_Balloc+0x2e>
 8006538:	2000      	movs	r0, #0
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	6802      	ldr	r2, [r0, #0]
 800653e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006542:	2300      	movs	r3, #0
 8006544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006548:	e7f7      	b.n	800653a <_Balloc+0x66>
 800654a:	bf00      	nop
 800654c:	08007817 	.word	0x08007817
 8006550:	08007897 	.word	0x08007897

08006554 <_Bfree>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	69c6      	ldr	r6, [r0, #28]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b976      	cbnz	r6, 800657c <_Bfree+0x28>
 800655e:	2010      	movs	r0, #16
 8006560:	f7ff ff02 	bl	8006368 <malloc>
 8006564:	4602      	mov	r2, r0
 8006566:	61e8      	str	r0, [r5, #28]
 8006568:	b920      	cbnz	r0, 8006574 <_Bfree+0x20>
 800656a:	218f      	movs	r1, #143	@ 0x8f
 800656c:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <_Bfree+0x3c>)
 800656e:	4809      	ldr	r0, [pc, #36]	@ (8006594 <_Bfree+0x40>)
 8006570:	f000 fd5a 	bl	8007028 <__assert_func>
 8006574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006578:	6006      	str	r6, [r0, #0]
 800657a:	60c6      	str	r6, [r0, #12]
 800657c:	b13c      	cbz	r4, 800658e <_Bfree+0x3a>
 800657e:	69eb      	ldr	r3, [r5, #28]
 8006580:	6862      	ldr	r2, [r4, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006588:	6021      	str	r1, [r4, #0]
 800658a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	08007817 	.word	0x08007817
 8006594:	08007897 	.word	0x08007897

08006598 <__multadd>:
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	4607      	mov	r7, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	461e      	mov	r6, r3
 80065a2:	2000      	movs	r0, #0
 80065a4:	690d      	ldr	r5, [r1, #16]
 80065a6:	f101 0c14 	add.w	ip, r1, #20
 80065aa:	f8dc 3000 	ldr.w	r3, [ip]
 80065ae:	3001      	adds	r0, #1
 80065b0:	b299      	uxth	r1, r3
 80065b2:	fb02 6101 	mla	r1, r2, r1, r6
 80065b6:	0c1e      	lsrs	r6, r3, #16
 80065b8:	0c0b      	lsrs	r3, r1, #16
 80065ba:	fb02 3306 	mla	r3, r2, r6, r3
 80065be:	b289      	uxth	r1, r1
 80065c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065c4:	4285      	cmp	r5, r0
 80065c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065ca:	f84c 1b04 	str.w	r1, [ip], #4
 80065ce:	dcec      	bgt.n	80065aa <__multadd+0x12>
 80065d0:	b30e      	cbz	r6, 8006616 <__multadd+0x7e>
 80065d2:	68a3      	ldr	r3, [r4, #8]
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dc19      	bgt.n	800660c <__multadd+0x74>
 80065d8:	6861      	ldr	r1, [r4, #4]
 80065da:	4638      	mov	r0, r7
 80065dc:	3101      	adds	r1, #1
 80065de:	f7ff ff79 	bl	80064d4 <_Balloc>
 80065e2:	4680      	mov	r8, r0
 80065e4:	b928      	cbnz	r0, 80065f2 <__multadd+0x5a>
 80065e6:	4602      	mov	r2, r0
 80065e8:	21ba      	movs	r1, #186	@ 0xba
 80065ea:	4b0c      	ldr	r3, [pc, #48]	@ (800661c <__multadd+0x84>)
 80065ec:	480c      	ldr	r0, [pc, #48]	@ (8006620 <__multadd+0x88>)
 80065ee:	f000 fd1b 	bl	8007028 <__assert_func>
 80065f2:	6922      	ldr	r2, [r4, #16]
 80065f4:	f104 010c 	add.w	r1, r4, #12
 80065f8:	3202      	adds	r2, #2
 80065fa:	0092      	lsls	r2, r2, #2
 80065fc:	300c      	adds	r0, #12
 80065fe:	f7ff f80a 	bl	8005616 <memcpy>
 8006602:	4621      	mov	r1, r4
 8006604:	4638      	mov	r0, r7
 8006606:	f7ff ffa5 	bl	8006554 <_Bfree>
 800660a:	4644      	mov	r4, r8
 800660c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006610:	3501      	adds	r5, #1
 8006612:	615e      	str	r6, [r3, #20]
 8006614:	6125      	str	r5, [r4, #16]
 8006616:	4620      	mov	r0, r4
 8006618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661c:	08007886 	.word	0x08007886
 8006620:	08007897 	.word	0x08007897

08006624 <__hi0bits>:
 8006624:	4603      	mov	r3, r0
 8006626:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800662a:	bf3a      	itte	cc
 800662c:	0403      	lslcc	r3, r0, #16
 800662e:	2010      	movcc	r0, #16
 8006630:	2000      	movcs	r0, #0
 8006632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006636:	bf3c      	itt	cc
 8006638:	021b      	lslcc	r3, r3, #8
 800663a:	3008      	addcc	r0, #8
 800663c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006640:	bf3c      	itt	cc
 8006642:	011b      	lslcc	r3, r3, #4
 8006644:	3004      	addcc	r0, #4
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664a:	bf3c      	itt	cc
 800664c:	009b      	lslcc	r3, r3, #2
 800664e:	3002      	addcc	r0, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	db05      	blt.n	8006660 <__hi0bits+0x3c>
 8006654:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006658:	f100 0001 	add.w	r0, r0, #1
 800665c:	bf08      	it	eq
 800665e:	2020      	moveq	r0, #32
 8006660:	4770      	bx	lr

08006662 <__lo0bits>:
 8006662:	6803      	ldr	r3, [r0, #0]
 8006664:	4602      	mov	r2, r0
 8006666:	f013 0007 	ands.w	r0, r3, #7
 800666a:	d00b      	beq.n	8006684 <__lo0bits+0x22>
 800666c:	07d9      	lsls	r1, r3, #31
 800666e:	d421      	bmi.n	80066b4 <__lo0bits+0x52>
 8006670:	0798      	lsls	r0, r3, #30
 8006672:	bf49      	itett	mi
 8006674:	085b      	lsrmi	r3, r3, #1
 8006676:	089b      	lsrpl	r3, r3, #2
 8006678:	2001      	movmi	r0, #1
 800667a:	6013      	strmi	r3, [r2, #0]
 800667c:	bf5c      	itt	pl
 800667e:	2002      	movpl	r0, #2
 8006680:	6013      	strpl	r3, [r2, #0]
 8006682:	4770      	bx	lr
 8006684:	b299      	uxth	r1, r3
 8006686:	b909      	cbnz	r1, 800668c <__lo0bits+0x2a>
 8006688:	2010      	movs	r0, #16
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	b2d9      	uxtb	r1, r3
 800668e:	b909      	cbnz	r1, 8006694 <__lo0bits+0x32>
 8006690:	3008      	adds	r0, #8
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	0719      	lsls	r1, r3, #28
 8006696:	bf04      	itt	eq
 8006698:	091b      	lsreq	r3, r3, #4
 800669a:	3004      	addeq	r0, #4
 800669c:	0799      	lsls	r1, r3, #30
 800669e:	bf04      	itt	eq
 80066a0:	089b      	lsreq	r3, r3, #2
 80066a2:	3002      	addeq	r0, #2
 80066a4:	07d9      	lsls	r1, r3, #31
 80066a6:	d403      	bmi.n	80066b0 <__lo0bits+0x4e>
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	f100 0001 	add.w	r0, r0, #1
 80066ae:	d003      	beq.n	80066b8 <__lo0bits+0x56>
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4770      	bx	lr
 80066b4:	2000      	movs	r0, #0
 80066b6:	4770      	bx	lr
 80066b8:	2020      	movs	r0, #32
 80066ba:	4770      	bx	lr

080066bc <__i2b>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	2101      	movs	r1, #1
 80066c2:	f7ff ff07 	bl	80064d4 <_Balloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	b928      	cbnz	r0, 80066d6 <__i2b+0x1a>
 80066ca:	f240 1145 	movw	r1, #325	@ 0x145
 80066ce:	4b04      	ldr	r3, [pc, #16]	@ (80066e0 <__i2b+0x24>)
 80066d0:	4804      	ldr	r0, [pc, #16]	@ (80066e4 <__i2b+0x28>)
 80066d2:	f000 fca9 	bl	8007028 <__assert_func>
 80066d6:	2301      	movs	r3, #1
 80066d8:	6144      	str	r4, [r0, #20]
 80066da:	6103      	str	r3, [r0, #16]
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	08007886 	.word	0x08007886
 80066e4:	08007897 	.word	0x08007897

080066e8 <__multiply>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4614      	mov	r4, r2
 80066ee:	690a      	ldr	r2, [r1, #16]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	460f      	mov	r7, r1
 80066f4:	429a      	cmp	r2, r3
 80066f6:	bfa2      	ittt	ge
 80066f8:	4623      	movge	r3, r4
 80066fa:	460c      	movge	r4, r1
 80066fc:	461f      	movge	r7, r3
 80066fe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006702:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006706:	68a3      	ldr	r3, [r4, #8]
 8006708:	6861      	ldr	r1, [r4, #4]
 800670a:	eb0a 0609 	add.w	r6, sl, r9
 800670e:	42b3      	cmp	r3, r6
 8006710:	b085      	sub	sp, #20
 8006712:	bfb8      	it	lt
 8006714:	3101      	addlt	r1, #1
 8006716:	f7ff fedd 	bl	80064d4 <_Balloc>
 800671a:	b930      	cbnz	r0, 800672a <__multiply+0x42>
 800671c:	4602      	mov	r2, r0
 800671e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006722:	4b43      	ldr	r3, [pc, #268]	@ (8006830 <__multiply+0x148>)
 8006724:	4843      	ldr	r0, [pc, #268]	@ (8006834 <__multiply+0x14c>)
 8006726:	f000 fc7f 	bl	8007028 <__assert_func>
 800672a:	f100 0514 	add.w	r5, r0, #20
 800672e:	462b      	mov	r3, r5
 8006730:	2200      	movs	r2, #0
 8006732:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006736:	4543      	cmp	r3, r8
 8006738:	d321      	bcc.n	800677e <__multiply+0x96>
 800673a:	f107 0114 	add.w	r1, r7, #20
 800673e:	f104 0214 	add.w	r2, r4, #20
 8006742:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006746:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800674a:	9302      	str	r3, [sp, #8]
 800674c:	1b13      	subs	r3, r2, r4
 800674e:	3b15      	subs	r3, #21
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	3304      	adds	r3, #4
 8006756:	f104 0715 	add.w	r7, r4, #21
 800675a:	42ba      	cmp	r2, r7
 800675c:	bf38      	it	cc
 800675e:	2304      	movcc	r3, #4
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	9b02      	ldr	r3, [sp, #8]
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	428b      	cmp	r3, r1
 8006768:	d80c      	bhi.n	8006784 <__multiply+0x9c>
 800676a:	2e00      	cmp	r6, #0
 800676c:	dd03      	ble.n	8006776 <__multiply+0x8e>
 800676e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006772:	2b00      	cmp	r3, #0
 8006774:	d05a      	beq.n	800682c <__multiply+0x144>
 8006776:	6106      	str	r6, [r0, #16]
 8006778:	b005      	add	sp, #20
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	f843 2b04 	str.w	r2, [r3], #4
 8006782:	e7d8      	b.n	8006736 <__multiply+0x4e>
 8006784:	f8b1 a000 	ldrh.w	sl, [r1]
 8006788:	f1ba 0f00 	cmp.w	sl, #0
 800678c:	d023      	beq.n	80067d6 <__multiply+0xee>
 800678e:	46a9      	mov	r9, r5
 8006790:	f04f 0c00 	mov.w	ip, #0
 8006794:	f104 0e14 	add.w	lr, r4, #20
 8006798:	f85e 7b04 	ldr.w	r7, [lr], #4
 800679c:	f8d9 3000 	ldr.w	r3, [r9]
 80067a0:	fa1f fb87 	uxth.w	fp, r7
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80067aa:	4463      	add	r3, ip
 80067ac:	f8d9 c000 	ldr.w	ip, [r9]
 80067b0:	0c3f      	lsrs	r7, r7, #16
 80067b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80067b6:	fb0a c707 	mla	r7, sl, r7, ip
 80067ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80067be:	b29b      	uxth	r3, r3
 80067c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067c4:	4572      	cmp	r2, lr
 80067c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067ca:	f849 3b04 	str.w	r3, [r9], #4
 80067ce:	d8e3      	bhi.n	8006798 <__multiply+0xb0>
 80067d0:	9b01      	ldr	r3, [sp, #4]
 80067d2:	f845 c003 	str.w	ip, [r5, r3]
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	3104      	adds	r1, #4
 80067da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067de:	f1b9 0f00 	cmp.w	r9, #0
 80067e2:	d021      	beq.n	8006828 <__multiply+0x140>
 80067e4:	46ae      	mov	lr, r5
 80067e6:	f04f 0a00 	mov.w	sl, #0
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	f104 0c14 	add.w	ip, r4, #20
 80067f0:	f8bc b000 	ldrh.w	fp, [ip]
 80067f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	fb09 770b 	mla	r7, r9, fp, r7
 80067fe:	4457      	add	r7, sl
 8006800:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006804:	f84e 3b04 	str.w	r3, [lr], #4
 8006808:	f85c 3b04 	ldr.w	r3, [ip], #4
 800680c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006810:	f8be 3000 	ldrh.w	r3, [lr]
 8006814:	4562      	cmp	r2, ip
 8006816:	fb09 330a 	mla	r3, r9, sl, r3
 800681a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800681e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006822:	d8e5      	bhi.n	80067f0 <__multiply+0x108>
 8006824:	9f01      	ldr	r7, [sp, #4]
 8006826:	51eb      	str	r3, [r5, r7]
 8006828:	3504      	adds	r5, #4
 800682a:	e79a      	b.n	8006762 <__multiply+0x7a>
 800682c:	3e01      	subs	r6, #1
 800682e:	e79c      	b.n	800676a <__multiply+0x82>
 8006830:	08007886 	.word	0x08007886
 8006834:	08007897 	.word	0x08007897

08006838 <__pow5mult>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	4615      	mov	r5, r2
 800683e:	f012 0203 	ands.w	r2, r2, #3
 8006842:	4607      	mov	r7, r0
 8006844:	460e      	mov	r6, r1
 8006846:	d007      	beq.n	8006858 <__pow5mult+0x20>
 8006848:	4c25      	ldr	r4, [pc, #148]	@ (80068e0 <__pow5mult+0xa8>)
 800684a:	3a01      	subs	r2, #1
 800684c:	2300      	movs	r3, #0
 800684e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006852:	f7ff fea1 	bl	8006598 <__multadd>
 8006856:	4606      	mov	r6, r0
 8006858:	10ad      	asrs	r5, r5, #2
 800685a:	d03d      	beq.n	80068d8 <__pow5mult+0xa0>
 800685c:	69fc      	ldr	r4, [r7, #28]
 800685e:	b97c      	cbnz	r4, 8006880 <__pow5mult+0x48>
 8006860:	2010      	movs	r0, #16
 8006862:	f7ff fd81 	bl	8006368 <malloc>
 8006866:	4602      	mov	r2, r0
 8006868:	61f8      	str	r0, [r7, #28]
 800686a:	b928      	cbnz	r0, 8006878 <__pow5mult+0x40>
 800686c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006870:	4b1c      	ldr	r3, [pc, #112]	@ (80068e4 <__pow5mult+0xac>)
 8006872:	481d      	ldr	r0, [pc, #116]	@ (80068e8 <__pow5mult+0xb0>)
 8006874:	f000 fbd8 	bl	8007028 <__assert_func>
 8006878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800687c:	6004      	str	r4, [r0, #0]
 800687e:	60c4      	str	r4, [r0, #12]
 8006880:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006888:	b94c      	cbnz	r4, 800689e <__pow5mult+0x66>
 800688a:	f240 2171 	movw	r1, #625	@ 0x271
 800688e:	4638      	mov	r0, r7
 8006890:	f7ff ff14 	bl	80066bc <__i2b>
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	f8c8 0008 	str.w	r0, [r8, #8]
 800689c:	6003      	str	r3, [r0, #0]
 800689e:	f04f 0900 	mov.w	r9, #0
 80068a2:	07eb      	lsls	r3, r5, #31
 80068a4:	d50a      	bpl.n	80068bc <__pow5mult+0x84>
 80068a6:	4631      	mov	r1, r6
 80068a8:	4622      	mov	r2, r4
 80068aa:	4638      	mov	r0, r7
 80068ac:	f7ff ff1c 	bl	80066e8 <__multiply>
 80068b0:	4680      	mov	r8, r0
 80068b2:	4631      	mov	r1, r6
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff fe4d 	bl	8006554 <_Bfree>
 80068ba:	4646      	mov	r6, r8
 80068bc:	106d      	asrs	r5, r5, #1
 80068be:	d00b      	beq.n	80068d8 <__pow5mult+0xa0>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	b938      	cbnz	r0, 80068d4 <__pow5mult+0x9c>
 80068c4:	4622      	mov	r2, r4
 80068c6:	4621      	mov	r1, r4
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7ff ff0d 	bl	80066e8 <__multiply>
 80068ce:	6020      	str	r0, [r4, #0]
 80068d0:	f8c0 9000 	str.w	r9, [r0]
 80068d4:	4604      	mov	r4, r0
 80068d6:	e7e4      	b.n	80068a2 <__pow5mult+0x6a>
 80068d8:	4630      	mov	r0, r6
 80068da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068de:	bf00      	nop
 80068e0:	080078f0 	.word	0x080078f0
 80068e4:	08007817 	.word	0x08007817
 80068e8:	08007897 	.word	0x08007897

080068ec <__lshift>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	4607      	mov	r7, r0
 80068f4:	4691      	mov	r9, r2
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	6849      	ldr	r1, [r1, #4]
 80068fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006904:	f108 0601 	add.w	r6, r8, #1
 8006908:	42b3      	cmp	r3, r6
 800690a:	db0b      	blt.n	8006924 <__lshift+0x38>
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff fde1 	bl	80064d4 <_Balloc>
 8006912:	4605      	mov	r5, r0
 8006914:	b948      	cbnz	r0, 800692a <__lshift+0x3e>
 8006916:	4602      	mov	r2, r0
 8006918:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800691c:	4b27      	ldr	r3, [pc, #156]	@ (80069bc <__lshift+0xd0>)
 800691e:	4828      	ldr	r0, [pc, #160]	@ (80069c0 <__lshift+0xd4>)
 8006920:	f000 fb82 	bl	8007028 <__assert_func>
 8006924:	3101      	adds	r1, #1
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	e7ee      	b.n	8006908 <__lshift+0x1c>
 800692a:	2300      	movs	r3, #0
 800692c:	f100 0114 	add.w	r1, r0, #20
 8006930:	f100 0210 	add.w	r2, r0, #16
 8006934:	4618      	mov	r0, r3
 8006936:	4553      	cmp	r3, sl
 8006938:	db33      	blt.n	80069a2 <__lshift+0xb6>
 800693a:	6920      	ldr	r0, [r4, #16]
 800693c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006940:	f104 0314 	add.w	r3, r4, #20
 8006944:	f019 091f 	ands.w	r9, r9, #31
 8006948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800694c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006950:	d02b      	beq.n	80069aa <__lshift+0xbe>
 8006952:	468a      	mov	sl, r1
 8006954:	2200      	movs	r2, #0
 8006956:	f1c9 0e20 	rsb	lr, r9, #32
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	fa00 f009 	lsl.w	r0, r0, r9
 8006960:	4310      	orrs	r0, r2
 8006962:	f84a 0b04 	str.w	r0, [sl], #4
 8006966:	f853 2b04 	ldr.w	r2, [r3], #4
 800696a:	459c      	cmp	ip, r3
 800696c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006970:	d8f3      	bhi.n	800695a <__lshift+0x6e>
 8006972:	ebac 0304 	sub.w	r3, ip, r4
 8006976:	3b15      	subs	r3, #21
 8006978:	f023 0303 	bic.w	r3, r3, #3
 800697c:	3304      	adds	r3, #4
 800697e:	f104 0015 	add.w	r0, r4, #21
 8006982:	4584      	cmp	ip, r0
 8006984:	bf38      	it	cc
 8006986:	2304      	movcc	r3, #4
 8006988:	50ca      	str	r2, [r1, r3]
 800698a:	b10a      	cbz	r2, 8006990 <__lshift+0xa4>
 800698c:	f108 0602 	add.w	r6, r8, #2
 8006990:	3e01      	subs	r6, #1
 8006992:	4638      	mov	r0, r7
 8006994:	4621      	mov	r1, r4
 8006996:	612e      	str	r6, [r5, #16]
 8006998:	f7ff fddc 	bl	8006554 <_Bfree>
 800699c:	4628      	mov	r0, r5
 800699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80069a6:	3301      	adds	r3, #1
 80069a8:	e7c5      	b.n	8006936 <__lshift+0x4a>
 80069aa:	3904      	subs	r1, #4
 80069ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b0:	459c      	cmp	ip, r3
 80069b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80069b6:	d8f9      	bhi.n	80069ac <__lshift+0xc0>
 80069b8:	e7ea      	b.n	8006990 <__lshift+0xa4>
 80069ba:	bf00      	nop
 80069bc:	08007886 	.word	0x08007886
 80069c0:	08007897 	.word	0x08007897

080069c4 <__mcmp>:
 80069c4:	4603      	mov	r3, r0
 80069c6:	690a      	ldr	r2, [r1, #16]
 80069c8:	6900      	ldr	r0, [r0, #16]
 80069ca:	b530      	push	{r4, r5, lr}
 80069cc:	1a80      	subs	r0, r0, r2
 80069ce:	d10e      	bne.n	80069ee <__mcmp+0x2a>
 80069d0:	3314      	adds	r3, #20
 80069d2:	3114      	adds	r1, #20
 80069d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069e4:	4295      	cmp	r5, r2
 80069e6:	d003      	beq.n	80069f0 <__mcmp+0x2c>
 80069e8:	d205      	bcs.n	80069f6 <__mcmp+0x32>
 80069ea:	f04f 30ff 	mov.w	r0, #4294967295
 80069ee:	bd30      	pop	{r4, r5, pc}
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d3f3      	bcc.n	80069dc <__mcmp+0x18>
 80069f4:	e7fb      	b.n	80069ee <__mcmp+0x2a>
 80069f6:	2001      	movs	r0, #1
 80069f8:	e7f9      	b.n	80069ee <__mcmp+0x2a>
	...

080069fc <__mdiff>:
 80069fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	4689      	mov	r9, r1
 8006a02:	4606      	mov	r6, r0
 8006a04:	4611      	mov	r1, r2
 8006a06:	4648      	mov	r0, r9
 8006a08:	4614      	mov	r4, r2
 8006a0a:	f7ff ffdb 	bl	80069c4 <__mcmp>
 8006a0e:	1e05      	subs	r5, r0, #0
 8006a10:	d112      	bne.n	8006a38 <__mdiff+0x3c>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7ff fd5d 	bl	80064d4 <_Balloc>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	b928      	cbnz	r0, 8006a2a <__mdiff+0x2e>
 8006a1e:	f240 2137 	movw	r1, #567	@ 0x237
 8006a22:	4b3e      	ldr	r3, [pc, #248]	@ (8006b1c <__mdiff+0x120>)
 8006a24:	483e      	ldr	r0, [pc, #248]	@ (8006b20 <__mdiff+0x124>)
 8006a26:	f000 faff 	bl	8007028 <__assert_func>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a30:	4610      	mov	r0, r2
 8006a32:	b003      	add	sp, #12
 8006a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a38:	bfbc      	itt	lt
 8006a3a:	464b      	movlt	r3, r9
 8006a3c:	46a1      	movlt	r9, r4
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a44:	bfba      	itte	lt
 8006a46:	461c      	movlt	r4, r3
 8006a48:	2501      	movlt	r5, #1
 8006a4a:	2500      	movge	r5, #0
 8006a4c:	f7ff fd42 	bl	80064d4 <_Balloc>
 8006a50:	4602      	mov	r2, r0
 8006a52:	b918      	cbnz	r0, 8006a5c <__mdiff+0x60>
 8006a54:	f240 2145 	movw	r1, #581	@ 0x245
 8006a58:	4b30      	ldr	r3, [pc, #192]	@ (8006b1c <__mdiff+0x120>)
 8006a5a:	e7e3      	b.n	8006a24 <__mdiff+0x28>
 8006a5c:	f100 0b14 	add.w	fp, r0, #20
 8006a60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a64:	f109 0310 	add.w	r3, r9, #16
 8006a68:	60c5      	str	r5, [r0, #12]
 8006a6a:	f04f 0c00 	mov.w	ip, #0
 8006a6e:	f109 0514 	add.w	r5, r9, #20
 8006a72:	46d9      	mov	r9, fp
 8006a74:	6926      	ldr	r6, [r4, #16]
 8006a76:	f104 0e14 	add.w	lr, r4, #20
 8006a7a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a7e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a8e:	b281      	uxth	r1, r0
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	fa1f f38a 	uxth.w	r3, sl
 8006a96:	1a5b      	subs	r3, r3, r1
 8006a98:	0c00      	lsrs	r0, r0, #16
 8006a9a:	4463      	add	r3, ip
 8006a9c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006aa0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006aaa:	4576      	cmp	r6, lr
 8006aac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ab0:	f849 3b04 	str.w	r3, [r9], #4
 8006ab4:	d8e6      	bhi.n	8006a84 <__mdiff+0x88>
 8006ab6:	1b33      	subs	r3, r6, r4
 8006ab8:	3b15      	subs	r3, #21
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	3415      	adds	r4, #21
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	42a6      	cmp	r6, r4
 8006ac4:	bf38      	it	cc
 8006ac6:	2304      	movcc	r3, #4
 8006ac8:	441d      	add	r5, r3
 8006aca:	445b      	add	r3, fp
 8006acc:	461e      	mov	r6, r3
 8006ace:	462c      	mov	r4, r5
 8006ad0:	4544      	cmp	r4, r8
 8006ad2:	d30e      	bcc.n	8006af2 <__mdiff+0xf6>
 8006ad4:	f108 0103 	add.w	r1, r8, #3
 8006ad8:	1b49      	subs	r1, r1, r5
 8006ada:	f021 0103 	bic.w	r1, r1, #3
 8006ade:	3d03      	subs	r5, #3
 8006ae0:	45a8      	cmp	r8, r5
 8006ae2:	bf38      	it	cc
 8006ae4:	2100      	movcc	r1, #0
 8006ae6:	440b      	add	r3, r1
 8006ae8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006aec:	b199      	cbz	r1, 8006b16 <__mdiff+0x11a>
 8006aee:	6117      	str	r7, [r2, #16]
 8006af0:	e79e      	b.n	8006a30 <__mdiff+0x34>
 8006af2:	46e6      	mov	lr, ip
 8006af4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006af8:	fa1f fc81 	uxth.w	ip, r1
 8006afc:	44f4      	add	ip, lr
 8006afe:	0c08      	lsrs	r0, r1, #16
 8006b00:	4471      	add	r1, lr
 8006b02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b06:	b289      	uxth	r1, r1
 8006b08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b10:	f846 1b04 	str.w	r1, [r6], #4
 8006b14:	e7dc      	b.n	8006ad0 <__mdiff+0xd4>
 8006b16:	3f01      	subs	r7, #1
 8006b18:	e7e6      	b.n	8006ae8 <__mdiff+0xec>
 8006b1a:	bf00      	nop
 8006b1c:	08007886 	.word	0x08007886
 8006b20:	08007897 	.word	0x08007897

08006b24 <__d2b>:
 8006b24:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4690      	mov	r8, r2
 8006b2c:	4699      	mov	r9, r3
 8006b2e:	9e08      	ldr	r6, [sp, #32]
 8006b30:	f7ff fcd0 	bl	80064d4 <_Balloc>
 8006b34:	4604      	mov	r4, r0
 8006b36:	b930      	cbnz	r0, 8006b46 <__d2b+0x22>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b3e:	4b23      	ldr	r3, [pc, #140]	@ (8006bcc <__d2b+0xa8>)
 8006b40:	4823      	ldr	r0, [pc, #140]	@ (8006bd0 <__d2b+0xac>)
 8006b42:	f000 fa71 	bl	8007028 <__assert_func>
 8006b46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b4e:	b10d      	cbz	r5, 8006b54 <__d2b+0x30>
 8006b50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	f1b8 0300 	subs.w	r3, r8, #0
 8006b5a:	d024      	beq.n	8006ba6 <__d2b+0x82>
 8006b5c:	4668      	mov	r0, sp
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	f7ff fd7f 	bl	8006662 <__lo0bits>
 8006b64:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b68:	b1d8      	cbz	r0, 8006ba2 <__d2b+0x7e>
 8006b6a:	f1c0 0320 	rsb	r3, r0, #32
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	430b      	orrs	r3, r1
 8006b74:	40c2      	lsrs	r2, r0
 8006b76:	6163      	str	r3, [r4, #20]
 8006b78:	9201      	str	r2, [sp, #4]
 8006b7a:	9b01      	ldr	r3, [sp, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bf0c      	ite	eq
 8006b80:	2201      	moveq	r2, #1
 8006b82:	2202      	movne	r2, #2
 8006b84:	61a3      	str	r3, [r4, #24]
 8006b86:	6122      	str	r2, [r4, #16]
 8006b88:	b1ad      	cbz	r5, 8006bb6 <__d2b+0x92>
 8006b8a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b8e:	4405      	add	r5, r0
 8006b90:	6035      	str	r5, [r6, #0]
 8006b92:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b98:	6018      	str	r0, [r3, #0]
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	b002      	add	sp, #8
 8006b9e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006ba2:	6161      	str	r1, [r4, #20]
 8006ba4:	e7e9      	b.n	8006b7a <__d2b+0x56>
 8006ba6:	a801      	add	r0, sp, #4
 8006ba8:	f7ff fd5b 	bl	8006662 <__lo0bits>
 8006bac:	9b01      	ldr	r3, [sp, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	6163      	str	r3, [r4, #20]
 8006bb2:	3020      	adds	r0, #32
 8006bb4:	e7e7      	b.n	8006b86 <__d2b+0x62>
 8006bb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bbe:	6030      	str	r0, [r6, #0]
 8006bc0:	6918      	ldr	r0, [r3, #16]
 8006bc2:	f7ff fd2f 	bl	8006624 <__hi0bits>
 8006bc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bca:	e7e4      	b.n	8006b96 <__d2b+0x72>
 8006bcc:	08007886 	.word	0x08007886
 8006bd0:	08007897 	.word	0x08007897

08006bd4 <__ssputs_r>:
 8006bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd8:	461f      	mov	r7, r3
 8006bda:	688e      	ldr	r6, [r1, #8]
 8006bdc:	4682      	mov	sl, r0
 8006bde:	42be      	cmp	r6, r7
 8006be0:	460c      	mov	r4, r1
 8006be2:	4690      	mov	r8, r2
 8006be4:	680b      	ldr	r3, [r1, #0]
 8006be6:	d82d      	bhi.n	8006c44 <__ssputs_r+0x70>
 8006be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bf0:	d026      	beq.n	8006c40 <__ssputs_r+0x6c>
 8006bf2:	6965      	ldr	r5, [r4, #20]
 8006bf4:	6909      	ldr	r1, [r1, #16]
 8006bf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bfa:	eba3 0901 	sub.w	r9, r3, r1
 8006bfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c02:	1c7b      	adds	r3, r7, #1
 8006c04:	444b      	add	r3, r9
 8006c06:	106d      	asrs	r5, r5, #1
 8006c08:	429d      	cmp	r5, r3
 8006c0a:	bf38      	it	cc
 8006c0c:	461d      	movcc	r5, r3
 8006c0e:	0553      	lsls	r3, r2, #21
 8006c10:	d527      	bpl.n	8006c62 <__ssputs_r+0x8e>
 8006c12:	4629      	mov	r1, r5
 8006c14:	f7ff fbd2 	bl	80063bc <_malloc_r>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	b360      	cbz	r0, 8006c76 <__ssputs_r+0xa2>
 8006c1c:	464a      	mov	r2, r9
 8006c1e:	6921      	ldr	r1, [r4, #16]
 8006c20:	f7fe fcf9 	bl	8005616 <memcpy>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	6126      	str	r6, [r4, #16]
 8006c32:	444e      	add	r6, r9
 8006c34:	6026      	str	r6, [r4, #0]
 8006c36:	463e      	mov	r6, r7
 8006c38:	6165      	str	r5, [r4, #20]
 8006c3a:	eba5 0509 	sub.w	r5, r5, r9
 8006c3e:	60a5      	str	r5, [r4, #8]
 8006c40:	42be      	cmp	r6, r7
 8006c42:	d900      	bls.n	8006c46 <__ssputs_r+0x72>
 8006c44:	463e      	mov	r6, r7
 8006c46:	4632      	mov	r2, r6
 8006c48:	4641      	mov	r1, r8
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	f000 f9c2 	bl	8006fd4 <memmove>
 8006c50:	2000      	movs	r0, #0
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	1b9b      	subs	r3, r3, r6
 8006c56:	60a3      	str	r3, [r4, #8]
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	4433      	add	r3, r6
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c62:	462a      	mov	r2, r5
 8006c64:	f000 fa24 	bl	80070b0 <_realloc_r>
 8006c68:	4606      	mov	r6, r0
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d1e0      	bne.n	8006c30 <__ssputs_r+0x5c>
 8006c6e:	4650      	mov	r0, sl
 8006c70:	6921      	ldr	r1, [r4, #16]
 8006c72:	f7ff fb31 	bl	80062d8 <_free_r>
 8006c76:	230c      	movs	r3, #12
 8006c78:	f8ca 3000 	str.w	r3, [sl]
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	e7e9      	b.n	8006c5e <__ssputs_r+0x8a>
	...

08006c8c <_svfiprintf_r>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	4698      	mov	r8, r3
 8006c92:	898b      	ldrh	r3, [r1, #12]
 8006c94:	4607      	mov	r7, r0
 8006c96:	061b      	lsls	r3, r3, #24
 8006c98:	460d      	mov	r5, r1
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	b09d      	sub	sp, #116	@ 0x74
 8006c9e:	d510      	bpl.n	8006cc2 <_svfiprintf_r+0x36>
 8006ca0:	690b      	ldr	r3, [r1, #16]
 8006ca2:	b973      	cbnz	r3, 8006cc2 <_svfiprintf_r+0x36>
 8006ca4:	2140      	movs	r1, #64	@ 0x40
 8006ca6:	f7ff fb89 	bl	80063bc <_malloc_r>
 8006caa:	6028      	str	r0, [r5, #0]
 8006cac:	6128      	str	r0, [r5, #16]
 8006cae:	b930      	cbnz	r0, 8006cbe <_svfiprintf_r+0x32>
 8006cb0:	230c      	movs	r3, #12
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	b01d      	add	sp, #116	@ 0x74
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	2340      	movs	r3, #64	@ 0x40
 8006cc0:	616b      	str	r3, [r5, #20]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cc6:	2320      	movs	r3, #32
 8006cc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ccc:	2330      	movs	r3, #48	@ 0x30
 8006cce:	f04f 0901 	mov.w	r9, #1
 8006cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cd6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e70 <_svfiprintf_r+0x1e4>
 8006cda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cde:	4623      	mov	r3, r4
 8006ce0:	469a      	mov	sl, r3
 8006ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce6:	b10a      	cbz	r2, 8006cec <_svfiprintf_r+0x60>
 8006ce8:	2a25      	cmp	r2, #37	@ 0x25
 8006cea:	d1f9      	bne.n	8006ce0 <_svfiprintf_r+0x54>
 8006cec:	ebba 0b04 	subs.w	fp, sl, r4
 8006cf0:	d00b      	beq.n	8006d0a <_svfiprintf_r+0x7e>
 8006cf2:	465b      	mov	r3, fp
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff ff6b 	bl	8006bd4 <__ssputs_r>
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f000 80a7 	beq.w	8006e52 <_svfiprintf_r+0x1c6>
 8006d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d06:	445a      	add	r2, fp
 8006d08:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 809f 	beq.w	8006e52 <_svfiprintf_r+0x1c6>
 8006d14:	2300      	movs	r3, #0
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d1e:	f10a 0a01 	add.w	sl, sl, #1
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	9307      	str	r3, [sp, #28]
 8006d26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d2c:	4654      	mov	r4, sl
 8006d2e:	2205      	movs	r2, #5
 8006d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d34:	484e      	ldr	r0, [pc, #312]	@ (8006e70 <_svfiprintf_r+0x1e4>)
 8006d36:	f7fe fc60 	bl	80055fa <memchr>
 8006d3a:	9a04      	ldr	r2, [sp, #16]
 8006d3c:	b9d8      	cbnz	r0, 8006d76 <_svfiprintf_r+0xea>
 8006d3e:	06d0      	lsls	r0, r2, #27
 8006d40:	bf44      	itt	mi
 8006d42:	2320      	movmi	r3, #32
 8006d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d48:	0711      	lsls	r1, r2, #28
 8006d4a:	bf44      	itt	mi
 8006d4c:	232b      	movmi	r3, #43	@ 0x2b
 8006d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d52:	f89a 3000 	ldrb.w	r3, [sl]
 8006d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d58:	d015      	beq.n	8006d86 <_svfiprintf_r+0xfa>
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f04f 0c0a 	mov.w	ip, #10
 8006d62:	9a07      	ldr	r2, [sp, #28]
 8006d64:	4621      	mov	r1, r4
 8006d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d6a:	3b30      	subs	r3, #48	@ 0x30
 8006d6c:	2b09      	cmp	r3, #9
 8006d6e:	d94b      	bls.n	8006e08 <_svfiprintf_r+0x17c>
 8006d70:	b1b0      	cbz	r0, 8006da0 <_svfiprintf_r+0x114>
 8006d72:	9207      	str	r2, [sp, #28]
 8006d74:	e014      	b.n	8006da0 <_svfiprintf_r+0x114>
 8006d76:	eba0 0308 	sub.w	r3, r0, r8
 8006d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	46a2      	mov	sl, r4
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	e7d2      	b.n	8006d2c <_svfiprintf_r+0xa0>
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	1d19      	adds	r1, r3, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	9103      	str	r1, [sp, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfbb      	ittet	lt
 8006d92:	425b      	neglt	r3, r3
 8006d94:	f042 0202 	orrlt.w	r2, r2, #2
 8006d98:	9307      	strge	r3, [sp, #28]
 8006d9a:	9307      	strlt	r3, [sp, #28]
 8006d9c:	bfb8      	it	lt
 8006d9e:	9204      	strlt	r2, [sp, #16]
 8006da0:	7823      	ldrb	r3, [r4, #0]
 8006da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006da4:	d10a      	bne.n	8006dbc <_svfiprintf_r+0x130>
 8006da6:	7863      	ldrb	r3, [r4, #1]
 8006da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006daa:	d132      	bne.n	8006e12 <_svfiprintf_r+0x186>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	3402      	adds	r4, #2
 8006db0:	1d1a      	adds	r2, r3, #4
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	9203      	str	r2, [sp, #12]
 8006db6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dba:	9305      	str	r3, [sp, #20]
 8006dbc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e74 <_svfiprintf_r+0x1e8>
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	7821      	ldrb	r1, [r4, #0]
 8006dc6:	f7fe fc18 	bl	80055fa <memchr>
 8006dca:	b138      	cbz	r0, 8006ddc <_svfiprintf_r+0x150>
 8006dcc:	2240      	movs	r2, #64	@ 0x40
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	eba0 000a 	sub.w	r0, r0, sl
 8006dd4:	4082      	lsls	r2, r0
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	3401      	adds	r4, #1
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de0:	2206      	movs	r2, #6
 8006de2:	4825      	ldr	r0, [pc, #148]	@ (8006e78 <_svfiprintf_r+0x1ec>)
 8006de4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006de8:	f7fe fc07 	bl	80055fa <memchr>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d036      	beq.n	8006e5e <_svfiprintf_r+0x1d2>
 8006df0:	4b22      	ldr	r3, [pc, #136]	@ (8006e7c <_svfiprintf_r+0x1f0>)
 8006df2:	bb1b      	cbnz	r3, 8006e3c <_svfiprintf_r+0x1b0>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	3307      	adds	r3, #7
 8006df8:	f023 0307 	bic.w	r3, r3, #7
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	9303      	str	r3, [sp, #12]
 8006e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e02:	4433      	add	r3, r6
 8006e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e06:	e76a      	b.n	8006cde <_svfiprintf_r+0x52>
 8006e08:	460c      	mov	r4, r1
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e10:	e7a8      	b.n	8006d64 <_svfiprintf_r+0xd8>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f04f 0c0a 	mov.w	ip, #10
 8006e18:	4619      	mov	r1, r3
 8006e1a:	3401      	adds	r4, #1
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e24:	3a30      	subs	r2, #48	@ 0x30
 8006e26:	2a09      	cmp	r2, #9
 8006e28:	d903      	bls.n	8006e32 <_svfiprintf_r+0x1a6>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0c6      	beq.n	8006dbc <_svfiprintf_r+0x130>
 8006e2e:	9105      	str	r1, [sp, #20]
 8006e30:	e7c4      	b.n	8006dbc <_svfiprintf_r+0x130>
 8006e32:	4604      	mov	r4, r0
 8006e34:	2301      	movs	r3, #1
 8006e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e3a:	e7f0      	b.n	8006e1e <_svfiprintf_r+0x192>
 8006e3c:	ab03      	add	r3, sp, #12
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	462a      	mov	r2, r5
 8006e42:	4638      	mov	r0, r7
 8006e44:	4b0e      	ldr	r3, [pc, #56]	@ (8006e80 <_svfiprintf_r+0x1f4>)
 8006e46:	a904      	add	r1, sp, #16
 8006e48:	f7fd fe74 	bl	8004b34 <_printf_float>
 8006e4c:	1c42      	adds	r2, r0, #1
 8006e4e:	4606      	mov	r6, r0
 8006e50:	d1d6      	bne.n	8006e00 <_svfiprintf_r+0x174>
 8006e52:	89ab      	ldrh	r3, [r5, #12]
 8006e54:	065b      	lsls	r3, r3, #25
 8006e56:	f53f af2d 	bmi.w	8006cb4 <_svfiprintf_r+0x28>
 8006e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e5c:	e72c      	b.n	8006cb8 <_svfiprintf_r+0x2c>
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	462a      	mov	r2, r5
 8006e64:	4638      	mov	r0, r7
 8006e66:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <_svfiprintf_r+0x1f4>)
 8006e68:	a904      	add	r1, sp, #16
 8006e6a:	f7fe f901 	bl	8005070 <_printf_i>
 8006e6e:	e7ed      	b.n	8006e4c <_svfiprintf_r+0x1c0>
 8006e70:	080079f0 	.word	0x080079f0
 8006e74:	080079f6 	.word	0x080079f6
 8006e78:	080079fa 	.word	0x080079fa
 8006e7c:	08004b35 	.word	0x08004b35
 8006e80:	08006bd5 	.word	0x08006bd5

08006e84 <__sflush_r>:
 8006e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	0716      	lsls	r6, r2, #28
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	d454      	bmi.n	8006f3c <__sflush_r+0xb8>
 8006e92:	684b      	ldr	r3, [r1, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dc02      	bgt.n	8006e9e <__sflush_r+0x1a>
 8006e98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dd48      	ble.n	8006f30 <__sflush_r+0xac>
 8006e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	d045      	beq.n	8006f30 <__sflush_r+0xac>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006eaa:	682f      	ldr	r7, [r5, #0]
 8006eac:	6a21      	ldr	r1, [r4, #32]
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	d030      	beq.n	8006f14 <__sflush_r+0x90>
 8006eb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	0759      	lsls	r1, r3, #29
 8006eb8:	d505      	bpl.n	8006ec6 <__sflush_r+0x42>
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	1ad2      	subs	r2, r2, r3
 8006ebe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ec0:	b10b      	cbz	r3, 8006ec6 <__sflush_r+0x42>
 8006ec2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ec4:	1ad2      	subs	r2, r2, r3
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4628      	mov	r0, r5
 8006eca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ecc:	6a21      	ldr	r1, [r4, #32]
 8006ece:	47b0      	blx	r6
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	d106      	bne.n	8006ee4 <__sflush_r+0x60>
 8006ed6:	6829      	ldr	r1, [r5, #0]
 8006ed8:	291d      	cmp	r1, #29
 8006eda:	d82b      	bhi.n	8006f34 <__sflush_r+0xb0>
 8006edc:	4a28      	ldr	r2, [pc, #160]	@ (8006f80 <__sflush_r+0xfc>)
 8006ede:	410a      	asrs	r2, r1
 8006ee0:	07d6      	lsls	r6, r2, #31
 8006ee2:	d427      	bmi.n	8006f34 <__sflush_r+0xb0>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	6062      	str	r2, [r4, #4]
 8006ee8:	6922      	ldr	r2, [r4, #16]
 8006eea:	04d9      	lsls	r1, r3, #19
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	d504      	bpl.n	8006efa <__sflush_r+0x76>
 8006ef0:	1c42      	adds	r2, r0, #1
 8006ef2:	d101      	bne.n	8006ef8 <__sflush_r+0x74>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b903      	cbnz	r3, 8006efa <__sflush_r+0x76>
 8006ef8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006efa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006efc:	602f      	str	r7, [r5, #0]
 8006efe:	b1b9      	cbz	r1, 8006f30 <__sflush_r+0xac>
 8006f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f04:	4299      	cmp	r1, r3
 8006f06:	d002      	beq.n	8006f0e <__sflush_r+0x8a>
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f7ff f9e5 	bl	80062d8 <_free_r>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f12:	e00d      	b.n	8006f30 <__sflush_r+0xac>
 8006f14:	2301      	movs	r3, #1
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b0      	blx	r6
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	1c50      	adds	r0, r2, #1
 8006f1e:	d1c9      	bne.n	8006eb4 <__sflush_r+0x30>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0c6      	beq.n	8006eb4 <__sflush_r+0x30>
 8006f26:	2b1d      	cmp	r3, #29
 8006f28:	d001      	beq.n	8006f2e <__sflush_r+0xaa>
 8006f2a:	2b16      	cmp	r3, #22
 8006f2c:	d11d      	bne.n	8006f6a <__sflush_r+0xe6>
 8006f2e:	602f      	str	r7, [r5, #0]
 8006f30:	2000      	movs	r0, #0
 8006f32:	e021      	b.n	8006f78 <__sflush_r+0xf4>
 8006f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f38:	b21b      	sxth	r3, r3
 8006f3a:	e01a      	b.n	8006f72 <__sflush_r+0xee>
 8006f3c:	690f      	ldr	r7, [r1, #16]
 8006f3e:	2f00      	cmp	r7, #0
 8006f40:	d0f6      	beq.n	8006f30 <__sflush_r+0xac>
 8006f42:	0793      	lsls	r3, r2, #30
 8006f44:	bf18      	it	ne
 8006f46:	2300      	movne	r3, #0
 8006f48:	680e      	ldr	r6, [r1, #0]
 8006f4a:	bf08      	it	eq
 8006f4c:	694b      	ldreq	r3, [r1, #20]
 8006f4e:	1bf6      	subs	r6, r6, r7
 8006f50:	600f      	str	r7, [r1, #0]
 8006f52:	608b      	str	r3, [r1, #8]
 8006f54:	2e00      	cmp	r6, #0
 8006f56:	ddeb      	ble.n	8006f30 <__sflush_r+0xac>
 8006f58:	4633      	mov	r3, r6
 8006f5a:	463a      	mov	r2, r7
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	6a21      	ldr	r1, [r4, #32]
 8006f60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006f64:	47e0      	blx	ip
 8006f66:	2800      	cmp	r0, #0
 8006f68:	dc07      	bgt.n	8006f7a <__sflush_r+0xf6>
 8006f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7a:	4407      	add	r7, r0
 8006f7c:	1a36      	subs	r6, r6, r0
 8006f7e:	e7e9      	b.n	8006f54 <__sflush_r+0xd0>
 8006f80:	dfbffffe 	.word	0xdfbffffe

08006f84 <_fflush_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	690b      	ldr	r3, [r1, #16]
 8006f88:	4605      	mov	r5, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	b913      	cbnz	r3, 8006f94 <_fflush_r+0x10>
 8006f8e:	2500      	movs	r5, #0
 8006f90:	4628      	mov	r0, r5
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	b118      	cbz	r0, 8006f9e <_fflush_r+0x1a>
 8006f96:	6a03      	ldr	r3, [r0, #32]
 8006f98:	b90b      	cbnz	r3, 8006f9e <_fflush_r+0x1a>
 8006f9a:	f7fe fa15 	bl	80053c8 <__sinit>
 8006f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f3      	beq.n	8006f8e <_fflush_r+0xa>
 8006fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fa8:	07d0      	lsls	r0, r2, #31
 8006faa:	d404      	bmi.n	8006fb6 <_fflush_r+0x32>
 8006fac:	0599      	lsls	r1, r3, #22
 8006fae:	d402      	bmi.n	8006fb6 <_fflush_r+0x32>
 8006fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fb2:	f7fe fb20 	bl	80055f6 <__retarget_lock_acquire_recursive>
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	4621      	mov	r1, r4
 8006fba:	f7ff ff63 	bl	8006e84 <__sflush_r>
 8006fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	07da      	lsls	r2, r3, #31
 8006fc4:	d4e4      	bmi.n	8006f90 <_fflush_r+0xc>
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	059b      	lsls	r3, r3, #22
 8006fca:	d4e1      	bmi.n	8006f90 <_fflush_r+0xc>
 8006fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fce:	f7fe fb13 	bl	80055f8 <__retarget_lock_release_recursive>
 8006fd2:	e7dd      	b.n	8006f90 <_fflush_r+0xc>

08006fd4 <memmove>:
 8006fd4:	4288      	cmp	r0, r1
 8006fd6:	b510      	push	{r4, lr}
 8006fd8:	eb01 0402 	add.w	r4, r1, r2
 8006fdc:	d902      	bls.n	8006fe4 <memmove+0x10>
 8006fde:	4284      	cmp	r4, r0
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	d807      	bhi.n	8006ff4 <memmove+0x20>
 8006fe4:	1e43      	subs	r3, r0, #1
 8006fe6:	42a1      	cmp	r1, r4
 8006fe8:	d008      	beq.n	8006ffc <memmove+0x28>
 8006fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ff2:	e7f8      	b.n	8006fe6 <memmove+0x12>
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	4402      	add	r2, r0
 8006ff8:	428a      	cmp	r2, r1
 8006ffa:	d100      	bne.n	8006ffe <memmove+0x2a>
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007006:	e7f7      	b.n	8006ff8 <memmove+0x24>

08007008 <_sbrk_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	2300      	movs	r3, #0
 800700c:	4d05      	ldr	r5, [pc, #20]	@ (8007024 <_sbrk_r+0x1c>)
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fa fe62 	bl	8001cdc <_sbrk>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_sbrk_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_sbrk_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20001418 	.word	0x20001418

08007028 <__assert_func>:
 8007028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800702a:	4614      	mov	r4, r2
 800702c:	461a      	mov	r2, r3
 800702e:	4b09      	ldr	r3, [pc, #36]	@ (8007054 <__assert_func+0x2c>)
 8007030:	4605      	mov	r5, r0
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68d8      	ldr	r0, [r3, #12]
 8007036:	b954      	cbnz	r4, 800704e <__assert_func+0x26>
 8007038:	4b07      	ldr	r3, [pc, #28]	@ (8007058 <__assert_func+0x30>)
 800703a:	461c      	mov	r4, r3
 800703c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007040:	9100      	str	r1, [sp, #0]
 8007042:	462b      	mov	r3, r5
 8007044:	4905      	ldr	r1, [pc, #20]	@ (800705c <__assert_func+0x34>)
 8007046:	f000 f86f 	bl	8007128 <fiprintf>
 800704a:	f000 f87f 	bl	800714c <abort>
 800704e:	4b04      	ldr	r3, [pc, #16]	@ (8007060 <__assert_func+0x38>)
 8007050:	e7f4      	b.n	800703c <__assert_func+0x14>
 8007052:	bf00      	nop
 8007054:	2000005c 	.word	0x2000005c
 8007058:	08007a46 	.word	0x08007a46
 800705c:	08007a18 	.word	0x08007a18
 8007060:	08007a0b 	.word	0x08007a0b

08007064 <_calloc_r>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	fba1 5402 	umull	r5, r4, r1, r2
 800706a:	b93c      	cbnz	r4, 800707c <_calloc_r+0x18>
 800706c:	4629      	mov	r1, r5
 800706e:	f7ff f9a5 	bl	80063bc <_malloc_r>
 8007072:	4606      	mov	r6, r0
 8007074:	b928      	cbnz	r0, 8007082 <_calloc_r+0x1e>
 8007076:	2600      	movs	r6, #0
 8007078:	4630      	mov	r0, r6
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	220c      	movs	r2, #12
 800707e:	6002      	str	r2, [r0, #0]
 8007080:	e7f9      	b.n	8007076 <_calloc_r+0x12>
 8007082:	462a      	mov	r2, r5
 8007084:	4621      	mov	r1, r4
 8007086:	f7fe fa38 	bl	80054fa <memset>
 800708a:	e7f5      	b.n	8007078 <_calloc_r+0x14>

0800708c <__ascii_mbtowc>:
 800708c:	b082      	sub	sp, #8
 800708e:	b901      	cbnz	r1, 8007092 <__ascii_mbtowc+0x6>
 8007090:	a901      	add	r1, sp, #4
 8007092:	b142      	cbz	r2, 80070a6 <__ascii_mbtowc+0x1a>
 8007094:	b14b      	cbz	r3, 80070aa <__ascii_mbtowc+0x1e>
 8007096:	7813      	ldrb	r3, [r2, #0]
 8007098:	600b      	str	r3, [r1, #0]
 800709a:	7812      	ldrb	r2, [r2, #0]
 800709c:	1e10      	subs	r0, r2, #0
 800709e:	bf18      	it	ne
 80070a0:	2001      	movne	r0, #1
 80070a2:	b002      	add	sp, #8
 80070a4:	4770      	bx	lr
 80070a6:	4610      	mov	r0, r2
 80070a8:	e7fb      	b.n	80070a2 <__ascii_mbtowc+0x16>
 80070aa:	f06f 0001 	mvn.w	r0, #1
 80070ae:	e7f8      	b.n	80070a2 <__ascii_mbtowc+0x16>

080070b0 <_realloc_r>:
 80070b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b4:	4680      	mov	r8, r0
 80070b6:	4615      	mov	r5, r2
 80070b8:	460c      	mov	r4, r1
 80070ba:	b921      	cbnz	r1, 80070c6 <_realloc_r+0x16>
 80070bc:	4611      	mov	r1, r2
 80070be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c2:	f7ff b97b 	b.w	80063bc <_malloc_r>
 80070c6:	b92a      	cbnz	r2, 80070d4 <_realloc_r+0x24>
 80070c8:	f7ff f906 	bl	80062d8 <_free_r>
 80070cc:	2400      	movs	r4, #0
 80070ce:	4620      	mov	r0, r4
 80070d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d4:	f000 f841 	bl	800715a <_malloc_usable_size_r>
 80070d8:	4285      	cmp	r5, r0
 80070da:	4606      	mov	r6, r0
 80070dc:	d802      	bhi.n	80070e4 <_realloc_r+0x34>
 80070de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80070e2:	d8f4      	bhi.n	80070ce <_realloc_r+0x1e>
 80070e4:	4629      	mov	r1, r5
 80070e6:	4640      	mov	r0, r8
 80070e8:	f7ff f968 	bl	80063bc <_malloc_r>
 80070ec:	4607      	mov	r7, r0
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d0ec      	beq.n	80070cc <_realloc_r+0x1c>
 80070f2:	42b5      	cmp	r5, r6
 80070f4:	462a      	mov	r2, r5
 80070f6:	4621      	mov	r1, r4
 80070f8:	bf28      	it	cs
 80070fa:	4632      	movcs	r2, r6
 80070fc:	f7fe fa8b 	bl	8005616 <memcpy>
 8007100:	4621      	mov	r1, r4
 8007102:	4640      	mov	r0, r8
 8007104:	f7ff f8e8 	bl	80062d8 <_free_r>
 8007108:	463c      	mov	r4, r7
 800710a:	e7e0      	b.n	80070ce <_realloc_r+0x1e>

0800710c <__ascii_wctomb>:
 800710c:	4603      	mov	r3, r0
 800710e:	4608      	mov	r0, r1
 8007110:	b141      	cbz	r1, 8007124 <__ascii_wctomb+0x18>
 8007112:	2aff      	cmp	r2, #255	@ 0xff
 8007114:	d904      	bls.n	8007120 <__ascii_wctomb+0x14>
 8007116:	228a      	movs	r2, #138	@ 0x8a
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	4770      	bx	lr
 8007120:	2001      	movs	r0, #1
 8007122:	700a      	strb	r2, [r1, #0]
 8007124:	4770      	bx	lr
	...

08007128 <fiprintf>:
 8007128:	b40e      	push	{r1, r2, r3}
 800712a:	b503      	push	{r0, r1, lr}
 800712c:	4601      	mov	r1, r0
 800712e:	ab03      	add	r3, sp, #12
 8007130:	4805      	ldr	r0, [pc, #20]	@ (8007148 <fiprintf+0x20>)
 8007132:	f853 2b04 	ldr.w	r2, [r3], #4
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	f000 f83d 	bl	80071b8 <_vfiprintf_r>
 800713e:	b002      	add	sp, #8
 8007140:	f85d eb04 	ldr.w	lr, [sp], #4
 8007144:	b003      	add	sp, #12
 8007146:	4770      	bx	lr
 8007148:	2000005c 	.word	0x2000005c

0800714c <abort>:
 800714c:	2006      	movs	r0, #6
 800714e:	b508      	push	{r3, lr}
 8007150:	f000 fa06 	bl	8007560 <raise>
 8007154:	2001      	movs	r0, #1
 8007156:	f7fa fd4d 	bl	8001bf4 <_exit>

0800715a <_malloc_usable_size_r>:
 800715a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715e:	1f18      	subs	r0, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	bfbc      	itt	lt
 8007164:	580b      	ldrlt	r3, [r1, r0]
 8007166:	18c0      	addlt	r0, r0, r3
 8007168:	4770      	bx	lr

0800716a <__sfputc_r>:
 800716a:	6893      	ldr	r3, [r2, #8]
 800716c:	b410      	push	{r4}
 800716e:	3b01      	subs	r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	6093      	str	r3, [r2, #8]
 8007174:	da07      	bge.n	8007186 <__sfputc_r+0x1c>
 8007176:	6994      	ldr	r4, [r2, #24]
 8007178:	42a3      	cmp	r3, r4
 800717a:	db01      	blt.n	8007180 <__sfputc_r+0x16>
 800717c:	290a      	cmp	r1, #10
 800717e:	d102      	bne.n	8007186 <__sfputc_r+0x1c>
 8007180:	bc10      	pop	{r4}
 8007182:	f000 b931 	b.w	80073e8 <__swbuf_r>
 8007186:	6813      	ldr	r3, [r2, #0]
 8007188:	1c58      	adds	r0, r3, #1
 800718a:	6010      	str	r0, [r2, #0]
 800718c:	7019      	strb	r1, [r3, #0]
 800718e:	4608      	mov	r0, r1
 8007190:	bc10      	pop	{r4}
 8007192:	4770      	bx	lr

08007194 <__sfputs_r>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	4614      	mov	r4, r2
 800719c:	18d5      	adds	r5, r2, r3
 800719e:	42ac      	cmp	r4, r5
 80071a0:	d101      	bne.n	80071a6 <__sfputs_r+0x12>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e007      	b.n	80071b6 <__sfputs_r+0x22>
 80071a6:	463a      	mov	r2, r7
 80071a8:	4630      	mov	r0, r6
 80071aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ae:	f7ff ffdc 	bl	800716a <__sfputc_r>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d1f3      	bne.n	800719e <__sfputs_r+0xa>
 80071b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071b8 <_vfiprintf_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	460d      	mov	r5, r1
 80071be:	4614      	mov	r4, r2
 80071c0:	4698      	mov	r8, r3
 80071c2:	4606      	mov	r6, r0
 80071c4:	b09d      	sub	sp, #116	@ 0x74
 80071c6:	b118      	cbz	r0, 80071d0 <_vfiprintf_r+0x18>
 80071c8:	6a03      	ldr	r3, [r0, #32]
 80071ca:	b90b      	cbnz	r3, 80071d0 <_vfiprintf_r+0x18>
 80071cc:	f7fe f8fc 	bl	80053c8 <__sinit>
 80071d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071d2:	07d9      	lsls	r1, r3, #31
 80071d4:	d405      	bmi.n	80071e2 <_vfiprintf_r+0x2a>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	059a      	lsls	r2, r3, #22
 80071da:	d402      	bmi.n	80071e2 <_vfiprintf_r+0x2a>
 80071dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071de:	f7fe fa0a 	bl	80055f6 <__retarget_lock_acquire_recursive>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	071b      	lsls	r3, r3, #28
 80071e6:	d501      	bpl.n	80071ec <_vfiprintf_r+0x34>
 80071e8:	692b      	ldr	r3, [r5, #16]
 80071ea:	b99b      	cbnz	r3, 8007214 <_vfiprintf_r+0x5c>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f000 f938 	bl	8007464 <__swsetup_r>
 80071f4:	b170      	cbz	r0, 8007214 <_vfiprintf_r+0x5c>
 80071f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071f8:	07dc      	lsls	r4, r3, #31
 80071fa:	d504      	bpl.n	8007206 <_vfiprintf_r+0x4e>
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	b01d      	add	sp, #116	@ 0x74
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	0598      	lsls	r0, r3, #22
 800720a:	d4f7      	bmi.n	80071fc <_vfiprintf_r+0x44>
 800720c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800720e:	f7fe f9f3 	bl	80055f8 <__retarget_lock_release_recursive>
 8007212:	e7f3      	b.n	80071fc <_vfiprintf_r+0x44>
 8007214:	2300      	movs	r3, #0
 8007216:	9309      	str	r3, [sp, #36]	@ 0x24
 8007218:	2320      	movs	r3, #32
 800721a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800721e:	2330      	movs	r3, #48	@ 0x30
 8007220:	f04f 0901 	mov.w	r9, #1
 8007224:	f8cd 800c 	str.w	r8, [sp, #12]
 8007228:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80073d4 <_vfiprintf_r+0x21c>
 800722c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007230:	4623      	mov	r3, r4
 8007232:	469a      	mov	sl, r3
 8007234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007238:	b10a      	cbz	r2, 800723e <_vfiprintf_r+0x86>
 800723a:	2a25      	cmp	r2, #37	@ 0x25
 800723c:	d1f9      	bne.n	8007232 <_vfiprintf_r+0x7a>
 800723e:	ebba 0b04 	subs.w	fp, sl, r4
 8007242:	d00b      	beq.n	800725c <_vfiprintf_r+0xa4>
 8007244:	465b      	mov	r3, fp
 8007246:	4622      	mov	r2, r4
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ffa2 	bl	8007194 <__sfputs_r>
 8007250:	3001      	adds	r0, #1
 8007252:	f000 80a7 	beq.w	80073a4 <_vfiprintf_r+0x1ec>
 8007256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007258:	445a      	add	r2, fp
 800725a:	9209      	str	r2, [sp, #36]	@ 0x24
 800725c:	f89a 3000 	ldrb.w	r3, [sl]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 809f 	beq.w	80073a4 <_vfiprintf_r+0x1ec>
 8007266:	2300      	movs	r3, #0
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800727c:	931a      	str	r3, [sp, #104]	@ 0x68
 800727e:	4654      	mov	r4, sl
 8007280:	2205      	movs	r2, #5
 8007282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007286:	4853      	ldr	r0, [pc, #332]	@ (80073d4 <_vfiprintf_r+0x21c>)
 8007288:	f7fe f9b7 	bl	80055fa <memchr>
 800728c:	9a04      	ldr	r2, [sp, #16]
 800728e:	b9d8      	cbnz	r0, 80072c8 <_vfiprintf_r+0x110>
 8007290:	06d1      	lsls	r1, r2, #27
 8007292:	bf44      	itt	mi
 8007294:	2320      	movmi	r3, #32
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800729a:	0713      	lsls	r3, r2, #28
 800729c:	bf44      	itt	mi
 800729e:	232b      	movmi	r3, #43	@ 0x2b
 80072a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072a4:	f89a 3000 	ldrb.w	r3, [sl]
 80072a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072aa:	d015      	beq.n	80072d8 <_vfiprintf_r+0x120>
 80072ac:	4654      	mov	r4, sl
 80072ae:	2000      	movs	r0, #0
 80072b0:	f04f 0c0a 	mov.w	ip, #10
 80072b4:	9a07      	ldr	r2, [sp, #28]
 80072b6:	4621      	mov	r1, r4
 80072b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072bc:	3b30      	subs	r3, #48	@ 0x30
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d94b      	bls.n	800735a <_vfiprintf_r+0x1a2>
 80072c2:	b1b0      	cbz	r0, 80072f2 <_vfiprintf_r+0x13a>
 80072c4:	9207      	str	r2, [sp, #28]
 80072c6:	e014      	b.n	80072f2 <_vfiprintf_r+0x13a>
 80072c8:	eba0 0308 	sub.w	r3, r0, r8
 80072cc:	fa09 f303 	lsl.w	r3, r9, r3
 80072d0:	4313      	orrs	r3, r2
 80072d2:	46a2      	mov	sl, r4
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	e7d2      	b.n	800727e <_vfiprintf_r+0xc6>
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	1d19      	adds	r1, r3, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	9103      	str	r1, [sp, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfbb      	ittet	lt
 80072e4:	425b      	neglt	r3, r3
 80072e6:	f042 0202 	orrlt.w	r2, r2, #2
 80072ea:	9307      	strge	r3, [sp, #28]
 80072ec:	9307      	strlt	r3, [sp, #28]
 80072ee:	bfb8      	it	lt
 80072f0:	9204      	strlt	r2, [sp, #16]
 80072f2:	7823      	ldrb	r3, [r4, #0]
 80072f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80072f6:	d10a      	bne.n	800730e <_vfiprintf_r+0x156>
 80072f8:	7863      	ldrb	r3, [r4, #1]
 80072fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80072fc:	d132      	bne.n	8007364 <_vfiprintf_r+0x1ac>
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	3402      	adds	r4, #2
 8007302:	1d1a      	adds	r2, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	9203      	str	r2, [sp, #12]
 8007308:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80073d8 <_vfiprintf_r+0x220>
 8007312:	2203      	movs	r2, #3
 8007314:	4650      	mov	r0, sl
 8007316:	7821      	ldrb	r1, [r4, #0]
 8007318:	f7fe f96f 	bl	80055fa <memchr>
 800731c:	b138      	cbz	r0, 800732e <_vfiprintf_r+0x176>
 800731e:	2240      	movs	r2, #64	@ 0x40
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	eba0 000a 	sub.w	r0, r0, sl
 8007326:	4082      	lsls	r2, r0
 8007328:	4313      	orrs	r3, r2
 800732a:	3401      	adds	r4, #1
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007332:	2206      	movs	r2, #6
 8007334:	4829      	ldr	r0, [pc, #164]	@ (80073dc <_vfiprintf_r+0x224>)
 8007336:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800733a:	f7fe f95e 	bl	80055fa <memchr>
 800733e:	2800      	cmp	r0, #0
 8007340:	d03f      	beq.n	80073c2 <_vfiprintf_r+0x20a>
 8007342:	4b27      	ldr	r3, [pc, #156]	@ (80073e0 <_vfiprintf_r+0x228>)
 8007344:	bb1b      	cbnz	r3, 800738e <_vfiprintf_r+0x1d6>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	3307      	adds	r3, #7
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	3308      	adds	r3, #8
 8007350:	9303      	str	r3, [sp, #12]
 8007352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007354:	443b      	add	r3, r7
 8007356:	9309      	str	r3, [sp, #36]	@ 0x24
 8007358:	e76a      	b.n	8007230 <_vfiprintf_r+0x78>
 800735a:	460c      	mov	r4, r1
 800735c:	2001      	movs	r0, #1
 800735e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007362:	e7a8      	b.n	80072b6 <_vfiprintf_r+0xfe>
 8007364:	2300      	movs	r3, #0
 8007366:	f04f 0c0a 	mov.w	ip, #10
 800736a:	4619      	mov	r1, r3
 800736c:	3401      	adds	r4, #1
 800736e:	9305      	str	r3, [sp, #20]
 8007370:	4620      	mov	r0, r4
 8007372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007376:	3a30      	subs	r2, #48	@ 0x30
 8007378:	2a09      	cmp	r2, #9
 800737a:	d903      	bls.n	8007384 <_vfiprintf_r+0x1cc>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0c6      	beq.n	800730e <_vfiprintf_r+0x156>
 8007380:	9105      	str	r1, [sp, #20]
 8007382:	e7c4      	b.n	800730e <_vfiprintf_r+0x156>
 8007384:	4604      	mov	r4, r0
 8007386:	2301      	movs	r3, #1
 8007388:	fb0c 2101 	mla	r1, ip, r1, r2
 800738c:	e7f0      	b.n	8007370 <_vfiprintf_r+0x1b8>
 800738e:	ab03      	add	r3, sp, #12
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	462a      	mov	r2, r5
 8007394:	4630      	mov	r0, r6
 8007396:	4b13      	ldr	r3, [pc, #76]	@ (80073e4 <_vfiprintf_r+0x22c>)
 8007398:	a904      	add	r1, sp, #16
 800739a:	f7fd fbcb 	bl	8004b34 <_printf_float>
 800739e:	4607      	mov	r7, r0
 80073a0:	1c78      	adds	r0, r7, #1
 80073a2:	d1d6      	bne.n	8007352 <_vfiprintf_r+0x19a>
 80073a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d405      	bmi.n	80073b6 <_vfiprintf_r+0x1fe>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d402      	bmi.n	80073b6 <_vfiprintf_r+0x1fe>
 80073b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073b2:	f7fe f921 	bl	80055f8 <__retarget_lock_release_recursive>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	065b      	lsls	r3, r3, #25
 80073ba:	f53f af1f 	bmi.w	80071fc <_vfiprintf_r+0x44>
 80073be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073c0:	e71e      	b.n	8007200 <_vfiprintf_r+0x48>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	462a      	mov	r2, r5
 80073c8:	4630      	mov	r0, r6
 80073ca:	4b06      	ldr	r3, [pc, #24]	@ (80073e4 <_vfiprintf_r+0x22c>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	f7fd fe4f 	bl	8005070 <_printf_i>
 80073d2:	e7e4      	b.n	800739e <_vfiprintf_r+0x1e6>
 80073d4:	080079f0 	.word	0x080079f0
 80073d8:	080079f6 	.word	0x080079f6
 80073dc:	080079fa 	.word	0x080079fa
 80073e0:	08004b35 	.word	0x08004b35
 80073e4:	08007195 	.word	0x08007195

080073e8 <__swbuf_r>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	460e      	mov	r6, r1
 80073ec:	4614      	mov	r4, r2
 80073ee:	4605      	mov	r5, r0
 80073f0:	b118      	cbz	r0, 80073fa <__swbuf_r+0x12>
 80073f2:	6a03      	ldr	r3, [r0, #32]
 80073f4:	b90b      	cbnz	r3, 80073fa <__swbuf_r+0x12>
 80073f6:	f7fd ffe7 	bl	80053c8 <__sinit>
 80073fa:	69a3      	ldr	r3, [r4, #24]
 80073fc:	60a3      	str	r3, [r4, #8]
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	071a      	lsls	r2, r3, #28
 8007402:	d501      	bpl.n	8007408 <__swbuf_r+0x20>
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	b943      	cbnz	r3, 800741a <__swbuf_r+0x32>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f000 f82a 	bl	8007464 <__swsetup_r>
 8007410:	b118      	cbz	r0, 800741a <__swbuf_r+0x32>
 8007412:	f04f 37ff 	mov.w	r7, #4294967295
 8007416:	4638      	mov	r0, r7
 8007418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	6922      	ldr	r2, [r4, #16]
 800741e:	b2f6      	uxtb	r6, r6
 8007420:	1a98      	subs	r0, r3, r2
 8007422:	6963      	ldr	r3, [r4, #20]
 8007424:	4637      	mov	r7, r6
 8007426:	4283      	cmp	r3, r0
 8007428:	dc05      	bgt.n	8007436 <__swbuf_r+0x4e>
 800742a:	4621      	mov	r1, r4
 800742c:	4628      	mov	r0, r5
 800742e:	f7ff fda9 	bl	8006f84 <_fflush_r>
 8007432:	2800      	cmp	r0, #0
 8007434:	d1ed      	bne.n	8007412 <__swbuf_r+0x2a>
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	3b01      	subs	r3, #1
 800743a:	60a3      	str	r3, [r4, #8]
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	701e      	strb	r6, [r3, #0]
 8007444:	6962      	ldr	r2, [r4, #20]
 8007446:	1c43      	adds	r3, r0, #1
 8007448:	429a      	cmp	r2, r3
 800744a:	d004      	beq.n	8007456 <__swbuf_r+0x6e>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	07db      	lsls	r3, r3, #31
 8007450:	d5e1      	bpl.n	8007416 <__swbuf_r+0x2e>
 8007452:	2e0a      	cmp	r6, #10
 8007454:	d1df      	bne.n	8007416 <__swbuf_r+0x2e>
 8007456:	4621      	mov	r1, r4
 8007458:	4628      	mov	r0, r5
 800745a:	f7ff fd93 	bl	8006f84 <_fflush_r>
 800745e:	2800      	cmp	r0, #0
 8007460:	d0d9      	beq.n	8007416 <__swbuf_r+0x2e>
 8007462:	e7d6      	b.n	8007412 <__swbuf_r+0x2a>

08007464 <__swsetup_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4b29      	ldr	r3, [pc, #164]	@ (800750c <__swsetup_r+0xa8>)
 8007468:	4605      	mov	r5, r0
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	460c      	mov	r4, r1
 800746e:	b118      	cbz	r0, 8007478 <__swsetup_r+0x14>
 8007470:	6a03      	ldr	r3, [r0, #32]
 8007472:	b90b      	cbnz	r3, 8007478 <__swsetup_r+0x14>
 8007474:	f7fd ffa8 	bl	80053c8 <__sinit>
 8007478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747c:	0719      	lsls	r1, r3, #28
 800747e:	d422      	bmi.n	80074c6 <__swsetup_r+0x62>
 8007480:	06da      	lsls	r2, r3, #27
 8007482:	d407      	bmi.n	8007494 <__swsetup_r+0x30>
 8007484:	2209      	movs	r2, #9
 8007486:	602a      	str	r2, [r5, #0]
 8007488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	e033      	b.n	80074fc <__swsetup_r+0x98>
 8007494:	0758      	lsls	r0, r3, #29
 8007496:	d512      	bpl.n	80074be <__swsetup_r+0x5a>
 8007498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800749a:	b141      	cbz	r1, 80074ae <__swsetup_r+0x4a>
 800749c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <__swsetup_r+0x46>
 80074a4:	4628      	mov	r0, r5
 80074a6:	f7fe ff17 	bl	80062d8 <_free_r>
 80074aa:	2300      	movs	r3, #0
 80074ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f043 0308 	orr.w	r3, r3, #8
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	b94b      	cbnz	r3, 80074de <__swsetup_r+0x7a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d4:	d003      	beq.n	80074de <__swsetup_r+0x7a>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 f882 	bl	80075e2 <__smakebuf_r>
 80074de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e2:	f013 0201 	ands.w	r2, r3, #1
 80074e6:	d00a      	beq.n	80074fe <__swsetup_r+0x9a>
 80074e8:	2200      	movs	r2, #0
 80074ea:	60a2      	str	r2, [r4, #8]
 80074ec:	6962      	ldr	r2, [r4, #20]
 80074ee:	4252      	negs	r2, r2
 80074f0:	61a2      	str	r2, [r4, #24]
 80074f2:	6922      	ldr	r2, [r4, #16]
 80074f4:	b942      	cbnz	r2, 8007508 <__swsetup_r+0xa4>
 80074f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074fa:	d1c5      	bne.n	8007488 <__swsetup_r+0x24>
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	0799      	lsls	r1, r3, #30
 8007500:	bf58      	it	pl
 8007502:	6962      	ldrpl	r2, [r4, #20]
 8007504:	60a2      	str	r2, [r4, #8]
 8007506:	e7f4      	b.n	80074f2 <__swsetup_r+0x8e>
 8007508:	2000      	movs	r0, #0
 800750a:	e7f7      	b.n	80074fc <__swsetup_r+0x98>
 800750c:	2000005c 	.word	0x2000005c

08007510 <_raise_r>:
 8007510:	291f      	cmp	r1, #31
 8007512:	b538      	push	{r3, r4, r5, lr}
 8007514:	4605      	mov	r5, r0
 8007516:	460c      	mov	r4, r1
 8007518:	d904      	bls.n	8007524 <_raise_r+0x14>
 800751a:	2316      	movs	r3, #22
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007526:	b112      	cbz	r2, 800752e <_raise_r+0x1e>
 8007528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800752c:	b94b      	cbnz	r3, 8007542 <_raise_r+0x32>
 800752e:	4628      	mov	r0, r5
 8007530:	f000 f830 	bl	8007594 <_getpid_r>
 8007534:	4622      	mov	r2, r4
 8007536:	4601      	mov	r1, r0
 8007538:	4628      	mov	r0, r5
 800753a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753e:	f000 b817 	b.w	8007570 <_kill_r>
 8007542:	2b01      	cmp	r3, #1
 8007544:	d00a      	beq.n	800755c <_raise_r+0x4c>
 8007546:	1c59      	adds	r1, r3, #1
 8007548:	d103      	bne.n	8007552 <_raise_r+0x42>
 800754a:	2316      	movs	r3, #22
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	2001      	movs	r0, #1
 8007550:	e7e7      	b.n	8007522 <_raise_r+0x12>
 8007552:	2100      	movs	r1, #0
 8007554:	4620      	mov	r0, r4
 8007556:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800755a:	4798      	blx	r3
 800755c:	2000      	movs	r0, #0
 800755e:	e7e0      	b.n	8007522 <_raise_r+0x12>

08007560 <raise>:
 8007560:	4b02      	ldr	r3, [pc, #8]	@ (800756c <raise+0xc>)
 8007562:	4601      	mov	r1, r0
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f7ff bfd3 	b.w	8007510 <_raise_r>
 800756a:	bf00      	nop
 800756c:	2000005c 	.word	0x2000005c

08007570 <_kill_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	2300      	movs	r3, #0
 8007574:	4d06      	ldr	r5, [pc, #24]	@ (8007590 <_kill_r+0x20>)
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7fa fb29 	bl	8001bd4 <_kill>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d102      	bne.n	800758c <_kill_r+0x1c>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b103      	cbz	r3, 800758c <_kill_r+0x1c>
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	20001418 	.word	0x20001418

08007594 <_getpid_r>:
 8007594:	f7fa bb17 	b.w	8001bc6 <_getpid>

08007598 <__swhatbuf_r>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	460c      	mov	r4, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	4615      	mov	r5, r2
 80075a2:	2900      	cmp	r1, #0
 80075a4:	461e      	mov	r6, r3
 80075a6:	b096      	sub	sp, #88	@ 0x58
 80075a8:	da0c      	bge.n	80075c4 <__swhatbuf_r+0x2c>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	2100      	movs	r1, #0
 80075ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075b2:	bf14      	ite	ne
 80075b4:	2340      	movne	r3, #64	@ 0x40
 80075b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075ba:	2000      	movs	r0, #0
 80075bc:	6031      	str	r1, [r6, #0]
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	b016      	add	sp, #88	@ 0x58
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	466a      	mov	r2, sp
 80075c6:	f000 f849 	bl	800765c <_fstat_r>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	dbed      	blt.n	80075aa <__swhatbuf_r+0x12>
 80075ce:	9901      	ldr	r1, [sp, #4]
 80075d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075d8:	4259      	negs	r1, r3
 80075da:	4159      	adcs	r1, r3
 80075dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075e0:	e7eb      	b.n	80075ba <__swhatbuf_r+0x22>

080075e2 <__smakebuf_r>:
 80075e2:	898b      	ldrh	r3, [r1, #12]
 80075e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075e6:	079d      	lsls	r5, r3, #30
 80075e8:	4606      	mov	r6, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	d507      	bpl.n	80075fe <__smakebuf_r+0x1c>
 80075ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	2301      	movs	r3, #1
 80075f8:	6163      	str	r3, [r4, #20]
 80075fa:	b003      	add	sp, #12
 80075fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075fe:	466a      	mov	r2, sp
 8007600:	ab01      	add	r3, sp, #4
 8007602:	f7ff ffc9 	bl	8007598 <__swhatbuf_r>
 8007606:	9f00      	ldr	r7, [sp, #0]
 8007608:	4605      	mov	r5, r0
 800760a:	4639      	mov	r1, r7
 800760c:	4630      	mov	r0, r6
 800760e:	f7fe fed5 	bl	80063bc <_malloc_r>
 8007612:	b948      	cbnz	r0, 8007628 <__smakebuf_r+0x46>
 8007614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007618:	059a      	lsls	r2, r3, #22
 800761a:	d4ee      	bmi.n	80075fa <__smakebuf_r+0x18>
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	f043 0302 	orr.w	r3, r3, #2
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	e7e2      	b.n	80075ee <__smakebuf_r+0xc>
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800762e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	6020      	str	r0, [r4, #0]
 8007638:	b15b      	cbz	r3, 8007652 <__smakebuf_r+0x70>
 800763a:	4630      	mov	r0, r6
 800763c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007640:	f000 f81e 	bl	8007680 <_isatty_r>
 8007644:	b128      	cbz	r0, 8007652 <__smakebuf_r+0x70>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f023 0303 	bic.w	r3, r3, #3
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	431d      	orrs	r5, r3
 8007656:	81a5      	strh	r5, [r4, #12]
 8007658:	e7cf      	b.n	80075fa <__smakebuf_r+0x18>
	...

0800765c <_fstat_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	2300      	movs	r3, #0
 8007660:	4d06      	ldr	r5, [pc, #24]	@ (800767c <_fstat_r+0x20>)
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	f7fa fb12 	bl	8001c92 <_fstat>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d102      	bne.n	8007678 <_fstat_r+0x1c>
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	b103      	cbz	r3, 8007678 <_fstat_r+0x1c>
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	bf00      	nop
 800767c:	20001418 	.word	0x20001418

08007680 <_isatty_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	2300      	movs	r3, #0
 8007684:	4d05      	ldr	r5, [pc, #20]	@ (800769c <_isatty_r+0x1c>)
 8007686:	4604      	mov	r4, r0
 8007688:	4608      	mov	r0, r1
 800768a:	602b      	str	r3, [r5, #0]
 800768c:	f7fa fb10 	bl	8001cb0 <_isatty>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_isatty_r+0x1a>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_isatty_r+0x1a>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	20001418 	.word	0x20001418

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
