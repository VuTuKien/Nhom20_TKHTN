
Co-operative Scheduling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008b18  08008b18  00009b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  0000a218  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff0  08008ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff8  08008ff8  0000a218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff8  08008ff8  00009ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ffc  08008ffc  00009ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08009000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f50  20000218  08009218  0000a218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002168  08009218  0000b168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f4e  00000000  00000000  0000a241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7e  00000000  00000000  0001f18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00022110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f56  00000000  00000000  000234b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004121  00000000  00000000  0002440e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015861  00000000  00000000  0002852f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c32  00000000  00000000  0003dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d39c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  000d3a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d9e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b00 	.word	0x08008b00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	08008b00 	.word	0x08008b00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <microDelay+0x2c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000f96:	bf00      	nop
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <microDelay+0x2c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3f9      	bcc.n	8000f98 <microDelay+0x14>
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000288 	.word	0x20000288

08000fb4 <DisplayDigit>:
void DisplayDigit(uint8_t digit, uint8_t position) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
	    // T?t t?t c? các LED (ngan trùng l?p)
	    HAL_GPIO_WritePin(GPIOB, digitPins[0] | digitPins[1] | digitPins[2], GPIO_PIN_RESET);
 8000fc4:	4b35      	ldr	r3, [pc, #212]	@ (800109c <DisplayDigit+0xe8>)
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	4b34      	ldr	r3, [pc, #208]	@ (800109c <DisplayDigit+0xe8>)
 8000fca:	885b      	ldrh	r3, [r3, #2]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b32      	ldr	r3, [pc, #200]	@ (800109c <DisplayDigit+0xe8>)
 8000fd2:	889b      	ldrh	r3, [r3, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4830      	ldr	r0, [pc, #192]	@ (80010a0 <DisplayDigit+0xec>)
 8000fde:	f001 f97a 	bl	80022d6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2140      	movs	r1, #64	@ 0x40
 8000fe6:	482f      	ldr	r0, [pc, #188]	@ (80010a4 <DisplayDigit+0xf0>)
 8000fe8:	f001 f975 	bl	80022d6 <HAL_GPIO_WritePin>
	    uint8_t segments = digits[digit];
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a2e      	ldr	r2, [pc, #184]	@ (80010a8 <DisplayDigit+0xf4>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	72fb      	strb	r3, [r7, #11]
	    for (int i = 0; i < 7; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e023      	b.n	8001042 <DisplayDigit+0x8e>
	    	if (segments & (1 << i)) {
 8000ffa:	7afa      	ldrb	r2, [r7, #11]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	fa42 f303 	asr.w	r3, r2, r3
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00c      	beq.n	8001024 <DisplayDigit+0x70>
	    	            // N?u bit th? i là 1, b?t segment, t?c là n?i chân v?i GND (LOW)
	    	            HAL_GPIO_WritePin(segmentPorts[i], segmentPins[i], GPIO_PIN_SET);  // B?t
 800100a:	4a28      	ldr	r2, [pc, #160]	@ (80010ac <DisplayDigit+0xf8>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001012:	4a27      	ldr	r2, [pc, #156]	@ (80010b0 <DisplayDigit+0xfc>)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f001 f95a 	bl	80022d6 <HAL_GPIO_WritePin>
 8001022:	e00b      	b.n	800103c <DisplayDigit+0x88>
	    	        } else {
	    	            // N?u bit th? i là 0, t?t segment, t?c là n?i chân v?i VCC (HIGH)
	    	            HAL_GPIO_WritePin(segmentPorts[i], segmentPins[i], GPIO_PIN_RESET);  // T?t
 8001024:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <DisplayDigit+0xf8>)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800102c:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <DisplayDigit+0xfc>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001034:	2200      	movs	r2, #0
 8001036:	4619      	mov	r1, r3
 8001038:	f001 f94d 	bl	80022d6 <HAL_GPIO_WritePin>
	    for (int i = 0; i < 7; i++) {
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3301      	adds	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b06      	cmp	r3, #6
 8001046:	ddd8      	ble.n	8000ffa <DisplayDigit+0x46>
	    	        }
	    }

	    // B?t LED 7 thanh theo v? trí
	    if (position == 0) HAL_GPIO_WritePin(digitPorts[0], digitPins[0], GPIO_PIN_SET); // LED1
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d107      	bne.n	800105e <DisplayDigit+0xaa>
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <DisplayDigit+0x100>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <DisplayDigit+0xe8>)
 8001054:	8811      	ldrh	r1, [r2, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f001 f93c 	bl	80022d6 <HAL_GPIO_WritePin>
	    if (position == 1){ HAL_GPIO_WritePin(digitPorts[1], digitPins[1], GPIO_PIN_SET);
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10c      	bne.n	800107e <DisplayDigit+0xca>
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <DisplayDigit+0x100>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a0c      	ldr	r2, [pc, #48]	@ (800109c <DisplayDigit+0xe8>)
 800106a:	8851      	ldrh	r1, [r2, #2]
 800106c:	2201      	movs	r2, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f001 f931 	bl	80022d6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);// LED2
 8001074:	2201      	movs	r2, #1
 8001076:	2140      	movs	r1, #64	@ 0x40
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <DisplayDigit+0xf0>)
 800107a:	f001 f92c 	bl	80022d6 <HAL_GPIO_WritePin>
	    }
	    if (position == 2) HAL_GPIO_WritePin(digitPorts[2], digitPins[2], GPIO_PIN_SET); // LED3
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d107      	bne.n	8001094 <DisplayDigit+0xe0>
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <DisplayDigit+0x100>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <DisplayDigit+0xe8>)
 800108a:	8891      	ldrh	r1, [r2, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	4618      	mov	r0, r3
 8001090:	f001 f921 	bl	80022d6 <HAL_GPIO_WritePin>
	}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000038 	.word	0x20000038
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40010800 	.word	0x40010800
 80010a8:	08008b98 	.word	0x08008b98
 80010ac:	20000000 	.word	0x20000000
 80010b0:	2000001c 	.word	0x2000001c
 80010b4:	2000002c 	.word	0x2000002c

080010b8 <DisplayNumber>:
	void DisplayNumber(uint16_t number) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
	    uint8_t hundreds = number / 100;        // L?y hàng tram
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <DisplayNumber+0x8c>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
	    uint8_t tens = (number / 10) % 10;     // L?y hàng ch?c
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <DisplayNumber+0x90>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <DisplayNumber+0x90>)
 80010de:	fba3 1302 	umull	r1, r3, r3, r2
 80010e2:	08d9      	lsrs	r1, r3, #3
 80010e4:	460b      	mov	r3, r1
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	73bb      	strb	r3, [r7, #14]
	    uint8_t units = number % 10;           // L?y hàng don v?
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <DisplayNumber+0x90>)
 80010f6:	fba3 1302 	umull	r1, r3, r3, r2
 80010fa:	08d9      	lsrs	r1, r3, #3
 80010fc:	460b      	mov	r3, r1
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	737b      	strb	r3, [r7, #13]

	    // Hi?n th? t?ng ch? s? v?i quét nhanh
	    DisplayDigit(hundreds, 0);
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff50 	bl	8000fb4 <DisplayDigit>
	    HAL_Delay(1); // D?ng ng?n d? hi?n th?
 8001114:	2001      	movs	r0, #1
 8001116:	f000 fe3b 	bl	8001d90 <HAL_Delay>
	    DisplayDigit(tens, 1);
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	2101      	movs	r1, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff48 	bl	8000fb4 <DisplayDigit>
	    HAL_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 fe33 	bl	8001d90 <HAL_Delay>
	    DisplayDigit(units, 2);
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	2102      	movs	r1, #2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff40 	bl	8000fb4 <DisplayDigit>
	    HAL_Delay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f000 fe2b 	bl	8001d90 <HAL_Delay>
	}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	51eb851f 	.word	0x51eb851f
 8001148:	cccccccd 	.word	0xcccccccd

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f000 fdbc 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f85c 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f000 f910 	bl	800137c <MX_GPIO_Init>
  MX_TIM1_Init();
 800115c:	f000 f894 	bl	8001288 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001160:	f000 f8e2 	bl	8001328 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001164:	4819      	ldr	r0, [pc, #100]	@ (80011cc <main+0x80>)
 8001166:	f001 fd2f 	bl	8002bc8 <HAL_TIM_Base_Start>
  HAL_UART_Init(&huart1);
 800116a:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <main+0x84>)
 800116c:	f001 ff94 	bl	8003098 <HAL_UART_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001170:	f002 f962 	bl	8003438 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001174:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <main+0x88>)
 8001176:	2100      	movs	r1, #0
 8001178:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <main+0x8c>)
 800117a:	f002 f9c3 	bl	8003504 <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <main+0x90>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001184:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <main+0x94>)
 8001186:	2100      	movs	r1, #0
 8001188:	4816      	ldr	r0, [pc, #88]	@ (80011e4 <main+0x98>)
 800118a:	f002 f9bb 	bl	8003504 <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a15      	ldr	r2, [pc, #84]	@ (80011e8 <main+0x9c>)
 8001192:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001194:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <main+0xa0>)
 8001196:	2100      	movs	r1, #0
 8001198:	4815      	ldr	r0, [pc, #84]	@ (80011f0 <main+0xa4>)
 800119a:	f002 f9b3 	bl	8003504 <osThreadNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <main+0xa8>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 80011a4:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <main+0xac>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4814      	ldr	r0, [pc, #80]	@ (80011fc <main+0xb0>)
 80011aa:	f002 f9ab 	bl	8003504 <osThreadNew>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <main+0xb4>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 80011b4:	4a13      	ldr	r2, [pc, #76]	@ (8001204 <main+0xb8>)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <main+0xbc>)
 80011ba:	f002 f9a3 	bl	8003504 <osThreadNew>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a12      	ldr	r2, [pc, #72]	@ (800120c <main+0xc0>)
 80011c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011c4:	f002 f96a 	bl	800349c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <main+0x7c>
 80011cc:	20000288 	.word	0x20000288
 80011d0:	200002d0 	.word	0x200002d0
 80011d4:	08008ba4 	.word	0x08008ba4
 80011d8:	08001535 	.word	0x08001535
 80011dc:	20000318 	.word	0x20000318
 80011e0:	08008bc8 	.word	0x08008bc8
 80011e4:	08001809 	.word	0x08001809
 80011e8:	2000031c 	.word	0x2000031c
 80011ec:	08008bec 	.word	0x08008bec
 80011f0:	0800188d 	.word	0x0800188d
 80011f4:	20000320 	.word	0x20000320
 80011f8:	08008c10 	.word	0x08008c10
 80011fc:	0800193d 	.word	0x0800193d
 8001200:	20000324 	.word	0x20000324
 8001204:	08008c34 	.word	0x08008c34
 8001208:	08001949 	.word	0x08001949
 800120c:	20000328 	.word	0x20000328

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	@ 0x40
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2228      	movs	r2, #40	@ 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fb9d 	bl	800695e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123a:	2310      	movs	r3, #16
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f85e 	bl	8002308 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001252:	f000 fb7f 	bl	8001954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f001 facc 	bl	800280c <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800127a:	f000 fb6b 	bl	8001954 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3740      	adds	r7, #64	@ 0x40
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001324 <MX_TIM1_Init+0x9c>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012ac:	2247      	movs	r2, #71	@ 0x47
 80012ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c4:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d0:	4813      	ldr	r0, [pc, #76]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012d2:	f001 fc29 	bl	8002b28 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 fb3a 	bl	8001954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <MX_TIM1_Init+0x98>)
 80012ee:	f001 fcb5 	bl	8002c5c <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012f8:	f000 fb2c 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_TIM1_Init+0x98>)
 800130a:	f001 fe67 	bl	8002fdc <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001314:	f000 fb1e 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000288 	.word	0x20000288
 8001324:	40012c00 	.word	0x40012c00

08001328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <MX_USART1_UART_Init+0x50>)
 8001330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_USART1_UART_Init+0x4c>)
 8001360:	f001 fe9a 	bl	8003098 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800136a:	f000 faf3 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200002d0 	.word	0x200002d0
 8001378:	40013800 	.word	0x40013800

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <MX_GPIO_Init+0xb4>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a26      	ldr	r2, [pc, #152]	@ (8001430 <MX_GPIO_Init+0xb4>)
 8001396:	f043 0320 	orr.w	r3, r3, #32
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <MX_GPIO_Init+0xb4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a20      	ldr	r2, [pc, #128]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_GPIO_Init+0xb4>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80013d8:	2200      	movs	r2, #0
 80013da:	21fe      	movs	r1, #254	@ 0xfe
 80013dc:	4815      	ldr	r0, [pc, #84]	@ (8001434 <MX_GPIO_Init+0xb8>)
 80013de:	f000 ff7a 	bl	80022d6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80013e2:	2200      	movs	r2, #0
 80013e4:	f640 6103 	movw	r1, #3587	@ 0xe03
 80013e8:	4813      	ldr	r0, [pc, #76]	@ (8001438 <MX_GPIO_Init+0xbc>)
 80013ea:	f000 ff74 	bl	80022d6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80013ee:	23fe      	movs	r3, #254	@ 0xfe
 80013f0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <MX_GPIO_Init+0xb8>)
 8001406:	f000 fdcb 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800140a:	f640 6303 	movw	r3, #3587	@ 0xe03
 800140e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_GPIO_Init+0xbc>)
 8001424:	f000 fdbc 	bl	8001fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00

0800143c <DHT22_Start.0>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
	uint8_t DHT22_Start (void)
		{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	f8c7 c004 	str.w	ip, [r7, #4]
		  uint8_t Response = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	77fb      	strb	r3, [r7, #31]
		  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
		  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800145c:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	613b      	str	r3, [r7, #16]
		  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
		  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	482d      	ldr	r0, [pc, #180]	@ (8001528 <DHT22_Start.0+0xec>)
 8001472:	f000 fd95 	bl	8001fa0 <HAL_GPIO_Init>
		  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800147c:	482a      	ldr	r0, [pc, #168]	@ (8001528 <DHT22_Start.0+0xec>)
 800147e:	f000 ff2a 	bl	80022d6 <HAL_GPIO_WritePin>
		  microDelay (1300);   // wait for 1300us
 8001482:	f240 5014 	movw	r0, #1300	@ 0x514
 8001486:	f7ff fd7d 	bl	8000f84 <microDelay>
		  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001490:	4825      	ldr	r0, [pc, #148]	@ (8001528 <DHT22_Start.0+0xec>)
 8001492:	f000 ff20 	bl	80022d6 <HAL_GPIO_WritePin>
		  microDelay (30);   // wait for 30us
 8001496:	201e      	movs	r0, #30
 8001498:	f7ff fd74 	bl	8000f84 <microDelay>
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
		  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	481f      	ldr	r0, [pc, #124]	@ (8001528 <DHT22_Start.0+0xec>)
 80014ac:	f000 fd78 	bl	8001fa0 <HAL_GPIO_Init>
		  microDelay (40);
 80014b0:	2028      	movs	r0, #40	@ 0x28
 80014b2:	f7ff fd67 	bl	8000f84 <microDelay>
		  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 80014b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ba:	481b      	ldr	r0, [pc, #108]	@ (8001528 <DHT22_Start.0+0xec>)
 80014bc:	f000 fef4 	bl	80022a8 <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10c      	bne.n	80014e0 <DHT22_Start.0+0xa4>
		  {
		    microDelay (80);
 80014c6:	2050      	movs	r0, #80	@ 0x50
 80014c8:	f7ff fd5c 	bl	8000f84 <microDelay>
		    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 80014cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d0:	4815      	ldr	r0, [pc, #84]	@ (8001528 <DHT22_Start.0+0xec>)
 80014d2:	f000 fee9 	bl	80022a8 <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <DHT22_Start.0+0xa4>
 80014dc:	2301      	movs	r3, #1
 80014de:	77fb      	strb	r3, [r7, #31]
		  }
		  pMillis = HAL_GetTick();
 80014e0:	f000 fc4c 	bl	8001d7c <HAL_GetTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a11      	ldr	r2, [pc, #68]	@ (800152c <DHT22_Start.0+0xf0>)
 80014e8:	6013      	str	r3, [r2, #0]
		  cMillis = HAL_GetTick();
 80014ea:	f000 fc47 	bl	8001d7c <HAL_GetTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001530 <DHT22_Start.0+0xf4>)
 80014f2:	6013      	str	r3, [r2, #0]
		  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80014f4:	e004      	b.n	8001500 <DHT22_Start.0+0xc4>
		  {
		    cMillis = HAL_GetTick();
 80014f6:	f000 fc41 	bl	8001d7c <HAL_GetTick>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <DHT22_Start.0+0xf4>)
 80014fe:	6013      	str	r3, [r2, #0]
		  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001504:	4808      	ldr	r0, [pc, #32]	@ (8001528 <DHT22_Start.0+0xec>)
 8001506:	f000 fecf 	bl	80022a8 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <DHT22_Start.0+0xe2>
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <DHT22_Start.0+0xf0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1c9a      	adds	r2, r3, #2
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <DHT22_Start.0+0xf4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d8eb      	bhi.n	80014f6 <DHT22_Start.0+0xba>
		  }
		  return Response;
 800151e:	7ffb      	ldrb	r3, [r7, #31]
		}
 8001520:	4618      	mov	r0, r3
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40010c00 	.word	0x40010c00
 800152c:	2000023c 	.word	0x2000023c
 8001530:	20000240 	.word	0x20000240

08001534 <StartDefaultTask>:
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
void StartDefaultTask(void *argument)
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	60fb      	str	r3, [r7, #12]
		  return b;
		}

  /* Infinite loop */
  for(;;)
  {if(DHT22_Start())
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	469c      	mov	ip, r3
 8001548:	f7ff ff78 	bl	800143c <DHT22_Start.0>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80bb 	beq.w	80016ca <StartDefaultTask+0x196>
  {
    RH1 = DHT22_Read(); // First 8bits of humidity
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	469c      	mov	ip, r3
 800155a:	f000 f8d7 	bl	800170c <DHT22_Read.1>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b5c      	ldr	r3, [pc, #368]	@ (80016d4 <StartDefaultTask+0x1a0>)
 8001564:	701a      	strb	r2, [r3, #0]
    RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	469c      	mov	ip, r3
 800156c:	f000 f8ce 	bl	800170c <DHT22_Read.1>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b58      	ldr	r3, [pc, #352]	@ (80016d8 <StartDefaultTask+0x1a4>)
 8001576:	701a      	strb	r2, [r3, #0]
    TC1 = DHT22_Read(); // First 8bits of Celsius
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	469c      	mov	ip, r3
 800157e:	f000 f8c5 	bl	800170c <DHT22_Read.1>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b55      	ldr	r3, [pc, #340]	@ (80016dc <StartDefaultTask+0x1a8>)
 8001588:	701a      	strb	r2, [r3, #0]
    TC2 = DHT22_Read(); // Second 8bits of Celsius
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	469c      	mov	ip, r3
 8001590:	f000 f8bc 	bl	800170c <DHT22_Read.1>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b51      	ldr	r3, [pc, #324]	@ (80016e0 <StartDefaultTask+0x1ac>)
 800159a:	701a      	strb	r2, [r3, #0]
    SUM = DHT22_Read(); // Check sum
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	469c      	mov	ip, r3
 80015a2:	f000 f8b3 	bl	800170c <DHT22_Read.1>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <StartDefaultTask+0x1b0>)
 80015ac:	701a      	strb	r2, [r3, #0]
    CHECK = RH1 + RH2 + TC1 + TC2;
 80015ae:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <StartDefaultTask+0x1a0>)
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	4b49      	ldr	r3, [pc, #292]	@ (80016d8 <StartDefaultTask+0x1a4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b48      	ldr	r3, [pc, #288]	@ (80016dc <StartDefaultTask+0x1a8>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <StartDefaultTask+0x1ac>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <StartDefaultTask+0x1b4>)
 80015cc:	701a      	strb	r2, [r3, #0]
    if (CHECK == SUM)
 80015ce:	4b46      	ldr	r3, [pc, #280]	@ (80016e8 <StartDefaultTask+0x1b4>)
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	4b44      	ldr	r3, [pc, #272]	@ (80016e4 <StartDefaultTask+0x1b0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d177      	bne.n	80016ca <StartDefaultTask+0x196>
    {
      if (TC1>127) // If TC1=10000000, negative temperature
 80015da:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <StartDefaultTask+0x1a8>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da1d      	bge.n	8001620 <StartDefaultTask+0xec>
      {
        tCelsius = (float)TC2/10*(-1);
 80015e4:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <StartDefaultTask+0x1ac>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fb03 	bl	8000bf4 <__aeabi_ui2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	493e      	ldr	r1, [pc, #248]	@ (80016ec <StartDefaultTask+0x1b8>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc0a 	bl	8000e0c <__aeabi_fdiv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015fe:	4a3c      	ldr	r2, [pc, #240]	@ (80016f0 <StartDefaultTask+0x1bc>)
 8001600:	6013      	str	r3, [r2, #0]
		T=tCelsius*10;
 8001602:	4b3b      	ldr	r3, [pc, #236]	@ (80016f0 <StartDefaultTask+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4939      	ldr	r1, [pc, #228]	@ (80016ec <StartDefaultTask+0x1b8>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fb4b 	bl	8000ca4 <__aeabi_fmul>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fc97 	bl	8000f44 <__aeabi_f2uiz>
 8001616:	4603      	mov	r3, r0
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b36      	ldr	r3, [pc, #216]	@ (80016f4 <StartDefaultTask+0x1c0>)
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	e01f      	b.n	8001660 <StartDefaultTask+0x12c>
      }
      else
      {
        tCelsius = (float)((TC1<<8)|TC2)/10;
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <StartDefaultTask+0x1a8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	4a2e      	ldr	r2, [pc, #184]	@ (80016e0 <StartDefaultTask+0x1ac>)
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	4313      	orrs	r3, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fae5 	bl	8000bfc <__aeabi_i2f>
 8001632:	4603      	mov	r3, r0
 8001634:	492d      	ldr	r1, [pc, #180]	@ (80016ec <StartDefaultTask+0x1b8>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fbe8 	bl	8000e0c <__aeabi_fdiv>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <StartDefaultTask+0x1bc>)
 8001642:	601a      	str	r2, [r3, #0]
		T=tCelsius*10;
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <StartDefaultTask+0x1bc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4928      	ldr	r1, [pc, #160]	@ (80016ec <StartDefaultTask+0x1b8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fb2a 	bl	8000ca4 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fc76 	bl	8000f44 <__aeabi_f2uiz>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <StartDefaultTask+0x1c0>)
 800165e:	801a      	strh	r2, [r3, #0]
      }
      tFahrenheit = tCelsius * 9/5 + 32;
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <StartDefaultTask+0x1bc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4924      	ldr	r1, [pc, #144]	@ (80016f8 <StartDefaultTask+0x1c4>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb1c 	bl	8000ca4 <__aeabi_fmul>
 800166c:	4603      	mov	r3, r0
 800166e:	4923      	ldr	r1, [pc, #140]	@ (80016fc <StartDefaultTask+0x1c8>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fbcb 	bl	8000e0c <__aeabi_fdiv>
 8001676:	4603      	mov	r3, r0
 8001678:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fa09 	bl	8000a94 <__addsf3>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <StartDefaultTask+0x1cc>)
 8001688:	601a      	str	r2, [r3, #0]
      RH = (float) ((RH1<<8)|RH2)/10;
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <StartDefaultTask+0x1a0>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <StartDefaultTask+0x1a4>)
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fab0 	bl	8000bfc <__aeabi_i2f>
 800169c:	4603      	mov	r3, r0
 800169e:	4913      	ldr	r1, [pc, #76]	@ (80016ec <StartDefaultTask+0x1b8>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fbb3 	bl	8000e0c <__aeabi_fdiv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <StartDefaultTask+0x1d0>)
 80016ac:	601a      	str	r2, [r3, #0]
      H=RH*10;
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <StartDefaultTask+0x1d0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	490e      	ldr	r1, [pc, #56]	@ (80016ec <StartDefaultTask+0x1b8>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff faf5 	bl	8000ca4 <__aeabi_fmul>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fc41 	bl	8000f44 <__aeabi_f2uiz>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <StartDefaultTask+0x1d4>)
 80016c8:	801a      	strh	r2, [r3, #0]
    }
  }
		osDelay(1000);
 80016ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ce:	f001 ffc3 	bl	8003658 <osDelay>
  {if(DHT22_Start())
 80016d2:	e736      	b.n	8001542 <StartDefaultTask+0xe>
 80016d4:	20000234 	.word	0x20000234
 80016d8:	20000235 	.word	0x20000235
 80016dc:	20000236 	.word	0x20000236
 80016e0:	20000237 	.word	0x20000237
 80016e4:	20000238 	.word	0x20000238
 80016e8:	20000239 	.word	0x20000239
 80016ec:	41200000 	.word	0x41200000
 80016f0:	20000244 	.word	0x20000244
 80016f4:	20000282 	.word	0x20000282
 80016f8:	41100000 	.word	0x41100000
 80016fc:	40a00000 	.word	0x40a00000
 8001700:	20000248 	.word	0x20000248
 8001704:	2000024c 	.word	0x2000024c
 8001708:	20000284 	.word	0x20000284

0800170c <DHT22_Read.1>:
		{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	f8c7 c004 	str.w	ip, [r7, #4]
		  for (a=0;a<8;a++)
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e066      	b.n	80017ea <DHT22_Read.1+0xde>
		    pMillis = HAL_GetTick();
 800171c:	f000 fb2e 	bl	8001d7c <HAL_GetTick>
 8001720:	4603      	mov	r3, r0
 8001722:	4a36      	ldr	r2, [pc, #216]	@ (80017fc <DHT22_Read.1+0xf0>)
 8001724:	6013      	str	r3, [r2, #0]
		    cMillis = HAL_GetTick();
 8001726:	f000 fb29 	bl	8001d7c <HAL_GetTick>
 800172a:	4603      	mov	r3, r0
 800172c:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <DHT22_Read.1+0xf4>)
 800172e:	6013      	str	r3, [r2, #0]
		    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001730:	e004      	b.n	800173c <DHT22_Read.1+0x30>
		      cMillis = HAL_GetTick();
 8001732:	f000 fb23 	bl	8001d7c <HAL_GetTick>
 8001736:	4603      	mov	r3, r0
 8001738:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <DHT22_Read.1+0xf4>)
 800173a:	6013      	str	r3, [r2, #0]
		    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800173c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001740:	4830      	ldr	r0, [pc, #192]	@ (8001804 <DHT22_Read.1+0xf8>)
 8001742:	f000 fdb1 	bl	80022a8 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d106      	bne.n	800175a <DHT22_Read.1+0x4e>
 800174c:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <DHT22_Read.1+0xf0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1c9a      	adds	r2, r3, #2
 8001752:	4b2b      	ldr	r3, [pc, #172]	@ (8001800 <DHT22_Read.1+0xf4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d8eb      	bhi.n	8001732 <DHT22_Read.1+0x26>
		    microDelay (40);   // wait for 40 us
 800175a:	2028      	movs	r0, #40	@ 0x28
 800175c:	f7ff fc12 	bl	8000f84 <microDelay>
		    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001764:	4827      	ldr	r0, [pc, #156]	@ (8001804 <DHT22_Read.1+0xf8>)
 8001766:	f000 fd9f 	bl	80022a8 <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10e      	bne.n	800178e <DHT22_Read.1+0x82>
		      b&= ~(1<<(7-a));
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2201      	movs	r2, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	b25a      	sxtb	r2, r3
 8001782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001786:	4013      	ands	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	73bb      	strb	r3, [r7, #14]
 800178c:	e00b      	b.n	80017a6 <DHT22_Read.1+0x9a>
		      b|= (1<<(7-a));
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f1c3 0307 	rsb	r3, r3, #7
 8001794:	2201      	movs	r2, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	b25a      	sxtb	r2, r3
 800179c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	73bb      	strb	r3, [r7, #14]
		    pMillis = HAL_GetTick();
 80017a6:	f000 fae9 	bl	8001d7c <HAL_GetTick>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <DHT22_Read.1+0xf0>)
 80017ae:	6013      	str	r3, [r2, #0]
		    cMillis = HAL_GetTick();
 80017b0:	f000 fae4 	bl	8001d7c <HAL_GetTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <DHT22_Read.1+0xf4>)
 80017b8:	6013      	str	r3, [r2, #0]
		    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80017ba:	e004      	b.n	80017c6 <DHT22_Read.1+0xba>
		      cMillis = HAL_GetTick();
 80017bc:	f000 fade 	bl	8001d7c <HAL_GetTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001800 <DHT22_Read.1+0xf4>)
 80017c4:	6013      	str	r3, [r2, #0]
		    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80017c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017ca:	480e      	ldr	r0, [pc, #56]	@ (8001804 <DHT22_Read.1+0xf8>)
 80017cc:	f000 fd6c 	bl	80022a8 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <DHT22_Read.1+0xd8>
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <DHT22_Read.1+0xf0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1c9a      	adds	r2, r3, #2
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <DHT22_Read.1+0xf4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8eb      	bhi.n	80017bc <DHT22_Read.1+0xb0>
		  for (a=0;a<8;a++)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	3301      	adds	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b07      	cmp	r3, #7
 80017ee:	d995      	bls.n	800171c <DHT22_Read.1+0x10>
		  return b;
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
		}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000023c 	.word	0x2000023c
 8001800:	20000240 	.word	0x20000240
 8001804:	40010c00 	.word	0x40010c00

08001808 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  { // Gui nhiet do qua UART
	    sprintf(uart_buffer, "Temperature: %.1fC\r\n", tCelsius); // Gui nhiet do
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <StartTask02+0x6c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe07 	bl	8000428 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4916      	ldr	r1, [pc, #88]	@ (8001878 <StartTask02+0x70>)
 8001820:	4816      	ldr	r0, [pc, #88]	@ (800187c <StartTask02+0x74>)
 8001822:	f005 f839 	bl	8006898 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001826:	4815      	ldr	r0, [pc, #84]	@ (800187c <StartTask02+0x74>)
 8001828:	f7fe fc92 	bl	8000150 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	4911      	ldr	r1, [pc, #68]	@ (800187c <StartTask02+0x74>)
 8001836:	4812      	ldr	r0, [pc, #72]	@ (8001880 <StartTask02+0x78>)
 8001838:	f001 fc7e 	bl	8003138 <HAL_UART_Transmit>
		sprintf(uart_buffer, "Humidity: %.0f%%\r\n", RH); // Gui do am
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <StartTask02+0x7c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fdf1 	bl	8000428 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	490f      	ldr	r1, [pc, #60]	@ (8001888 <StartTask02+0x80>)
 800184c:	480b      	ldr	r0, [pc, #44]	@ (800187c <StartTask02+0x74>)
 800184e:	f005 f823 	bl	8006898 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001852:	480a      	ldr	r0, [pc, #40]	@ (800187c <StartTask02+0x74>)
 8001854:	f7fe fc7c 	bl	8000150 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	4906      	ldr	r1, [pc, #24]	@ (800187c <StartTask02+0x74>)
 8001862:	4807      	ldr	r0, [pc, #28]	@ (8001880 <StartTask02+0x78>)
 8001864:	f001 fc68 	bl	8003138 <HAL_UART_Transmit>
		osDelay(3000);
 8001868:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800186c:	f001 fef4 	bl	8003658 <osDelay>
	    sprintf(uart_buffer, "Temperature: %.1fC\r\n", tCelsius); // Gui nhiet do
 8001870:	bf00      	nop
 8001872:	e7cd      	b.n	8001810 <StartTask02+0x8>
 8001874:	20000244 	.word	0x20000244
 8001878:	08008b54 	.word	0x08008b54
 800187c:	20000250 	.word	0x20000250
 8001880:	200002d0 	.word	0x200002d0
 8001884:	2000024c 	.word	0x2000024c
 8001888:	08008b6c 	.word	0x08008b6c

0800188c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  { for(int i=0;i<=200;i++){
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e007      	b.n	80018aa <StartTask03+0x1e>
	     DisplayNumber(T);
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <StartTask03+0x9c>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fc0a 	bl	80010b8 <DisplayNumber>
  { for(int i=0;i<=200;i++){
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80018ae:	ddf4      	ble.n	800189a <StartTask03+0xe>
	  } HAL_GPIO_WritePin(GPIOB, digitPins[0] | digitPins[1] | digitPins[2], GPIO_PIN_RESET);
 80018b0:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <StartTask03+0xa0>)
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <StartTask03+0xa0>)
 80018b6:	885b      	ldrh	r3, [r3, #2]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <StartTask03+0xa0>)
 80018be:	889b      	ldrh	r3, [r3, #4]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4819      	ldr	r0, [pc, #100]	@ (8001930 <StartTask03+0xa4>)
 80018ca:	f000 fd04 	bl	80022d6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2140      	movs	r1, #64	@ 0x40
 80018d2:	4818      	ldr	r0, [pc, #96]	@ (8001934 <StartTask03+0xa8>)
 80018d4:	f000 fcff 	bl	80022d6 <HAL_GPIO_WritePin>
	  for(int i=0;i<=200;i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	e007      	b.n	80018ee <StartTask03+0x62>
	  	  DisplayNumber(H);
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <StartTask03+0xac>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fbe8 	bl	80010b8 <DisplayNumber>
	  for(int i=0;i<=200;i++){
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80018f2:	ddf4      	ble.n	80018de <StartTask03+0x52>
	  	  }
	  	  HAL_GPIO_WritePin(GPIOB, digitPins[0] | digitPins[1] | digitPins[2], GPIO_PIN_RESET);
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <StartTask03+0xa0>)
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <StartTask03+0xa0>)
 80018fa:	885b      	ldrh	r3, [r3, #2]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <StartTask03+0xa0>)
 8001902:	889b      	ldrh	r3, [r3, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <StartTask03+0xa4>)
 800190e:	f000 fce2 	bl	80022d6 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2140      	movs	r1, #64	@ 0x40
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <StartTask03+0xa8>)
 8001918:	f000 fcdd 	bl	80022d6 <HAL_GPIO_WritePin>
    osDelay(2000);
 800191c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001920:	f001 fe9a 	bl	8003658 <osDelay>
  { for(int i=0;i<=200;i++){
 8001924:	e7b6      	b.n	8001894 <StartTask03+0x8>
 8001926:	bf00      	nop
 8001928:	20000282 	.word	0x20000282
 800192c:	20000038 	.word	0x20000038
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40010800 	.word	0x40010800
 8001938:	20000284 	.word	0x20000284

0800193c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <StartTask04+0x8>

08001948 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <StartTask05+0x8>

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <Error_Handler+0x8>

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001966:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <HAL_MspInit+0x68>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <HAL_MspInit+0x68>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6193      	str	r3, [r2, #24]
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_MspInit+0x68>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_MspInit+0x68>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_MspInit+0x68>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_MspInit+0x68>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	210f      	movs	r1, #15
 800199a:	f06f 0001 	mvn.w	r0, #1
 800199e:	f000 fad6 	bl	8001f4e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_MspInit+0x6c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_MspInit+0x6c>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a09      	ldr	r2, [pc, #36]	@ (8001a04 <HAL_TIM_Base_MspInit+0x34>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10b      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_TIM_Base_MspInit+0x38>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <HAL_TIM_Base_MspInit+0x38>)
 80019e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_TIM_Base_MspInit+0x38>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <HAL_UART_MspInit+0x8c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d131      	bne.n	8001a90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_UART_MspInit+0x90>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a1a      	ldr	r2, [pc, #104]	@ (8001a9c <HAL_UART_MspInit+0x90>)
 8001a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_UART_MspInit+0x90>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_UART_MspInit+0x90>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <HAL_UART_MspInit+0x90>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_UART_MspInit+0x90>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480b      	ldr	r0, [pc, #44]	@ (8001aa0 <HAL_UART_MspInit+0x94>)
 8001a72:	f000 fa95 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <HAL_UART_MspInit+0x94>)
 8001a8c:	f000 fa88 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010800 	.word	0x40010800

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f93c 	bl	8001d58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ae0:	f003 f9e8 	bl	8004eb4 <xTaskGetSchedulerState>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001aea:	f003 ff55 	bl	8005998 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <_kill>:

int _kill(int pid, int sig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0a:	f004 ff7b 	bl	8006a04 <__errno>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2216      	movs	r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
  return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_exit>:

void _exit (int status)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe7 	bl	8001b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <_exit+0x12>

08001b36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e00a      	b.n	8001b5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b48:	f3af 8000 	nop.w
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf0      	blt.n	8001b48 <_read+0x12>
  }

  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e009      	b.n	8001b96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dbf1      	blt.n	8001b82 <_write+0x12>
  }
  return len;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_close>:

int _close(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bce:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <_isatty>:

int _isatty(int file)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f004 fee4 	bl	8006a04 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20005000 	.word	0x20005000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	2000032c 	.word	0x2000032c
 8001c70:	20002168 	.word	0x20002168

08001c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c80:	f7ff fff8 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480b      	ldr	r0, [pc, #44]	@ (8001cb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c86:	490c      	ldr	r1, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c88:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c9c:	4c09      	ldr	r4, [pc, #36]	@ (8001cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001caa:	f004 feb1 	bl	8006a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cae:	f7ff fa4d 	bl	800114c <main>
  bx lr
 8001cb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001cbc:	08009000 	.word	0x08009000
  ldr r2, =_sbss
 8001cc0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001cc4:	20002168 	.word	0x20002168

08001cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_2_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_Init+0x28>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	@ (8001cf4 <HAL_Init+0x28>)
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f92b 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce2:	200f      	movs	r0, #15
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff fe3a 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_InitTick+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_InitTick+0x58>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f935 	bl	8001f86 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f000 f90b 	bl	8001f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <HAL_InitTick+0x5c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000040 	.word	0x20000040
 8001d50:	20000048 	.word	0x20000048
 8001d54:	20000044 	.word	0x20000044

08001d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_IncTick+0x1c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_IncTick+0x20>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a03      	ldr	r2, [pc, #12]	@ (8001d78 <HAL_IncTick+0x20>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000048 	.word	0x20000048
 8001d78:	20000330 	.word	0x20000330

08001d7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b02      	ldr	r3, [pc, #8]	@ (8001d8c <HAL_GetTick+0x10>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	20000330 	.word	0x20000330

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_Delay+0x44>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db6:	bf00      	nop
 8001db8:	f7ff ffe0 	bl	8001d7c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000048 	.word	0x20000048

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff90 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff49 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff5e 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff90 	bl	8001e90 <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5f 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffb0 	bl	8001ef4 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b08b      	sub	sp, #44	@ 0x2c
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb2:	e169      	b.n	8002288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 8158 	bne.w	8002282 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a9a      	ldr	r2, [pc, #616]	@ (8002240 <HAL_GPIO_Init+0x2a0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d05e      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8001fdc:	4a98      	ldr	r2, [pc, #608]	@ (8002240 <HAL_GPIO_Init+0x2a0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d875      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8001fe2:	4a98      	ldr	r2, [pc, #608]	@ (8002244 <HAL_GPIO_Init+0x2a4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d058      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8001fe8:	4a96      	ldr	r2, [pc, #600]	@ (8002244 <HAL_GPIO_Init+0x2a4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d86f      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8001fee:	4a96      	ldr	r2, [pc, #600]	@ (8002248 <HAL_GPIO_Init+0x2a8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d052      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8001ff4:	4a94      	ldr	r2, [pc, #592]	@ (8002248 <HAL_GPIO_Init+0x2a8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d869      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8001ffa:	4a94      	ldr	r2, [pc, #592]	@ (800224c <HAL_GPIO_Init+0x2ac>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04c      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8002000:	4a92      	ldr	r2, [pc, #584]	@ (800224c <HAL_GPIO_Init+0x2ac>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d863      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8002006:	4a92      	ldr	r2, [pc, #584]	@ (8002250 <HAL_GPIO_Init+0x2b0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d046      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 800200c:	4a90      	ldr	r2, [pc, #576]	@ (8002250 <HAL_GPIO_Init+0x2b0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d85d      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8002012:	2b12      	cmp	r3, #18
 8002014:	d82a      	bhi.n	800206c <HAL_GPIO_Init+0xcc>
 8002016:	2b12      	cmp	r3, #18
 8002018:	d859      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 800201a:	a201      	add	r2, pc, #4	@ (adr r2, 8002020 <HAL_GPIO_Init+0x80>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	0800209b 	.word	0x0800209b
 8002024:	08002075 	.word	0x08002075
 8002028:	08002087 	.word	0x08002087
 800202c:	080020c9 	.word	0x080020c9
 8002030:	080020cf 	.word	0x080020cf
 8002034:	080020cf 	.word	0x080020cf
 8002038:	080020cf 	.word	0x080020cf
 800203c:	080020cf 	.word	0x080020cf
 8002040:	080020cf 	.word	0x080020cf
 8002044:	080020cf 	.word	0x080020cf
 8002048:	080020cf 	.word	0x080020cf
 800204c:	080020cf 	.word	0x080020cf
 8002050:	080020cf 	.word	0x080020cf
 8002054:	080020cf 	.word	0x080020cf
 8002058:	080020cf 	.word	0x080020cf
 800205c:	080020cf 	.word	0x080020cf
 8002060:	080020cf 	.word	0x080020cf
 8002064:	0800207d 	.word	0x0800207d
 8002068:	08002091 	.word	0x08002091
 800206c:	4a79      	ldr	r2, [pc, #484]	@ (8002254 <HAL_GPIO_Init+0x2b4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002072:	e02c      	b.n	80020ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e029      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	3304      	adds	r3, #4
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e024      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	3308      	adds	r3, #8
 800208c:	623b      	str	r3, [r7, #32]
          break;
 800208e:	e01f      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	330c      	adds	r3, #12
 8002096:	623b      	str	r3, [r7, #32]
          break;
 8002098:	e01a      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020a2:	2304      	movs	r3, #4
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e013      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b0:	2308      	movs	r3, #8
 80020b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	611a      	str	r2, [r3, #16]
          break;
 80020ba:	e009      	b.n	80020d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2308      	movs	r3, #8
 80020be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	615a      	str	r2, [r3, #20]
          break;
 80020c6:	e003      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
          break;
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          break;
 80020ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2bff      	cmp	r3, #255	@ 0xff
 80020d4:	d801      	bhi.n	80020da <HAL_GPIO_Init+0x13a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	e001      	b.n	80020de <HAL_GPIO_Init+0x13e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2bff      	cmp	r3, #255	@ 0xff
 80020e4:	d802      	bhi.n	80020ec <HAL_GPIO_Init+0x14c>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x152>
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	3b08      	subs	r3, #8
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	210f      	movs	r1, #15
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	6a39      	ldr	r1, [r7, #32]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	431a      	orrs	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80b1 	beq.w	8002282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002120:	4b4d      	ldr	r3, [pc, #308]	@ (8002258 <HAL_GPIO_Init+0x2b8>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a4c      	ldr	r2, [pc, #304]	@ (8002258 <HAL_GPIO_Init+0x2b8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <HAL_GPIO_Init+0x2b8>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002138:	4a48      	ldr	r2, [pc, #288]	@ (800225c <HAL_GPIO_Init+0x2bc>)
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a40      	ldr	r2, [pc, #256]	@ (8002260 <HAL_GPIO_Init+0x2c0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_GPIO_Init+0x1ec>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3f      	ldr	r2, [pc, #252]	@ (8002264 <HAL_GPIO_Init+0x2c4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00d      	beq.n	8002188 <HAL_GPIO_Init+0x1e8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3e      	ldr	r2, [pc, #248]	@ (8002268 <HAL_GPIO_Init+0x2c8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_GPIO_Init+0x1e4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3d      	ldr	r2, [pc, #244]	@ (800226c <HAL_GPIO_Init+0x2cc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_GPIO_Init+0x1e0>
 800217c:	2303      	movs	r3, #3
 800217e:	e006      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 8002180:	2304      	movs	r3, #4
 8002182:	e004      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 8002184:	2302      	movs	r3, #2
 8002186:	e002      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 800218c:	2300      	movs	r3, #0
 800218e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002190:	f002 0203 	and.w	r2, r2, #3
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	4093      	lsls	r3, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800219e:	492f      	ldr	r1, [pc, #188]	@ (800225c <HAL_GPIO_Init+0x2bc>)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	492c      	ldr	r1, [pc, #176]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4928      	ldr	r1, [pc, #160]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4922      	ldr	r1, [pc, #136]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	491e      	ldr	r1, [pc, #120]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4918      	ldr	r1, [pc, #96]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002216:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	4914      	ldr	r1, [pc, #80]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 8002220:	4013      	ands	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d021      	beq.n	8002274 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002230:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	490e      	ldr	r1, [pc, #56]	@ (8002270 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e021      	b.n	8002282 <HAL_GPIO_Init+0x2e2>
 800223e:	bf00      	nop
 8002240:	10320000 	.word	0x10320000
 8002244:	10310000 	.word	0x10310000
 8002248:	10220000 	.word	0x10220000
 800224c:	10210000 	.word	0x10210000
 8002250:	10120000 	.word	0x10120000
 8002254:	10110000 	.word	0x10110000
 8002258:	40021000 	.word	0x40021000
 800225c:	40010000 	.word	0x40010000
 8002260:	40010800 	.word	0x40010800
 8002264:	40010c00 	.word	0x40010c00
 8002268:	40011000 	.word	0x40011000
 800226c:	40011400 	.word	0x40011400
 8002270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_GPIO_Init+0x304>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	43db      	mvns	r3, r3
 800227c:	4909      	ldr	r1, [pc, #36]	@ (80022a4 <HAL_GPIO_Init+0x304>)
 800227e:	4013      	ands	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	3301      	adds	r3, #1
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	f47f ae8e 	bne.w	8001fb4 <HAL_GPIO_Init+0x14>
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	372c      	adds	r7, #44	@ 0x2c
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40010400 	.word	0x40010400

080022a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	887b      	ldrh	r3, [r7, #2]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e001      	b.n	80022ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	807b      	strh	r3, [r7, #2]
 80022e2:	4613      	mov	r3, r2
 80022e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e6:	787b      	ldrb	r3, [r7, #1]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ec:	887a      	ldrh	r2, [r7, #2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022f2:	e003      	b.n	80022fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	041a      	lsls	r2, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	611a      	str	r2, [r3, #16]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
	...

08002308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e272      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8087 	beq.w	8002436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	4b92      	ldr	r3, [pc, #584]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d00c      	beq.n	800234e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002334:	4b8f      	ldr	r3, [pc, #572]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d112      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
 8002340:	4b8c      	ldr	r3, [pc, #560]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800234c:	d10b      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06c      	beq.n	8002434 <HAL_RCC_OscConfig+0x12c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d168      	bne.n	8002434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e24c      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x76>
 8002370:	4b80      	ldr	r3, [pc, #512]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7f      	ldr	r2, [pc, #508]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e02e      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b7b      	ldr	r3, [pc, #492]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b78      	ldr	r3, [pc, #480]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a77      	ldr	r2, [pc, #476]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0xbc>
 80023aa:	4b72      	ldr	r3, [pc, #456]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a71      	ldr	r2, [pc, #452]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b68      	ldr	r3, [pc, #416]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a67      	ldr	r2, [pc, #412]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff fcca 	bl	8001d7c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7ff fcc6 	bl	8001d7c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e200      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xe4>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff fcb6 	bl	8001d7c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff fcb2 	bl	8001d7c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	@ 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1ec      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b53      	ldr	r3, [pc, #332]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x10c>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002442:	4b4c      	ldr	r3, [pc, #304]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244e:	4b49      	ldr	r3, [pc, #292]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
 800245a:	4b46      	ldr	r3, [pc, #280]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b43      	ldr	r3, [pc, #268]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1c0      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b3d      	ldr	r3, [pc, #244]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4939      	ldr	r1, [pc, #228]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b36      	ldr	r3, [pc, #216]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fc6b 	bl	8001d7c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff fc67 	bl	8001d7c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1a1      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4927      	ldr	r1, [pc, #156]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b26      	ldr	r3, [pc, #152]	@ (8002578 <HAL_RCC_OscConfig+0x270>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fc4a 	bl	8001d7c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ec:	f7ff fc46 	bl	8001d7c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e180      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03a      	beq.n	800258c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d019      	beq.n	8002552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b17      	ldr	r3, [pc, #92]	@ (800257c <HAL_RCC_OscConfig+0x274>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff fc2a 	bl	8001d7c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff fc26 	bl	8001d7c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e160      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 face 	bl	8002aec <RCC_Delay>
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <HAL_RCC_OscConfig+0x274>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff fc10 	bl	8001d7c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff fc0c 	bl	8001d7c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d908      	bls.n	8002580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e146      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	42420000 	.word	0x42420000
 800257c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b92      	ldr	r3, [pc, #584]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e9      	bne.n	8002560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a6 	beq.w	80026e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b8b      	ldr	r3, [pc, #556]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b88      	ldr	r3, [pc, #544]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a87      	ldr	r2, [pc, #540]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b85      	ldr	r3, [pc, #532]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b82      	ldr	r3, [pc, #520]	@ (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b7f      	ldr	r3, [pc, #508]	@ (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7e      	ldr	r2, [pc, #504]	@ (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7ff fbcd 	bl	8001d7c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7ff fbc9 	bl	8001d7c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	@ 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e103      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b75      	ldr	r3, [pc, #468]	@ (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x312>
 800260c:	4b6f      	ldr	r3, [pc, #444]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a6e      	ldr	r2, [pc, #440]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e02d      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x334>
 8002622:	4b6a      	ldr	r3, [pc, #424]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a69      	ldr	r2, [pc, #420]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b67      	ldr	r3, [pc, #412]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a66      	ldr	r2, [pc, #408]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x356>
 8002644:	4b61      	ldr	r3, [pc, #388]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a60      	ldr	r2, [pc, #384]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4b5e      	ldr	r3, [pc, #376]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a5d      	ldr	r2, [pc, #372]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800265e:	4b5b      	ldr	r3, [pc, #364]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a5a      	ldr	r2, [pc, #360]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b58      	ldr	r3, [pc, #352]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a57      	ldr	r2, [pc, #348]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7ff fb7d 	bl	8001d7c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7ff fb79 	bl	8001d7c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0b1      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b4b      	ldr	r3, [pc, #300]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x37e>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fb67 	bl	8001d7c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff fb63 	bl	8001d7c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e09b      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b40      	ldr	r3, [pc, #256]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a3b      	ldr	r2, [pc, #236]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8087 	beq.w	80027fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b36      	ldr	r3, [pc, #216]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d061      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d146      	bne.n	8002792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff fb37 	bl	8001d7c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff fb33 	bl	8001d7c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e06d      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273a:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4921      	ldr	r1, [pc, #132]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a19      	ldr	r1, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	430b      	orrs	r3, r1
 800275e:	491b      	ldr	r1, [pc, #108]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7ff fb07 	bl	8001d7c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7ff fb03 	bl	8001d7c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e03d      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x46a>
 8002790:	e035      	b.n	80027fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff faf0 	bl	8001d7c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff faec 	bl	8001d7c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e026      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x498>
 80027be:	e01e      	b.n	80027fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e019      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_OscConfig+0x500>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0d0      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b6a      	ldr	r3, [pc, #424]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b67      	ldr	r3, [pc, #412]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4965      	ldr	r1, [pc, #404]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800288a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d040      	beq.n	800292c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d115      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e073      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06b      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4936      	ldr	r1, [pc, #216]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7ff fa3e 	bl	8001d7c <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7ff fa3a 	bl	8001d7c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e053      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d210      	bcs.n	800295c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 0207 	bic.w	r2, r3, #7
 8002942:	4922      	ldr	r1, [pc, #136]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002986:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x1cc>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1d0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f99c 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08008c58 	.word	0x08008c58
 80029d8:	20000040 	.word	0x20000040
 80029dc:	20000044 	.word	0x20000044

080029e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x30>
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0e:	e027      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a12:	613b      	str	r3, [r7, #16]
      break;
 8002a14:	e027      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	0c9b      	lsrs	r3, r3, #18
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0c5b      	lsrs	r3, r3, #17
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	4a11      	ldr	r2, [pc, #68]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a42:	fb03 f202 	mul.w	r2, r3, r2
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e004      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	613b      	str	r3, [r7, #16]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a62:	613b      	str	r3, [r7, #16]
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	693b      	ldr	r3, [r7, #16]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	007a1200 	.word	0x007a1200
 8002a7c:	08008c70 	.word	0x08008c70
 8002a80:	08008c80 	.word	0x08008c80
 8002a84:	003d0900 	.word	0x003d0900

08002a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	@ (8002a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000040 	.word	0x20000040

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff2 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	@ (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08008c68 	.word	0x08008c68

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff ffde 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	0adb      	lsrs	r3, r3, #11
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08008c68 	.word	0x08008c68

08002aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <RCC_Delay+0x34>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <RCC_Delay+0x38>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a5b      	lsrs	r3, r3, #9
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b08:	bf00      	nop
  }
  while (Delay --);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e5a      	subs	r2, r3, #1
 8002b0e:	60fa      	str	r2, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f9      	bne.n	8002b08 <RCC_Delay+0x1c>
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	20000040 	.word	0x20000040
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e041      	b.n	8002bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe ff3e 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 f940 	bl	8002dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d001      	beq.n	8002be0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e032      	b.n	8002c46 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <HAL_TIM_Base_Start+0x88>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00e      	beq.n	8002c10 <HAL_TIM_Base_Start+0x48>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bfa:	d009      	beq.n	8002c10 <HAL_TIM_Base_Start+0x48>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <HAL_TIM_Base_Start+0x8c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIM_Base_Start+0x48>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a13      	ldr	r2, [pc, #76]	@ (8002c58 <HAL_TIM_Base_Start+0x90>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d111      	bne.n	8002c34 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d010      	beq.n	8002c44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	e007      	b.n	8002c44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800

08002c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_TIM_ConfigClockSource+0x1c>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0b4      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x186>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cb0:	d03e      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0xd4>
 8002cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cb6:	f200 8087 	bhi.w	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cbe:	f000 8086 	beq.w	8002dce <HAL_TIM_ConfigClockSource+0x172>
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc6:	d87f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b70      	cmp	r3, #112	@ 0x70
 8002cca:	d01a      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0xa6>
 8002ccc:	2b70      	cmp	r3, #112	@ 0x70
 8002cce:	d87b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b60      	cmp	r3, #96	@ 0x60
 8002cd2:	d050      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x11a>
 8002cd4:	2b60      	cmp	r3, #96	@ 0x60
 8002cd6:	d877      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b50      	cmp	r3, #80	@ 0x50
 8002cda:	d03c      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xfa>
 8002cdc:	2b50      	cmp	r3, #80	@ 0x50
 8002cde:	d873      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b40      	cmp	r3, #64	@ 0x40
 8002ce2:	d058      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x13a>
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d86f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b30      	cmp	r3, #48	@ 0x30
 8002cea:	d064      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cec:	2b30      	cmp	r3, #48	@ 0x30
 8002cee:	d86b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d060      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d867      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d05a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d00:	e062      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d12:	f000 f944 	bl	8002f9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	609a      	str	r2, [r3, #8]
      break;
 8002d2e:	e04f      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d40:	f000 f92d 	bl	8002f9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e03c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8a4 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2150      	movs	r1, #80	@ 0x50
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f8fb 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d74:	e02c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f8c2 	bl	8002f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2160      	movs	r1, #96	@ 0x60
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f8eb 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d94:	e01c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 f884 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2140      	movs	r1, #64	@ 0x40
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f8db 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002db4:	e00c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 f8d2 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e000      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ea8 <TIM_Base_SetConfig+0xbc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a25      	ldr	r2, [pc, #148]	@ (8002eac <TIM_Base_SetConfig+0xc0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3c:	d007      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a19      	ldr	r2, [pc, #100]	@ (8002ea8 <TIM_Base_SetConfig+0xbc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d003      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <TIM_Base_SetConfig+0xc0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d108      	bne.n	8002e60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	615a      	str	r2, [r3, #20]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0201 	bic.w	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f023 030a 	bic.w	r3, r3, #10
 8002eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0210 	bic.w	r2, r3, #16
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f043 0307 	orr.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	021a      	lsls	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	609a      	str	r2, [r3, #8]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e046      	b.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a16      	ldr	r2, [pc, #88]	@ (800308c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003040:	d009      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a10      	ldr	r2, [pc, #64]	@ (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10c      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800305c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4313      	orrs	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800

08003098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e042      	b.n	8003130 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fca4 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	@ 0x24
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f91d 	bl	800331c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b20      	cmp	r3, #32
 8003156:	d16d      	bne.n	8003234 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_UART_Transmit+0x2c>
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e066      	b.n	8003236 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2221      	movs	r2, #33	@ 0x21
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003176:	f7fe fe01 	bl	8001d7c <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003190:	d108      	bne.n	80031a4 <HAL_UART_Transmit+0x6c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	e003      	b.n	80031ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031ac:	e02a      	b.n	8003204 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	@ 0x80
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f840 	bl	800323e <UART_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e036      	b.n	8003236 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	3302      	adds	r3, #2
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e007      	b.n	80031f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3301      	adds	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1cf      	bne.n	80031ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	2140      	movs	r1, #64	@ 0x40
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f810 	bl	800323e <UART_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e006      	b.n	8003236 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b090      	sub	sp, #64	@ 0x40
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324e:	e050      	b.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d04c      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0x30>
 800325e:	f7fe fd8d 	bl	8001d7c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800326a:	429a      	cmp	r2, r3
 800326c:	d241      	bcs.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800328e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003290:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	613b      	str	r3, [r7, #16]
   return(result);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3314      	adds	r3, #20
 80032c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032c2:	623a      	str	r2, [r7, #32]
 80032c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	69f9      	ldr	r1, [r7, #28]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e5      	bne.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e00f      	b.n	8003312 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	429a      	cmp	r2, r3
 800330e:	d09f      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3740      	adds	r7, #64	@ 0x40
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003356:	f023 030c 	bic.w	r3, r3, #12
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	430b      	orrs	r3, r1
 8003362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2c      	ldr	r2, [pc, #176]	@ (8003430 <UART_SetConfig+0x114>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d103      	bne.n	800338c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003384:	f7ff fb9e 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	e002      	b.n	8003392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7ff fb86 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009a      	lsls	r2, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	4a22      	ldr	r2, [pc, #136]	@ (8003434 <UART_SetConfig+0x118>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	0119      	lsls	r1, r3, #4
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	009a      	lsls	r2, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <UART_SetConfig+0x118>)
 80033ca:	fba3 0302 	umull	r0, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2064      	movs	r0, #100	@ 0x64
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	3332      	adds	r3, #50	@ 0x32
 80033dc:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <UART_SetConfig+0x118>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e8:	4419      	add	r1, r3
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009a      	lsls	r2, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003400:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <UART_SetConfig+0x118>)
 8003402:	fba3 0302 	umull	r0, r3, r3, r2
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2064      	movs	r0, #100	@ 0x64
 800340a:	fb00 f303 	mul.w	r3, r0, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	3332      	adds	r3, #50	@ 0x32
 8003414:	4a07      	ldr	r2, [pc, #28]	@ (8003434 <UART_SetConfig+0x118>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	440a      	add	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40013800 	.word	0x40013800
 8003434:	51eb851f 	.word	0x51eb851f

08003438 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800343e:	f3ef 8305 	mrs	r3, IPSR
 8003442:	60bb      	str	r3, [r7, #8]
  return(result);
 8003444:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344a:	f3ef 8310 	mrs	r3, PRIMASK
 800344e:	607b      	str	r3, [r7, #4]
  return(result);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <osKernelInitialize+0x32>
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <osKernelInitialize+0x60>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d109      	bne.n	8003472 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800345e:	f3ef 8311 	mrs	r3, BASEPRI
 8003462:	603b      	str	r3, [r7, #0]
  return(result);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800346a:	f06f 0305 	mvn.w	r3, #5
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e00c      	b.n	800348c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <osKernelInitialize+0x60>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <osKernelInitialize+0x60>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e002      	b.n	800348c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	20000334 	.word	0x20000334

0800349c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a2:	f3ef 8305 	mrs	r3, IPSR
 80034a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ae:	f3ef 8310 	mrs	r3, PRIMASK
 80034b2:	607b      	str	r3, [r7, #4]
  return(result);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <osKernelStart+0x32>
 80034ba:	4b11      	ldr	r3, [pc, #68]	@ (8003500 <osKernelStart+0x64>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d109      	bne.n	80034d6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034c2:	f3ef 8311 	mrs	r3, BASEPRI
 80034c6:	603b      	str	r3, [r7, #0]
  return(result);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80034ce:	f06f 0305 	mvn.w	r3, #5
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e00e      	b.n	80034f4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80034d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <osKernelStart+0x64>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <osKernelStart+0x64>)
 80034e0:	2202      	movs	r2, #2
 80034e2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034e4:	f001 f890 	bl	8004608 <vTaskStartScheduler>
      stat = osOK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e002      	b.n	80034f4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000334 	.word	0x20000334

08003504 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b092      	sub	sp, #72	@ 0x48
 8003508:	af04      	add	r7, sp, #16
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003514:	f3ef 8305 	mrs	r3, IPSR
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 8094 	bne.w	800364a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003522:	f3ef 8310 	mrs	r3, PRIMASK
 8003526:	623b      	str	r3, [r7, #32]
  return(result);
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 808d 	bne.w	800364a <osThreadNew+0x146>
 8003530:	4b48      	ldr	r3, [pc, #288]	@ (8003654 <osThreadNew+0x150>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d106      	bne.n	8003546 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003538:	f3ef 8311 	mrs	r3, BASEPRI
 800353c:	61fb      	str	r3, [r7, #28]
  return(result);
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 8082 	bne.w	800364a <osThreadNew+0x146>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d07e      	beq.n	800364a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800354c:	2380      	movs	r3, #128	@ 0x80
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003550:	2318      	movs	r3, #24
 8003552:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003554:	2300      	movs	r3, #0
 8003556:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003558:	f107 031b 	add.w	r3, r7, #27
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d045      	beq.n	80035f6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <osThreadNew+0x74>
        name = attr->name;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <osThreadNew+0x9a>
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358e:	2b38      	cmp	r3, #56	@ 0x38
 8003590:	d805      	bhi.n	800359e <osThreadNew+0x9a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <osThreadNew+0x9e>
        return (NULL);
 800359e:	2300      	movs	r3, #0
 80035a0:	e054      	b.n	800364c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00e      	beq.n	80035d8 <osThreadNew+0xd4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b5b      	cmp	r3, #91	@ 0x5b
 80035c0:	d90a      	bls.n	80035d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <osThreadNew+0xd4>
        mem = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d6:	e010      	b.n	80035fa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <osThreadNew+0xf6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d108      	bne.n	80035fa <osThreadNew+0xf6>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <osThreadNew+0xf6>
          mem = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f4:	e001      	b.n	80035fa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d110      	bne.n	8003622 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003608:	9202      	str	r2, [sp, #8]
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003614:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fe24 	bl	8004264 <xTaskCreateStatic>
 800361c:	4603      	mov	r3, r0
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e013      	b.n	800364a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d110      	bne.n	800364a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	b29a      	uxth	r2, r3
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fe71 	bl	8004322 <xTaskCreate>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <osThreadNew+0x146>
          hTask = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800364a:	697b      	ldr	r3, [r7, #20]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3738      	adds	r7, #56	@ 0x38
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000334 	.word	0x20000334

08003658 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003660:	f3ef 8305 	mrs	r3, IPSR
 8003664:	613b      	str	r3, [r7, #16]
  return(result);
 8003666:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10f      	bne.n	800368c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366c:	f3ef 8310 	mrs	r3, PRIMASK
 8003670:	60fb      	str	r3, [r7, #12]
  return(result);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <osDelay+0x34>
 8003678:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <osDelay+0x58>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d109      	bne.n	8003694 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003680:	f3ef 8311 	mrs	r3, BASEPRI
 8003684:	60bb      	str	r3, [r7, #8]
  return(result);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <osDelay+0x3c>
    stat = osErrorISR;
 800368c:	f06f 0305 	mvn.w	r3, #5
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e007      	b.n	80036a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 ff7c 	bl	800459c <vTaskDelay>
    }
  }

  return (stat);
 80036a4:	697b      	ldr	r3, [r7, #20]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000334 	.word	0x20000334

080036b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <vApplicationGetIdleTaskMemory+0x28>)
 80036c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4a05      	ldr	r2, [pc, #20]	@ (80036e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80036ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2280      	movs	r2, #128	@ 0x80
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000338 	.word	0x20000338
 80036e0:	20000394 	.word	0x20000394

080036e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a07      	ldr	r2, [pc, #28]	@ (8003710 <vApplicationGetTimerTaskMemory+0x2c>)
 80036f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4a06      	ldr	r2, [pc, #24]	@ (8003714 <vApplicationGetTimerTaskMemory+0x30>)
 80036fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003702:	601a      	str	r2, [r3, #0]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000594 	.word	0x20000594
 8003714:	200005f0 	.word	0x200005f0

08003718 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f103 0208 	add.w	r2, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f103 0208 	add.w	r2, r3, #8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f103 0208 	add.w	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d103      	bne.n	80037d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e00c      	b.n	80037ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3308      	adds	r3, #8
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e002      	b.n	80037e2 <vListInsert+0x2e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d2f6      	bcs.n	80037dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6892      	ldr	r2, [r2, #8]
 800383a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6852      	ldr	r2, [r2, #4]
 8003844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d103      	bne.n	8003858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1e5a      	subs	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
	...

08003878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
 80038a2:	e7fd      	b.n	80038a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038a4:	f001 fffa 	bl	800589c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	68f9      	ldr	r1, [r7, #12]
 80038b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	441a      	add	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	3b01      	subs	r3, #1
 80038d6:	68f9      	ldr	r1, [r7, #12]
 80038d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	441a      	add	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	22ff      	movs	r2, #255	@ 0xff
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	22ff      	movs	r2, #255	@ 0xff
 80038f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d114      	bne.n	8003924 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01a      	beq.n	8003938 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3310      	adds	r3, #16
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f910 	bl	8004b2c <xTaskRemoveFromEventList>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d012      	beq.n	8003938 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <xQueueGenericReset+0xd0>)
 8003914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	e009      	b.n	8003938 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3310      	adds	r3, #16
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fef5 	bl	8003718 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3324      	adds	r3, #36	@ 0x24
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fef0 	bl	8003718 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003938:	f001 ffe0 	bl	80058fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800393c:	2301      	movs	r3, #1
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	@ 0x38
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <xQueueGenericCreateStatic+0x56>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <xQueueGenericCreateStatic+0x5a>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <xQueueGenericCreateStatic+0x5c>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	623b      	str	r3, [r7, #32]
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <xQueueGenericCreateStatic+0x84>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <xQueueGenericCreateStatic+0x88>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <xQueueGenericCreateStatic+0x8a>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	61fb      	str	r3, [r7, #28]
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	e7fd      	b.n	80039ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039f2:	2350      	movs	r3, #80	@ 0x50
 80039f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b50      	cmp	r3, #80	@ 0x50
 80039fa:	d00b      	beq.n	8003a14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61bb      	str	r3, [r7, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a26:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f805 	bl	8003a44 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3730      	adds	r7, #48	@ 0x30
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e002      	b.n	8003a66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a72:	2101      	movs	r1, #1
 8003a74:	69b8      	ldr	r0, [r7, #24]
 8003a76:	f7ff feff 	bl	8003878 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	@ 0x38
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <xQueueGenericSend+0x34>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d103      	bne.n	8003ace <xQueueGenericSend+0x42>
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericSend+0x46>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericSend+0x48>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <xQueueGenericSend+0x64>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	e7fd      	b.n	8003aec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d103      	bne.n	8003afe <xQueueGenericSend+0x72>
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <xQueueGenericSend+0x76>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <xQueueGenericSend+0x78>
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <xQueueGenericSend+0x94>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	623b      	str	r3, [r7, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b20:	f001 f9c8 	bl	8004eb4 <xTaskGetSchedulerState>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <xQueueGenericSend+0xa4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <xQueueGenericSend+0xa8>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <xQueueGenericSend+0xaa>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <xQueueGenericSend+0xc6>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	61fb      	str	r3, [r7, #28]
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	e7fd      	b.n	8003b4e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b52:	f001 fea3 	bl	800589c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <xQueueGenericSend+0xdc>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d129      	bne.n	8003bbc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b6e:	f000 fa0d 	bl	8003f8c <prvCopyDataToQueue>
 8003b72:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	3324      	adds	r3, #36	@ 0x24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 ffd3 	bl	8004b2c <xTaskRemoveFromEventList>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c8c <xQueueGenericSend+0x200>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	e00a      	b.n	8003bb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ba4:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <xQueueGenericSend+0x200>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bb4:	f001 fea2 	bl	80058fc <vPortExitCritical>
				return pdPASS;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e063      	b.n	8003c84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bc2:	f001 fe9b 	bl	80058fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e05c      	b.n	8003c84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f80d 	bl	8004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bde:	f001 fe8d 	bl	80058fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003be2:	f000 fd79 	bl	80046d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003be6:	f001 fe59 	bl	800589c <vPortEnterCritical>
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bf0:	b25b      	sxtb	r3, r3
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d103      	bne.n	8003c00 <xQueueGenericSend+0x174>
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c06:	b25b      	sxtb	r3, r3
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d103      	bne.n	8003c16 <xQueueGenericSend+0x18a>
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c16:	f001 fe71 	bl	80058fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c1a:	1d3a      	adds	r2, r7, #4
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fffc 	bl	8004c20 <xTaskCheckForTimeOut>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d124      	bne.n	8003c78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c30:	f000 faa4 	bl	800417c <prvIsQueueFull>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d018      	beq.n	8003c6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	3310      	adds	r3, #16
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 ff20 	bl	8004a88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c4a:	f000 fa2f 	bl	80040ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c4e:	f000 fd51 	bl	80046f4 <xTaskResumeAll>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f af7c 	bne.w	8003b52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <xQueueGenericSend+0x200>)
 8003c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	e772      	b.n	8003b52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c6e:	f000 fa1d 	bl	80040ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c72:	f000 fd3f 	bl	80046f4 <xTaskResumeAll>
 8003c76:	e76c      	b.n	8003b52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c7a:	f000 fa17 	bl	80040ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c7e:	f000 fd39 	bl	80046f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c82:	2300      	movs	r3, #0
		}
	}
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3738      	adds	r7, #56	@ 0x38
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	@ 0x38
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <xQueueGenericSendFromISR+0x3e>
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <xQueueGenericSendFromISR+0x42>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <xQueueGenericSendFromISR+0x44>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10b      	bne.n	8003cf0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	623b      	str	r3, [r7, #32]
}
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d103      	bne.n	8003cfe <xQueueGenericSendFromISR+0x6e>
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <xQueueGenericSendFromISR+0x72>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <xQueueGenericSendFromISR+0x74>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	61fb      	str	r3, [r7, #28]
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d20:	f001 fe7e 	bl	8005a20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d24:	f3ef 8211 	mrs	r2, BASEPRI
 8003d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	61ba      	str	r2, [r7, #24]
 8003d3a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <xQueueGenericSendFromISR+0xc2>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d12c      	bne.n	8003dac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d62:	f000 f913 	bl	8003f8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d66:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d112      	bne.n	8003d96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	3324      	adds	r3, #36	@ 0x24
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fed5 	bl	8004b2c <xTaskRemoveFromEventList>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e007      	b.n	8003da6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	b25a      	sxtb	r2, r3
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003da6:	2301      	movs	r3, #1
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003daa:	e001      	b.n	8003db0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3738      	adds	r7, #56	@ 0x38
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	@ 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <xQueueReceive+0x32>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	623b      	str	r3, [r7, #32]
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <xQueueReceive+0x40>
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <xQueueReceive+0x44>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <xQueueReceive+0x46>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <xQueueReceive+0x62>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	61fb      	str	r3, [r7, #28]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e2a:	f001 f843 	bl	8004eb4 <xTaskGetSchedulerState>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <xQueueReceive+0x72>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <xQueueReceive+0x76>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <xQueueReceive+0x78>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <xQueueReceive+0x94>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	61bb      	str	r3, [r7, #24]
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e5c:	f001 fd1e 	bl	800589c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01f      	beq.n	8003eac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e70:	f000 f8f6 	bl	8004060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	1e5a      	subs	r2, r3, #1
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00f      	beq.n	8003ea4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e86:	3310      	adds	r3, #16
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fe4f 	bl	8004b2c <xTaskRemoveFromEventList>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e94:	4b3c      	ldr	r3, [pc, #240]	@ (8003f88 <xQueueReceive+0x1c0>)
 8003e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ea4:	f001 fd2a 	bl	80058fc <vPortExitCritical>
				return pdPASS;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e069      	b.n	8003f80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eb2:	f001 fd23 	bl	80058fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e062      	b.n	8003f80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ec0:	f107 0310 	add.w	r3, r7, #16
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fe95 	bl	8004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ece:	f001 fd15 	bl	80058fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ed2:	f000 fc01 	bl	80046d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ed6:	f001 fce1 	bl	800589c <vPortEnterCritical>
 8003eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ee0:	b25b      	sxtb	r3, r3
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d103      	bne.n	8003ef0 <xQueueReceive+0x128>
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d103      	bne.n	8003f06 <xQueueReceive+0x13e>
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f06:	f001 fcf9 	bl	80058fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f0a:	1d3a      	adds	r2, r7, #4
 8003f0c:	f107 0310 	add.w	r3, r7, #16
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fe84 	bl	8004c20 <xTaskCheckForTimeOut>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d123      	bne.n	8003f66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f20:	f000 f916 	bl	8004150 <prvIsQueueEmpty>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d017      	beq.n	8003f5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	3324      	adds	r3, #36	@ 0x24
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fda8 	bl	8004a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f3a:	f000 f8b7 	bl	80040ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f3e:	f000 fbd9 	bl	80046f4 <xTaskResumeAll>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d189      	bne.n	8003e5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f48:	4b0f      	ldr	r3, [pc, #60]	@ (8003f88 <xQueueReceive+0x1c0>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	e780      	b.n	8003e5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f5c:	f000 f8a6 	bl	80040ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f60:	f000 fbc8 	bl	80046f4 <xTaskResumeAll>
 8003f64:	e77a      	b.n	8003e5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f68:	f000 f8a0 	bl	80040ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f6c:	f000 fbc2 	bl	80046f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f72:	f000 f8ed 	bl	8004150 <prvIsQueueEmpty>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f43f af6f 	beq.w	8003e5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3730      	adds	r7, #48	@ 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10d      	bne.n	8003fc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d14d      	bne.n	800404e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ff9a 	bl	8004ef0 <xTaskPriorityDisinherit>
 8003fbc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	e043      	b.n	800404e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d119      	bne.n	8004000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6898      	ldr	r0, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	f002 fd4f 	bl	8006a7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	441a      	add	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d32b      	bcc.n	800404e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	e026      	b.n	800404e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68d8      	ldr	r0, [r3, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	461a      	mov	r2, r3
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	f002 fd35 	bl	8006a7a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	425b      	negs	r3, r3
 800401a:	441a      	add	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d207      	bcs.n	800403c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	425b      	negs	r3, r3
 8004036:	441a      	add	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d105      	bne.n	800404e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	3b01      	subs	r3, #1
 800404c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004056:	697b      	ldr	r3, [r7, #20]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d018      	beq.n	80040a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	441a      	add	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d303      	bcc.n	8004094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68d9      	ldr	r1, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	461a      	mov	r2, r3
 800409e:	6838      	ldr	r0, [r7, #0]
 80040a0:	f002 fceb 	bl	8006a7a <memcpy>
	}
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040b4:	f001 fbf2 	bl	800589c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040c0:	e011      	b.n	80040e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d012      	beq.n	80040f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3324      	adds	r3, #36	@ 0x24
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fd2c 	bl	8004b2c <xTaskRemoveFromEventList>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040da:	f000 fe05 	bl	8004ce8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	dce9      	bgt.n	80040c2 <prvUnlockQueue+0x16>
 80040ee:	e000      	b.n	80040f2 <prvUnlockQueue+0x46>
					break;
 80040f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	22ff      	movs	r2, #255	@ 0xff
 80040f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80040fa:	f001 fbff 	bl	80058fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040fe:	f001 fbcd 	bl	800589c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800410a:	e011      	b.n	8004130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d012      	beq.n	800413a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3310      	adds	r3, #16
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fd07 	bl	8004b2c <xTaskRemoveFromEventList>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004124:	f000 fde0 	bl	8004ce8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004128:	7bbb      	ldrb	r3, [r7, #14]
 800412a:	3b01      	subs	r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004134:	2b00      	cmp	r3, #0
 8004136:	dce9      	bgt.n	800410c <prvUnlockQueue+0x60>
 8004138:	e000      	b.n	800413c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800413a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	22ff      	movs	r2, #255	@ 0xff
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004144:	f001 fbda 	bl	80058fc <vPortExitCritical>
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004158:	f001 fba0 	bl	800589c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e001      	b.n	800416e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416e:	f001 fbc5 	bl	80058fc <vPortExitCritical>

	return xReturn;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004184:	f001 fb8a 	bl	800589c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004190:	429a      	cmp	r2, r3
 8004192:	d102      	bne.n	800419a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004194:	2301      	movs	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e001      	b.n	800419e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800419e:	f001 fbad 	bl	80058fc <vPortExitCritical>

	return xReturn;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e014      	b.n	80041e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041bc:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <vQueueAddToRegistry+0x4c>)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041c8:	490b      	ldr	r1, [pc, #44]	@ (80041f8 <vQueueAddToRegistry+0x4c>)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041d2:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <vQueueAddToRegistry+0x4c>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041de:	e006      	b.n	80041ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b07      	cmp	r3, #7
 80041ea:	d9e7      	bls.n	80041bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	200009f0 	.word	0x200009f0

080041fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800420c:	f001 fb46 	bl	800589c <vPortEnterCritical>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004216:	b25b      	sxtb	r3, r3
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d103      	bne.n	8004226 <vQueueWaitForMessageRestricted+0x2a>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800422c:	b25b      	sxtb	r3, r3
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d103      	bne.n	800423c <vQueueWaitForMessageRestricted+0x40>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800423c:	f001 fb5e 	bl	80058fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3324      	adds	r3, #36	@ 0x24
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fc3f 	bl	8004ad4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004256:	6978      	ldr	r0, [r7, #20]
 8004258:	f7ff ff28 	bl	80040ac <prvUnlockQueue>
	}
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	@ 0x38
 8004268:	af04      	add	r7, sp, #16
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	623b      	str	r3, [r7, #32]
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	61fb      	str	r3, [r7, #28]
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	e7fd      	b.n	80042aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042ae:	235c      	movs	r3, #92	@ 0x5c
 80042b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80042b6:	d00b      	beq.n	80042d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	61bb      	str	r3, [r7, #24]
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01e      	beq.n	8004314 <xTaskCreateStatic+0xb0>
 80042d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042ee:	2300      	movs	r3, #0
 80042f0:	9303      	str	r3, [sp, #12]
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	9302      	str	r3, [sp, #8]
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f850 	bl	80043ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800430c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800430e:	f000 f8d5 	bl	80044bc <prvAddNewTaskToReadyList>
 8004312:	e001      	b.n	8004318 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004318:	697b      	ldr	r3, [r7, #20]
	}
 800431a:	4618      	mov	r0, r3
 800431c:	3728      	adds	r7, #40	@ 0x28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004322:	b580      	push	{r7, lr}
 8004324:	b08c      	sub	sp, #48	@ 0x30
 8004326:	af04      	add	r7, sp, #16
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fbb2 	bl	8005aa0 <pvPortMalloc>
 800433c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00e      	beq.n	8004362 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004344:	205c      	movs	r0, #92	@ 0x5c
 8004346:	f001 fbab 	bl	8005aa0 <pvPortMalloc>
 800434a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
 8004358:	e005      	b.n	8004366 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	f001 fc68 	bl	8005c30 <vPortFree>
 8004360:	e001      	b.n	8004366 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d017      	beq.n	800439c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004374:	88fa      	ldrh	r2, [r7, #6]
 8004376:	2300      	movs	r3, #0
 8004378:	9303      	str	r3, [sp, #12]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	9302      	str	r3, [sp, #8]
 800437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f80e 	bl	80043ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004390:	69f8      	ldr	r0, [r7, #28]
 8004392:	f000 f893 	bl	80044bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e002      	b.n	80043a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
 80043a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043a2:	69bb      	ldr	r3, [r7, #24]
	}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	21a5      	movs	r1, #165	@ 0xa5
 80043c6:	f002 faca 	bl	800695e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043d4:	3b01      	subs	r3, #1
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f023 0307 	bic.w	r3, r3, #7
 80043e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	617b      	str	r3, [r7, #20]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e012      	b.n	8004432 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	7819      	ldrb	r1, [r3, #0]
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	3334      	adds	r3, #52	@ 0x34
 800441c:	460a      	mov	r2, r1
 800441e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	3301      	adds	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d9e9      	bls.n	800440c <prvInitialiseNewTask+0x60>
 8004438:	e000      	b.n	800443c <prvInitialiseNewTask+0x90>
		{
			break;
 800443a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	2b37      	cmp	r3, #55	@ 0x37
 8004448:	d901      	bls.n	800444e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800444a:	2337      	movs	r3, #55	@ 0x37
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004452:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004458:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	2200      	movs	r2, #0
 800445e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff f976 	bl	8003756 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	3318      	adds	r3, #24
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff f971 	bl	8003756 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004478:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004488:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	69b8      	ldr	r0, [r7, #24]
 800449e:	f001 f90b 	bl	80056b8 <pxPortInitialiseStack>
 80044a2:	4602      	mov	r2, r0
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80044a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044b4:	bf00      	nop
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044c4:	f001 f9ea 	bl	800589c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004580 <prvAddNewTaskToReadyList+0xc4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004580 <prvAddNewTaskToReadyList+0xc4>)
 80044d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004584 <prvAddNewTaskToReadyList+0xc8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044da:	4a2a      	ldr	r2, [pc, #168]	@ (8004584 <prvAddNewTaskToReadyList+0xc8>)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044e0:	4b27      	ldr	r3, [pc, #156]	@ (8004580 <prvAddNewTaskToReadyList+0xc4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d110      	bne.n	800450a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044e8:	f000 fc22 	bl	8004d30 <prvInitialiseTaskLists>
 80044ec:	e00d      	b.n	800450a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044ee:	4b26      	ldr	r3, [pc, #152]	@ (8004588 <prvAddNewTaskToReadyList+0xcc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044f6:	4b23      	ldr	r3, [pc, #140]	@ (8004584 <prvAddNewTaskToReadyList+0xc8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d802      	bhi.n	800450a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004504:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <prvAddNewTaskToReadyList+0xc8>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800450a:	4b20      	ldr	r3, [pc, #128]	@ (800458c <prvAddNewTaskToReadyList+0xd0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3301      	adds	r3, #1
 8004510:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <prvAddNewTaskToReadyList+0xd0>)
 8004512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004514:	4b1d      	ldr	r3, [pc, #116]	@ (800458c <prvAddNewTaskToReadyList+0xd0>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <prvAddNewTaskToReadyList+0xd4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d903      	bls.n	8004530 <prvAddNewTaskToReadyList+0x74>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	4a18      	ldr	r2, [pc, #96]	@ (8004590 <prvAddNewTaskToReadyList+0xd4>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <prvAddNewTaskToReadyList+0xd8>)
 800453e:	441a      	add	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7ff f911 	bl	800376e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800454c:	f001 f9d6 	bl	80058fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004550:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <prvAddNewTaskToReadyList+0xcc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004558:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <prvAddNewTaskToReadyList+0xc8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	429a      	cmp	r2, r3
 8004564:	d207      	bcs.n	8004576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004566:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <prvAddNewTaskToReadyList+0xdc>)
 8004568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000f04 	.word	0x20000f04
 8004584:	20000a30 	.word	0x20000a30
 8004588:	20000f10 	.word	0x20000f10
 800458c:	20000f20 	.word	0x20000f20
 8004590:	20000f0c 	.word	0x20000f0c
 8004594:	20000a34 	.word	0x20000a34
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d018      	beq.n	80045e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045ae:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <vTaskDelay+0x64>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <vTaskDelay+0x32>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	60bb      	str	r3, [r7, #8]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045ce:	f000 f883 	bl	80046d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045d2:	2100      	movs	r1, #0
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fcfb 	bl	8004fd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045da:	f000 f88b 	bl	80046f4 <xTaskResumeAll>
 80045de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80045e6:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <vTaskDelay+0x68>)
 80045e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000f2c 	.word	0x20000f2c
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004616:	463a      	mov	r2, r7
 8004618:	1d39      	adds	r1, r7, #4
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff f848 	bl	80036b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	9202      	str	r2, [sp, #8]
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	460a      	mov	r2, r1
 8004636:	4922      	ldr	r1, [pc, #136]	@ (80046c0 <vTaskStartScheduler+0xb8>)
 8004638:	4822      	ldr	r0, [pc, #136]	@ (80046c4 <vTaskStartScheduler+0xbc>)
 800463a:	f7ff fe13 	bl	8004264 <xTaskCreateStatic>
 800463e:	4603      	mov	r3, r0
 8004640:	4a21      	ldr	r2, [pc, #132]	@ (80046c8 <vTaskStartScheduler+0xc0>)
 8004642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004644:	4b20      	ldr	r3, [pc, #128]	@ (80046c8 <vTaskStartScheduler+0xc0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e001      	b.n	8004656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800465c:	f000 fd0c 	bl	8005078 <xTimerCreateTimerTask>
 8004660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d116      	bne.n	8004696 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	613b      	str	r3, [r7, #16]
}
 800467a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800467c:	4b13      	ldr	r3, [pc, #76]	@ (80046cc <vTaskStartScheduler+0xc4>)
 800467e:	f04f 32ff 	mov.w	r2, #4294967295
 8004682:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004684:	4b12      	ldr	r3, [pc, #72]	@ (80046d0 <vTaskStartScheduler+0xc8>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800468a:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <vTaskStartScheduler+0xcc>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004690:	f001 f892 	bl	80057b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004694:	e00f      	b.n	80046b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d10b      	bne.n	80046b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <vTaskStartScheduler+0xaa>
}
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	08008b80 	.word	0x08008b80
 80046c4:	08004d01 	.word	0x08004d01
 80046c8:	20000f28 	.word	0x20000f28
 80046cc:	20000f24 	.word	0x20000f24
 80046d0:	20000f10 	.word	0x20000f10
 80046d4:	20000f08 	.word	0x20000f08

080046d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046dc:	4b04      	ldr	r3, [pc, #16]	@ (80046f0 <vTaskSuspendAll+0x18>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	4a03      	ldr	r2, [pc, #12]	@ (80046f0 <vTaskSuspendAll+0x18>)
 80046e4:	6013      	str	r3, [r2, #0]
}
 80046e6:	bf00      	nop
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000f2c 	.word	0x20000f2c

080046f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004702:	4b42      	ldr	r3, [pc, #264]	@ (800480c <xTaskResumeAll+0x118>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <xTaskResumeAll+0x2e>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	603b      	str	r3, [r7, #0]
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	e7fd      	b.n	800471e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004722:	f001 f8bb 	bl	800589c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004726:	4b39      	ldr	r3, [pc, #228]	@ (800480c <xTaskResumeAll+0x118>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	4a37      	ldr	r2, [pc, #220]	@ (800480c <xTaskResumeAll+0x118>)
 800472e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004730:	4b36      	ldr	r3, [pc, #216]	@ (800480c <xTaskResumeAll+0x118>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d162      	bne.n	80047fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004738:	4b35      	ldr	r3, [pc, #212]	@ (8004810 <xTaskResumeAll+0x11c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05e      	beq.n	80047fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004740:	e02f      	b.n	80047a2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004742:	4b34      	ldr	r3, [pc, #208]	@ (8004814 <xTaskResumeAll+0x120>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3318      	adds	r3, #24
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff f868 	bl	8003824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff f863 	bl	8003824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	4b2d      	ldr	r3, [pc, #180]	@ (8004818 <xTaskResumeAll+0x124>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d903      	bls.n	8004772 <xTaskResumeAll+0x7e>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	4a2a      	ldr	r2, [pc, #168]	@ (8004818 <xTaskResumeAll+0x124>)
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4a27      	ldr	r2, [pc, #156]	@ (800481c <xTaskResumeAll+0x128>)
 8004780:	441a      	add	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7fe fff0 	bl	800376e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4b23      	ldr	r3, [pc, #140]	@ (8004820 <xTaskResumeAll+0x12c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	429a      	cmp	r2, r3
 800479a:	d302      	bcc.n	80047a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800479c:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <xTaskResumeAll+0x130>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004814 <xTaskResumeAll+0x120>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1cb      	bne.n	8004742 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047b0:	f000 fb5c 	bl	8004e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004828 <xTaskResumeAll+0x134>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d010      	beq.n	80047e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047c0:	f000 f844 	bl	800484c <xTaskIncrementTick>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80047ca:	4b16      	ldr	r3, [pc, #88]	@ (8004824 <xTaskResumeAll+0x130>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f1      	bne.n	80047c0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80047dc:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <xTaskResumeAll+0x134>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047e2:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <xTaskResumeAll+0x130>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047ee:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <xTaskResumeAll+0x138>)
 80047f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047fe:	f001 f87d 	bl	80058fc <vPortExitCritical>

	return xAlreadyYielded;
 8004802:	68bb      	ldr	r3, [r7, #8]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000f2c 	.word	0x20000f2c
 8004810:	20000f04 	.word	0x20000f04
 8004814:	20000ec4 	.word	0x20000ec4
 8004818:	20000f0c 	.word	0x20000f0c
 800481c:	20000a34 	.word	0x20000a34
 8004820:	20000a30 	.word	0x20000a30
 8004824:	20000f18 	.word	0x20000f18
 8004828:	20000f14 	.word	0x20000f14
 800482c:	e000ed04 	.word	0xe000ed04

08004830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004836:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <xTaskGetTickCount+0x18>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800483c:	687b      	ldr	r3, [r7, #4]
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	20000f08 	.word	0x20000f08

0800484c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004856:	4b52      	ldr	r3, [pc, #328]	@ (80049a0 <xTaskIncrementTick+0x154>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 808f 	bne.w	800497e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004860:	4b50      	ldr	r3, [pc, #320]	@ (80049a4 <xTaskIncrementTick+0x158>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004868:	4a4e      	ldr	r2, [pc, #312]	@ (80049a4 <xTaskIncrementTick+0x158>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d121      	bne.n	80048b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004874:	4b4c      	ldr	r3, [pc, #304]	@ (80049a8 <xTaskIncrementTick+0x15c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <xTaskIncrementTick+0x4a>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	e7fd      	b.n	8004892 <xTaskIncrementTick+0x46>
 8004896:	4b44      	ldr	r3, [pc, #272]	@ (80049a8 <xTaskIncrementTick+0x15c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	4b43      	ldr	r3, [pc, #268]	@ (80049ac <xTaskIncrementTick+0x160>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a41      	ldr	r2, [pc, #260]	@ (80049a8 <xTaskIncrementTick+0x15c>)
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	4a41      	ldr	r2, [pc, #260]	@ (80049ac <xTaskIncrementTick+0x160>)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b41      	ldr	r3, [pc, #260]	@ (80049b0 <xTaskIncrementTick+0x164>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	4a3f      	ldr	r2, [pc, #252]	@ (80049b0 <xTaskIncrementTick+0x164>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	f000 fada 	bl	8004e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048b8:	4b3e      	ldr	r3, [pc, #248]	@ (80049b4 <xTaskIncrementTick+0x168>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d34e      	bcc.n	8004960 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c2:	4b39      	ldr	r3, [pc, #228]	@ (80049a8 <xTaskIncrementTick+0x15c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <xTaskIncrementTick+0x84>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <xTaskIncrementTick+0x86>
 80048d0:	2300      	movs	r3, #0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d6:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <xTaskIncrementTick+0x168>)
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	601a      	str	r2, [r3, #0]
					break;
 80048de:	e03f      	b.n	8004960 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048e0:	4b31      	ldr	r3, [pc, #196]	@ (80049a8 <xTaskIncrementTick+0x15c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d203      	bcs.n	8004900 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048f8:	4a2e      	ldr	r2, [pc, #184]	@ (80049b4 <xTaskIncrementTick+0x168>)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6013      	str	r3, [r2, #0]
						break;
 80048fe:	e02f      	b.n	8004960 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	3304      	adds	r3, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7fe ff8d 	bl	8003824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3318      	adds	r3, #24
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe ff84 	bl	8003824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	4b25      	ldr	r3, [pc, #148]	@ (80049b8 <xTaskIncrementTick+0x16c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d903      	bls.n	8004930 <xTaskIncrementTick+0xe4>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a22      	ldr	r2, [pc, #136]	@ (80049b8 <xTaskIncrementTick+0x16c>)
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4a1f      	ldr	r2, [pc, #124]	@ (80049bc <xTaskIncrementTick+0x170>)
 800493e:	441a      	add	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f7fe ff11 	bl	800376e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004950:	4b1b      	ldr	r3, [pc, #108]	@ (80049c0 <xTaskIncrementTick+0x174>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	429a      	cmp	r2, r3
 8004958:	d3b3      	bcc.n	80048c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800495a:	2301      	movs	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495e:	e7b0      	b.n	80048c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004960:	4b17      	ldr	r3, [pc, #92]	@ (80049c0 <xTaskIncrementTick+0x174>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	4915      	ldr	r1, [pc, #84]	@ (80049bc <xTaskIncrementTick+0x170>)
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d907      	bls.n	8004988 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e004      	b.n	8004988 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800497e:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <xTaskIncrementTick+0x178>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	4a0f      	ldr	r2, [pc, #60]	@ (80049c4 <xTaskIncrementTick+0x178>)
 8004986:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004988:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <xTaskIncrementTick+0x17c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004994:	697b      	ldr	r3, [r7, #20]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000f2c 	.word	0x20000f2c
 80049a4:	20000f08 	.word	0x20000f08
 80049a8:	20000ebc 	.word	0x20000ebc
 80049ac:	20000ec0 	.word	0x20000ec0
 80049b0:	20000f1c 	.word	0x20000f1c
 80049b4:	20000f24 	.word	0x20000f24
 80049b8:	20000f0c 	.word	0x20000f0c
 80049bc:	20000a34 	.word	0x20000a34
 80049c0:	20000a30 	.word	0x20000a30
 80049c4:	20000f14 	.word	0x20000f14
 80049c8:	20000f18 	.word	0x20000f18

080049cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049d2:	4b28      	ldr	r3, [pc, #160]	@ (8004a74 <vTaskSwitchContext+0xa8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049da:	4b27      	ldr	r3, [pc, #156]	@ (8004a78 <vTaskSwitchContext+0xac>)
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049e0:	e042      	b.n	8004a68 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80049e2:	4b25      	ldr	r3, [pc, #148]	@ (8004a78 <vTaskSwitchContext+0xac>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049e8:	4b24      	ldr	r3, [pc, #144]	@ (8004a7c <vTaskSwitchContext+0xb0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e011      	b.n	8004a14 <vTaskSwitchContext+0x48>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <vTaskSwitchContext+0x42>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	607b      	str	r3, [r7, #4]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <vTaskSwitchContext+0x3e>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	491a      	ldr	r1, [pc, #104]	@ (8004a80 <vTaskSwitchContext+0xb4>)
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0e3      	beq.n	80049f0 <vTaskSwitchContext+0x24>
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4a13      	ldr	r2, [pc, #76]	@ (8004a80 <vTaskSwitchContext+0xb4>)
 8004a34:	4413      	add	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d104      	bne.n	8004a58 <vTaskSwitchContext+0x8c>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	605a      	str	r2, [r3, #4]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	4a09      	ldr	r2, [pc, #36]	@ (8004a84 <vTaskSwitchContext+0xb8>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4a06      	ldr	r2, [pc, #24]	@ (8004a7c <vTaskSwitchContext+0xb0>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000f2c 	.word	0x20000f2c
 8004a78:	20000f18 	.word	0x20000f18
 8004a7c:	20000f0c 	.word	0x20000f0c
 8004a80:	20000a34 	.word	0x20000a34
 8004a84:	20000a30 	.word	0x20000a30

08004a88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ab0:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <vTaskPlaceOnEventList+0x48>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3318      	adds	r3, #24
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7fe fe7b 	bl	80037b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004abe:	2101      	movs	r1, #1
 8004ac0:	6838      	ldr	r0, [r7, #0]
 8004ac2:	f000 fa85 	bl	8004fd0 <prvAddCurrentTaskToDelayedList>
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000a30 	.word	0x20000a30

08004ad4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	617b      	str	r3, [r7, #20]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3318      	adds	r3, #24
 8004b04:	4619      	mov	r1, r3
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7fe fe31 	bl	800376e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	68b8      	ldr	r0, [r7, #8]
 8004b1c:	f000 fa58 	bl	8004fd0 <prvAddCurrentTaskToDelayedList>
	}
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000a30 	.word	0x20000a30

08004b2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3318      	adds	r3, #24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fe60 	bl	8003824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b64:	4b1d      	ldr	r3, [pc, #116]	@ (8004bdc <xTaskRemoveFromEventList+0xb0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11d      	bne.n	8004ba8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fe57 	bl	8003824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <xTaskRemoveFromEventList+0xb4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d903      	bls.n	8004b8a <xTaskRemoveFromEventList+0x5e>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	4a16      	ldr	r2, [pc, #88]	@ (8004be0 <xTaskRemoveFromEventList+0xb4>)
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a13      	ldr	r2, [pc, #76]	@ (8004be4 <xTaskRemoveFromEventList+0xb8>)
 8004b98:	441a      	add	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe fde4 	bl	800376e <vListInsertEnd>
 8004ba6:	e005      	b.n	8004bb4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3318      	adds	r3, #24
 8004bac:	4619      	mov	r1, r3
 8004bae:	480e      	ldr	r0, [pc, #56]	@ (8004be8 <xTaskRemoveFromEventList+0xbc>)
 8004bb0:	f7fe fddd 	bl	800376e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <xTaskRemoveFromEventList+0xc0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d905      	bls.n	8004bce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <xTaskRemoveFromEventList+0xc4>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e001      	b.n	8004bd2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000f2c 	.word	0x20000f2c
 8004be0:	20000f0c 	.word	0x20000f0c
 8004be4:	20000a34 	.word	0x20000a34
 8004be8:	20000ec4 	.word	0x20000ec4
 8004bec:	20000a30 	.word	0x20000a30
 8004bf0:	20000f18 	.word	0x20000f18

08004bf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <vTaskInternalSetTimeOutState+0x24>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <vTaskInternalSetTimeOutState+0x28>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000f1c 	.word	0x20000f1c
 8004c1c:	20000f08 	.word	0x20000f08

08004c20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	e7fd      	b.n	8004c44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c66:	f000 fe19 	bl	800589c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <xTaskCheckForTimeOut+0xc0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d102      	bne.n	8004c8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	e023      	b.n	8004cd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <xTaskCheckForTimeOut+0xc4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d007      	beq.n	8004ca6 <xTaskCheckForTimeOut+0x86>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	e015      	b.n	8004cd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d20b      	bcs.n	8004cc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff99 	bl	8004bf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	e004      	b.n	8004cd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cd2:	f000 fe13 	bl	80058fc <vPortExitCritical>

	return xReturn;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000f08 	.word	0x20000f08
 8004ce4:	20000f1c 	.word	0x20000f1c

08004ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cec:	4b03      	ldr	r3, [pc, #12]	@ (8004cfc <vTaskMissedYield+0x14>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000f18 	.word	0x20000f18

08004d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d08:	f000 f852 	bl	8004db0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <prvIdleTask+0x28>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d9f9      	bls.n	8004d08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <prvIdleTask+0x2c>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d24:	e7f0      	b.n	8004d08 <prvIdleTask+0x8>
 8004d26:	bf00      	nop
 8004d28:	20000a34 	.word	0x20000a34
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e00c      	b.n	8004d56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a12      	ldr	r2, [pc, #72]	@ (8004d90 <prvInitialiseTaskLists+0x60>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe fce4 	bl	8003718 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3301      	adds	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b37      	cmp	r3, #55	@ 0x37
 8004d5a:	d9ef      	bls.n	8004d3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d5c:	480d      	ldr	r0, [pc, #52]	@ (8004d94 <prvInitialiseTaskLists+0x64>)
 8004d5e:	f7fe fcdb 	bl	8003718 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d62:	480d      	ldr	r0, [pc, #52]	@ (8004d98 <prvInitialiseTaskLists+0x68>)
 8004d64:	f7fe fcd8 	bl	8003718 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d68:	480c      	ldr	r0, [pc, #48]	@ (8004d9c <prvInitialiseTaskLists+0x6c>)
 8004d6a:	f7fe fcd5 	bl	8003718 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d6e:	480c      	ldr	r0, [pc, #48]	@ (8004da0 <prvInitialiseTaskLists+0x70>)
 8004d70:	f7fe fcd2 	bl	8003718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d74:	480b      	ldr	r0, [pc, #44]	@ (8004da4 <prvInitialiseTaskLists+0x74>)
 8004d76:	f7fe fccf 	bl	8003718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <prvInitialiseTaskLists+0x78>)
 8004d7c:	4a05      	ldr	r2, [pc, #20]	@ (8004d94 <prvInitialiseTaskLists+0x64>)
 8004d7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d80:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <prvInitialiseTaskLists+0x7c>)
 8004d82:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <prvInitialiseTaskLists+0x68>)
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000a34 	.word	0x20000a34
 8004d94:	20000e94 	.word	0x20000e94
 8004d98:	20000ea8 	.word	0x20000ea8
 8004d9c:	20000ec4 	.word	0x20000ec4
 8004da0:	20000ed8 	.word	0x20000ed8
 8004da4:	20000ef0 	.word	0x20000ef0
 8004da8:	20000ebc 	.word	0x20000ebc
 8004dac:	20000ec0 	.word	0x20000ec0

08004db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004db6:	e019      	b.n	8004dec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004db8:	f000 fd70 	bl	800589c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004dbc:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <prvCheckTasksWaitingTermination+0x50>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fd2b 	bl	8003824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <prvCheckTasksWaitingTermination+0x54>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004e04 <prvCheckTasksWaitingTermination+0x54>)
 8004dd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4a0a      	ldr	r2, [pc, #40]	@ (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004de0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004de2:	f000 fd8b 	bl	80058fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f810 	bl	8004e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dec:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e1      	bne.n	8004db8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000ed8 	.word	0x20000ed8
 8004e04:	20000f04 	.word	0x20000f04
 8004e08:	20000eec 	.word	0x20000eec

08004e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d108      	bne.n	8004e30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 ff04 	bl	8005c30 <vPortFree>
				vPortFree( pxTCB );
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 ff01 	bl	8005c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e2e:	e019      	b.n	8004e64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d103      	bne.n	8004e42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fef8 	bl	8005c30 <vPortFree>
	}
 8004e40:	e010      	b.n	8004e64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d00b      	beq.n	8004e64 <prvDeleteTCB+0x58>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <prvDeleteTCB+0x54>
	}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <prvResetNextTaskUnblockTime+0x40>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <prvResetNextTaskUnblockTime+0x14>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <prvResetNextTaskUnblockTime+0x16>
 8004e80:	2300      	movs	r3, #0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <prvResetNextTaskUnblockTime+0x44>)
 8004e88:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e8e:	e008      	b.n	8004ea2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e90:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <prvResetNextTaskUnblockTime+0x40>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4a04      	ldr	r2, [pc, #16]	@ (8004eb0 <prvResetNextTaskUnblockTime+0x44>)
 8004ea0:	6013      	str	r3, [r2, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	20000ebc 	.word	0x20000ebc
 8004eb0:	20000f24 	.word	0x20000f24

08004eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <xTaskGetSchedulerState+0x34>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	e008      	b.n	8004eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec8:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <xTaskGetSchedulerState+0x38>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	e001      	b.n	8004eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004eda:	687b      	ldr	r3, [r7, #4]
	}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000f10 	.word	0x20000f10
 8004eec:	20000f2c 	.word	0x20000f2c

08004ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d058      	beq.n	8004fb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f06:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc4 <xTaskPriorityDisinherit+0xd4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d00b      	beq.n	8004f28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60bb      	str	r3, [r7, #8]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4c:	1e5a      	subs	r2, r3, #1
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d02c      	beq.n	8004fb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d128      	bne.n	8004fb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe fc5a 	bl	8003824 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f88:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc8 <xTaskPriorityDisinherit+0xd8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d903      	bls.n	8004f98 <xTaskPriorityDisinherit+0xa8>
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc8 <xTaskPriorityDisinherit+0xd8>)
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4a09      	ldr	r2, [pc, #36]	@ (8004fcc <xTaskPriorityDisinherit+0xdc>)
 8004fa6:	441a      	add	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7fe fbdd 	bl	800376e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fb8:	697b      	ldr	r3, [r7, #20]
	}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000a30 	.word	0x20000a30
 8004fc8:	20000f0c 	.word	0x20000f0c
 8004fcc:	20000a34 	.word	0x20000a34

08004fd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fda:	4b21      	ldr	r3, [pc, #132]	@ (8005060 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe0:	4b20      	ldr	r3, [pc, #128]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fc1c 	bl	8003824 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d10a      	bne.n	800500a <prvAddCurrentTaskToDelayedList+0x3a>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4819      	ldr	r0, [pc, #100]	@ (8005068 <prvAddCurrentTaskToDelayedList+0x98>)
 8005004:	f7fe fbb3 	bl	800376e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005008:	e026      	b.n	8005058 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005012:	4b14      	ldr	r3, [pc, #80]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x94>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	429a      	cmp	r2, r3
 8005020:	d209      	bcs.n	8005036 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005022:	4b12      	ldr	r3, [pc, #72]	@ (800506c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b0f      	ldr	r3, [pc, #60]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x94>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f7fe fbc0 	bl	80037b4 <vListInsert>
}
 8005034:	e010      	b.n	8005058 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005036:	4b0e      	ldr	r3, [pc, #56]	@ (8005070 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b0a      	ldr	r3, [pc, #40]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x94>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7fe fbb6 	bl	80037b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005048:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	d202      	bcs.n	8005058 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005052:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	6013      	str	r3, [r2, #0]
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000f08 	.word	0x20000f08
 8005064:	20000a30 	.word	0x20000a30
 8005068:	20000ef0 	.word	0x20000ef0
 800506c:	20000ec0 	.word	0x20000ec0
 8005070:	20000ebc 	.word	0x20000ebc
 8005074:	20000f24 	.word	0x20000f24

08005078 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005082:	f000 fad9 	bl	8005638 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005086:	4b1d      	ldr	r3, [pc, #116]	@ (80050fc <xTimerCreateTimerTask+0x84>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d021      	beq.n	80050d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005096:	1d3a      	adds	r2, r7, #4
 8005098:	f107 0108 	add.w	r1, r7, #8
 800509c:	f107 030c 	add.w	r3, r7, #12
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe fb1f 	bl	80036e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	9202      	str	r2, [sp, #8]
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	2302      	movs	r3, #2
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	460a      	mov	r2, r1
 80050b8:	4911      	ldr	r1, [pc, #68]	@ (8005100 <xTimerCreateTimerTask+0x88>)
 80050ba:	4812      	ldr	r0, [pc, #72]	@ (8005104 <xTimerCreateTimerTask+0x8c>)
 80050bc:	f7ff f8d2 	bl	8004264 <xTaskCreateStatic>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4a11      	ldr	r2, [pc, #68]	@ (8005108 <xTimerCreateTimerTask+0x90>)
 80050c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050c6:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <xTimerCreateTimerTask+0x90>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050ce:	2301      	movs	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	613b      	str	r3, [r7, #16]
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050f0:	697b      	ldr	r3, [r7, #20]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000f60 	.word	0x20000f60
 8005100:	08008b88 	.word	0x08008b88
 8005104:	0800522d 	.word	0x0800522d
 8005108:	20000f64 	.word	0x20000f64

0800510c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xTimerGenericCommand+0x30>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	623b      	str	r3, [r7, #32]
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800513c:	4b19      	ldr	r3, [pc, #100]	@ (80051a4 <xTimerGenericCommand+0x98>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d02a      	beq.n	800519a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b05      	cmp	r3, #5
 8005154:	dc18      	bgt.n	8005188 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005156:	f7ff fead 	bl	8004eb4 <xTaskGetSchedulerState>
 800515a:	4603      	mov	r3, r0
 800515c:	2b02      	cmp	r3, #2
 800515e:	d109      	bne.n	8005174 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005160:	4b10      	ldr	r3, [pc, #64]	@ (80051a4 <xTimerGenericCommand+0x98>)
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	f107 0110 	add.w	r1, r7, #16
 8005168:	2300      	movs	r3, #0
 800516a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516c:	f7fe fc8e 	bl	8003a8c <xQueueGenericSend>
 8005170:	6278      	str	r0, [r7, #36]	@ 0x24
 8005172:	e012      	b.n	800519a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005174:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <xTimerGenericCommand+0x98>)
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	f107 0110 	add.w	r1, r7, #16
 800517c:	2300      	movs	r3, #0
 800517e:	2200      	movs	r2, #0
 8005180:	f7fe fc84 	bl	8003a8c <xQueueGenericSend>
 8005184:	6278      	str	r0, [r7, #36]	@ 0x24
 8005186:	e008      	b.n	800519a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005188:	4b06      	ldr	r3, [pc, #24]	@ (80051a4 <xTimerGenericCommand+0x98>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	f107 0110 	add.w	r1, r7, #16
 8005190:	2300      	movs	r3, #0
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	f7fe fd7c 	bl	8003c90 <xQueueGenericSendFromISR>
 8005198:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800519c:	4618      	mov	r0, r3
 800519e:	3728      	adds	r7, #40	@ 0x28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000f60 	.word	0x20000f60

080051a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <prvProcessExpiredTimer+0x80>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	3304      	adds	r3, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe fb2f 	bl	8003824 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d123      	bne.n	8005216 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	18d1      	adds	r1, r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	6978      	ldr	r0, [r7, #20]
 80051dc:	f000 f8cc 	bl	8005378 <prvInsertTimerInActiveList>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d017      	beq.n	8005216 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051e6:	2300      	movs	r3, #0
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	2300      	movs	r3, #0
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	2100      	movs	r1, #0
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f7ff ff8b 	bl	800510c <xTimerGenericCommand>
 80051f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60fb      	str	r3, [r7, #12]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521a:	6978      	ldr	r0, [r7, #20]
 800521c:	4798      	blx	r3
}
 800521e:	bf00      	nop
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000f58 	.word	0x20000f58

0800522c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005234:	f107 0308 	add.w	r3, r7, #8
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f859 	bl	80052f0 <prvGetNextExpireTime>
 800523e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4619      	mov	r1, r3
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f805 	bl	8005254 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800524a:	f000 f8d7 	bl	80053fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800524e:	bf00      	nop
 8005250:	e7f0      	b.n	8005234 <prvTimerTask+0x8>
	...

08005254 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800525e:	f7ff fa3b 	bl	80046d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005262:	f107 0308 	add.w	r3, r7, #8
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f866 	bl	8005338 <prvSampleTimeNow>
 800526c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d130      	bne.n	80052d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <prvProcessTimerOrBlockTask+0x3c>
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	429a      	cmp	r2, r3
 8005280:	d806      	bhi.n	8005290 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005282:	f7ff fa37 	bl	80046f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ff8d 	bl	80051a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800528e:	e024      	b.n	80052da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005296:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <prvProcessTimerOrBlockTask+0x90>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052a8:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <prvProcessTimerOrBlockTask+0x94>)
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	4619      	mov	r1, r3
 80052b6:	f7fe ffa1 	bl	80041fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052ba:	f7ff fa1b 	bl	80046f4 <xTaskResumeAll>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052c4:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <prvProcessTimerOrBlockTask+0x98>)
 80052c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	f3bf 8f6f 	isb	sy
}
 80052d4:	e001      	b.n	80052da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052d6:	f7ff fa0d 	bl	80046f4 <xTaskResumeAll>
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000f5c 	.word	0x20000f5c
 80052e8:	20000f60 	.word	0x20000f60
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <prvGetNextExpireTime+0x44>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d105      	bne.n	8005322 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005316:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <prvGetNextExpireTime+0x44>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e001      	b.n	8005326 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000f58 	.word	0x20000f58

08005338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005340:	f7ff fa76 	bl	8004830 <xTaskGetTickCount>
 8005344:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <prvSampleTimeNow+0x3c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	429a      	cmp	r2, r3
 800534e:	d205      	bcs.n	800535c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005350:	f000 f910 	bl	8005574 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e002      	b.n	8005362 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005362:	4a04      	ldr	r2, [pc, #16]	@ (8005374 <prvSampleTimeNow+0x3c>)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005368:	68fb      	ldr	r3, [r7, #12]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000f68 	.word	0x20000f68

08005378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d812      	bhi.n	80053c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	1ad2      	subs	r2, r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d302      	bcc.n	80053b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e01b      	b.n	80053ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053b2:	4b10      	ldr	r3, [pc, #64]	@ (80053f4 <prvInsertTimerInActiveList+0x7c>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f7fe f9f9 	bl	80037b4 <vListInsert>
 80053c2:	e012      	b.n	80053ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d206      	bcs.n	80053da <prvInsertTimerInActiveList+0x62>
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d302      	bcc.n	80053da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053d4:	2301      	movs	r3, #1
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e007      	b.n	80053ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053da:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <prvInsertTimerInActiveList+0x80>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3304      	adds	r3, #4
 80053e2:	4619      	mov	r1, r3
 80053e4:	4610      	mov	r0, r2
 80053e6:	f7fe f9e5 	bl	80037b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053ea:	697b      	ldr	r3, [r7, #20]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000f5c 	.word	0x20000f5c
 80053f8:	20000f58 	.word	0x20000f58

080053fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08e      	sub	sp, #56	@ 0x38
 8005400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005402:	e0a5      	b.n	8005550 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	da19      	bge.n	800543e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	3304      	adds	r3, #4
 800540e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	61fb      	str	r3, [r7, #28]
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	e7fd      	b.n	800542a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800542e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005434:	6850      	ldr	r0, [r2, #4]
 8005436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005438:	6892      	ldr	r2, [r2, #8]
 800543a:	4611      	mov	r1, r2
 800543c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f2c0 8085 	blt.w	8005550 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	3304      	adds	r3, #4
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe f9e4 	bl	8003824 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800545c:	463b      	mov	r3, r7
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ff6a 	bl	8005338 <prvSampleTimeNow>
 8005464:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b09      	cmp	r3, #9
 800546a:	d86c      	bhi.n	8005546 <prvProcessReceivedCommands+0x14a>
 800546c:	a201      	add	r2, pc, #4	@ (adr r2, 8005474 <prvProcessReceivedCommands+0x78>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	0800549d 	.word	0x0800549d
 8005478:	0800549d 	.word	0x0800549d
 800547c:	0800549d 	.word	0x0800549d
 8005480:	08005547 	.word	0x08005547
 8005484:	080054fb 	.word	0x080054fb
 8005488:	08005535 	.word	0x08005535
 800548c:	0800549d 	.word	0x0800549d
 8005490:	0800549d 	.word	0x0800549d
 8005494:	08005547 	.word	0x08005547
 8005498:	080054fb 	.word	0x080054fb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	18d1      	adds	r1, r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054aa:	f7ff ff65 	bl	8005378 <prvInsertTimerInActiveList>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d04a      	beq.n	800554a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d142      	bne.n	800554a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	441a      	add	r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2300      	movs	r3, #0
 80054d2:	2100      	movs	r1, #0
 80054d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d6:	f7ff fe19 	bl	800510c <xTimerGenericCommand>
 80054da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d133      	bne.n	800554a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	61bb      	str	r3, [r7, #24]
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	e7fd      	b.n	80054f6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	617b      	str	r3, [r7, #20]
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	18d1      	adds	r1, r2, r3
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800552e:	f7ff ff23 	bl	8005378 <prvInsertTimerInActiveList>
					break;
 8005532:	e00d      	b.n	8005550 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d107      	bne.n	800554e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800553e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005540:	f000 fb76 	bl	8005c30 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005544:	e003      	b.n	800554e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005546:	bf00      	nop
 8005548:	e002      	b.n	8005550 <prvProcessReceivedCommands+0x154>
					break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <prvProcessReceivedCommands+0x154>
					break;
 800554e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005550:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <prvProcessReceivedCommands+0x174>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	1d39      	adds	r1, r7, #4
 8005556:	2200      	movs	r2, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe fc35 	bl	8003dc8 <xQueueReceive>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	f47f af4f 	bne.w	8005404 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	3730      	adds	r7, #48	@ 0x30
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000f60 	.word	0x20000f60

08005574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800557a:	e046      	b.n	800560a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800557c:	4b2c      	ldr	r3, [pc, #176]	@ (8005630 <prvSwitchTimerLists+0xbc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005586:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <prvSwitchTimerLists+0xbc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3304      	adds	r3, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe f945 	bl	8003824 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d12f      	bne.n	800560a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d90e      	bls.n	80055da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055c8:	4b19      	ldr	r3, [pc, #100]	@ (8005630 <prvSwitchTimerLists+0xbc>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f7fe f8ee 	bl	80037b4 <vListInsert>
 80055d8:	e017      	b.n	800560a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055da:	2300      	movs	r3, #0
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	2300      	movs	r3, #0
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	2100      	movs	r1, #0
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fd91 	bl	800510c <xTimerGenericCommand>
 80055ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <prvSwitchTimerLists+0x96>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	603b      	str	r3, [r7, #0]
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop
 8005608:	e7fd      	b.n	8005606 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800560a:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <prvSwitchTimerLists+0xbc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1b3      	bne.n	800557c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005614:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <prvSwitchTimerLists+0xbc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <prvSwitchTimerLists+0xc0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a04      	ldr	r2, [pc, #16]	@ (8005630 <prvSwitchTimerLists+0xbc>)
 8005620:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005622:	4a04      	ldr	r2, [pc, #16]	@ (8005634 <prvSwitchTimerLists+0xc0>)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000f58 	.word	0x20000f58
 8005634:	20000f5c 	.word	0x20000f5c

08005638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800563e:	f000 f92d 	bl	800589c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005642:	4b15      	ldr	r3, [pc, #84]	@ (8005698 <prvCheckForValidListAndQueue+0x60>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d120      	bne.n	800568c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800564a:	4814      	ldr	r0, [pc, #80]	@ (800569c <prvCheckForValidListAndQueue+0x64>)
 800564c:	f7fe f864 	bl	8003718 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005650:	4813      	ldr	r0, [pc, #76]	@ (80056a0 <prvCheckForValidListAndQueue+0x68>)
 8005652:	f7fe f861 	bl	8003718 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005656:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <prvCheckForValidListAndQueue+0x6c>)
 8005658:	4a10      	ldr	r2, [pc, #64]	@ (800569c <prvCheckForValidListAndQueue+0x64>)
 800565a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800565c:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <prvCheckForValidListAndQueue+0x70>)
 800565e:	4a10      	ldr	r2, [pc, #64]	@ (80056a0 <prvCheckForValidListAndQueue+0x68>)
 8005660:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005662:	2300      	movs	r3, #0
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <prvCheckForValidListAndQueue+0x74>)
 8005668:	4a11      	ldr	r2, [pc, #68]	@ (80056b0 <prvCheckForValidListAndQueue+0x78>)
 800566a:	2110      	movs	r1, #16
 800566c:	200a      	movs	r0, #10
 800566e:	f7fe f96d 	bl	800394c <xQueueGenericCreateStatic>
 8005672:	4603      	mov	r3, r0
 8005674:	4a08      	ldr	r2, [pc, #32]	@ (8005698 <prvCheckForValidListAndQueue+0x60>)
 8005676:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005678:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <prvCheckForValidListAndQueue+0x60>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005680:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <prvCheckForValidListAndQueue+0x60>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	490b      	ldr	r1, [pc, #44]	@ (80056b4 <prvCheckForValidListAndQueue+0x7c>)
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fd90 	bl	80041ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800568c:	f000 f936 	bl	80058fc <vPortExitCritical>
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000f60 	.word	0x20000f60
 800569c:	20000f30 	.word	0x20000f30
 80056a0:	20000f44 	.word	0x20000f44
 80056a4:	20000f58 	.word	0x20000f58
 80056a8:	20000f5c 	.word	0x20000f5c
 80056ac:	2000100c 	.word	0x2000100c
 80056b0:	20000f6c 	.word	0x20000f6c
 80056b4:	08008b90 	.word	0x08008b90

080056b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3b04      	subs	r3, #4
 80056c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3b04      	subs	r3, #4
 80056d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b04      	subs	r3, #4
 80056e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056e8:	4a08      	ldr	r2, [pc, #32]	@ (800570c <pxPortInitialiseStack+0x54>)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b14      	subs	r3, #20
 80056f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b20      	subs	r3, #32
 80056fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005700:	68fb      	ldr	r3, [r7, #12]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr
 800570c:	08005711 	.word	0x08005711

08005710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005716:	2300      	movs	r3, #0
 8005718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800571a:	4b12      	ldr	r3, [pc, #72]	@ (8005764 <prvTaskExitError+0x54>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d00b      	beq.n	800573c <prvTaskExitError+0x2c>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	60fb      	str	r3, [r7, #12]
}
 8005736:	bf00      	nop
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <prvTaskExitError+0x28>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	60bb      	str	r3, [r7, #8]
}
 800574e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005750:	bf00      	nop
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0fc      	beq.n	8005752 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	2000004c 	.word	0x2000004c
	...

08005770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005770:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <pxCurrentTCBConst2>)
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	6808      	ldr	r0, [r1, #0]
 8005776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800577a:	f380 8809 	msr	PSP, r0
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8811 	msr	BASEPRI, r0
 800578a:	f04e 0e0d 	orr.w	lr, lr, #13
 800578e:	4770      	bx	lr

08005790 <pxCurrentTCBConst2>:
 8005790:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005798:	4806      	ldr	r0, [pc, #24]	@ (80057b4 <prvPortStartFirstTask+0x1c>)
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	6800      	ldr	r0, [r0, #0]
 800579e:	f380 8808 	msr	MSP, r0
 80057a2:	b662      	cpsie	i
 80057a4:	b661      	cpsie	f
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	df00      	svc	0
 80057b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057b2:	bf00      	nop
 80057b4:	e000ed08 	.word	0xe000ed08

080057b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057be:	4b32      	ldr	r3, [pc, #200]	@ (8005888 <xPortStartScheduler+0xd0>)
 80057c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	22ff      	movs	r2, #255	@ 0xff
 80057ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b2a      	ldr	r3, [pc, #168]	@ (800588c <xPortStartScheduler+0xd4>)
 80057e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005890 <xPortStartScheduler+0xd8>)
 80057e8:	2207      	movs	r2, #7
 80057ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ec:	e009      	b.n	8005802 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80057ee:	4b28      	ldr	r3, [pc, #160]	@ (8005890 <xPortStartScheduler+0xd8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	4a26      	ldr	r2, [pc, #152]	@ (8005890 <xPortStartScheduler+0xd8>)
 80057f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b80      	cmp	r3, #128	@ 0x80
 800580c:	d0ef      	beq.n	80057ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800580e:	4b20      	ldr	r3, [pc, #128]	@ (8005890 <xPortStartScheduler+0xd8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1c3 0307 	rsb	r3, r3, #7
 8005816:	2b04      	cmp	r3, #4
 8005818:	d00b      	beq.n	8005832 <xPortStartScheduler+0x7a>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	60bb      	str	r3, [r7, #8]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005832:	4b17      	ldr	r3, [pc, #92]	@ (8005890 <xPortStartScheduler+0xd8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <xPortStartScheduler+0xd8>)
 800583a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800583c:	4b14      	ldr	r3, [pc, #80]	@ (8005890 <xPortStartScheduler+0xd8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005844:	4a12      	ldr	r2, [pc, #72]	@ (8005890 <xPortStartScheduler+0xd8>)
 8005846:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005850:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <xPortStartScheduler+0xdc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0f      	ldr	r2, [pc, #60]	@ (8005894 <xPortStartScheduler+0xdc>)
 8005856:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800585a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800585c:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <xPortStartScheduler+0xdc>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0c      	ldr	r2, [pc, #48]	@ (8005894 <xPortStartScheduler+0xdc>)
 8005862:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005866:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005868:	f000 f8b8 	bl	80059dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800586c:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <xPortStartScheduler+0xe0>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005872:	f7ff ff91 	bl	8005798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005876:	f7ff f8a9 	bl	80049cc <vTaskSwitchContext>
	prvTaskExitError();
 800587a:	f7ff ff49 	bl	8005710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	e000e400 	.word	0xe000e400
 800588c:	2000105c 	.word	0x2000105c
 8005890:	20001060 	.word	0x20001060
 8005894:	e000ed20 	.word	0xe000ed20
 8005898:	2000004c 	.word	0x2000004c

0800589c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	607b      	str	r3, [r7, #4]
}
 80058b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058b6:	4b0f      	ldr	r3, [pc, #60]	@ (80058f4 <vPortEnterCritical+0x58>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3301      	adds	r3, #1
 80058bc:	4a0d      	ldr	r2, [pc, #52]	@ (80058f4 <vPortEnterCritical+0x58>)
 80058be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058c0:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <vPortEnterCritical+0x58>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d110      	bne.n	80058ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <vPortEnterCritical+0x5c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <vPortEnterCritical+0x4e>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	603b      	str	r3, [r7, #0]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <vPortEnterCritical+0x4a>
	}
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	2000004c 	.word	0x2000004c
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005902:	4b12      	ldr	r3, [pc, #72]	@ (800594c <vPortExitCritical+0x50>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <vPortExitCritical+0x26>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	607b      	str	r3, [r7, #4]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005922:	4b0a      	ldr	r3, [pc, #40]	@ (800594c <vPortExitCritical+0x50>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3b01      	subs	r3, #1
 8005928:	4a08      	ldr	r2, [pc, #32]	@ (800594c <vPortExitCritical+0x50>)
 800592a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800592c:	4b07      	ldr	r3, [pc, #28]	@ (800594c <vPortExitCritical+0x50>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <vPortExitCritical+0x44>
 8005934:	2300      	movs	r3, #0
 8005936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f383 8811 	msr	BASEPRI, r3
}
 800593e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	2000004c 	.word	0x2000004c

08005950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005950:	f3ef 8009 	mrs	r0, PSP
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <pxCurrentTCBConst>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005960:	6010      	str	r0, [r2, #0]
 8005962:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005966:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800596a:	f380 8811 	msr	BASEPRI, r0
 800596e:	f7ff f82d 	bl	80049cc <vTaskSwitchContext>
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005986:	f380 8809 	msr	PSP, r0
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	4770      	bx	lr

08005990 <pxCurrentTCBConst>:
 8005990:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop

08005998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	607b      	str	r3, [r7, #4]
}
 80059b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059b2:	f7fe ff4b 	bl	800484c <xTaskIncrementTick>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <xPortSysTickHandler+0x40>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	2300      	movs	r3, #0
 80059c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f383 8811 	msr	BASEPRI, r3
}
 80059ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059e0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <vPortSetupTimerInterrupt+0x30>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <vPortSetupTimerInterrupt+0x34>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059ec:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <vPortSetupTimerInterrupt+0x38>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a09      	ldr	r2, [pc, #36]	@ (8005a18 <vPortSetupTimerInterrupt+0x3c>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	4a08      	ldr	r2, [pc, #32]	@ (8005a1c <vPortSetupTimerInterrupt+0x40>)
 80059fa:	3b01      	subs	r3, #1
 80059fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059fe:	4b03      	ldr	r3, [pc, #12]	@ (8005a0c <vPortSetupTimerInterrupt+0x30>)
 8005a00:	2207      	movs	r2, #7
 8005a02:	601a      	str	r2, [r3, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	e000e010 	.word	0xe000e010
 8005a10:	e000e018 	.word	0xe000e018
 8005a14:	20000040 	.word	0x20000040
 8005a18:	10624dd3 	.word	0x10624dd3
 8005a1c:	e000e014 	.word	0xe000e014

08005a20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a26:	f3ef 8305 	mrs	r3, IPSR
 8005a2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d915      	bls.n	8005a5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a32:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <vPortValidateInterruptPriority+0x70>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a3c:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <vPortValidateInterruptPriority+0x74>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	7afa      	ldrb	r2, [r7, #11]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d20b      	bcs.n	8005a5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	607b      	str	r3, [r7, #4]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a98 <vPortValidateInterruptPriority+0x78>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a66:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <vPortValidateInterruptPriority+0x7c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d90b      	bls.n	8005a86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	603b      	str	r3, [r7, #0]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <vPortValidateInterruptPriority+0x62>
	}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	e000e3f0 	.word	0xe000e3f0
 8005a94:	2000105c 	.word	0x2000105c
 8005a98:	e000ed0c 	.word	0xe000ed0c
 8005a9c:	20001060 	.word	0x20001060

08005aa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	@ 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005aac:	f7fe fe14 	bl	80046d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c1c <pvPortMalloc+0x17c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ab8:	f000 f916 	bl	8005ce8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005abc:	4b58      	ldr	r3, [pc, #352]	@ (8005c20 <pvPortMalloc+0x180>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f040 8090 	bne.w	8005bea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01e      	beq.n	8005b0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f023 0307 	bic.w	r3, r3, #7
 8005ae8:	3308      	adds	r3, #8
 8005aea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <pvPortMalloc+0x6e>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	617b      	str	r3, [r7, #20]
}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	e7fd      	b.n	8005b0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d06a      	beq.n	8005bea <pvPortMalloc+0x14a>
 8005b14:	4b43      	ldr	r3, [pc, #268]	@ (8005c24 <pvPortMalloc+0x184>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d865      	bhi.n	8005bea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b1e:	4b42      	ldr	r3, [pc, #264]	@ (8005c28 <pvPortMalloc+0x188>)
 8005b20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b22:	4b41      	ldr	r3, [pc, #260]	@ (8005c28 <pvPortMalloc+0x188>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b28:	e004      	b.n	8005b34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d903      	bls.n	8005b46 <pvPortMalloc+0xa6>
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f1      	bne.n	8005b2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b46:	4b35      	ldr	r3, [pc, #212]	@ (8005c1c <pvPortMalloc+0x17c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d04c      	beq.n	8005bea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2208      	movs	r2, #8
 8005b56:	4413      	add	r3, r2
 8005b58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	1ad2      	subs	r2, r2, r3
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d920      	bls.n	8005bb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <pvPortMalloc+0xfc>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	613b      	str	r3, [r7, #16]
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	e7fd      	b.n	8005b98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bae:	69b8      	ldr	r0, [r7, #24]
 8005bb0:	f000 f8fc 	bl	8005dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c24 <pvPortMalloc+0x184>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	4a19      	ldr	r2, [pc, #100]	@ (8005c24 <pvPortMalloc+0x184>)
 8005bc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bc2:	4b18      	ldr	r3, [pc, #96]	@ (8005c24 <pvPortMalloc+0x184>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b19      	ldr	r3, [pc, #100]	@ (8005c2c <pvPortMalloc+0x18c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d203      	bcs.n	8005bd6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bce:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <pvPortMalloc+0x184>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <pvPortMalloc+0x18c>)
 8005bd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	4b11      	ldr	r3, [pc, #68]	@ (8005c20 <pvPortMalloc+0x180>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bea:	f7fe fd83 	bl	80046f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <pvPortMalloc+0x170>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <pvPortMalloc+0x16c>
	return pvReturn;
 8005c10:	69fb      	ldr	r3, [r7, #28]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3728      	adds	r7, #40	@ 0x28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000200c 	.word	0x2000200c
 8005c20:	20002018 	.word	0x20002018
 8005c24:	20002010 	.word	0x20002010
 8005c28:	20002004 	.word	0x20002004
 8005c2c:	20002014 	.word	0x20002014

08005c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d04a      	beq.n	8005cd8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c42:	2308      	movs	r3, #8
 8005c44:	425b      	negs	r3, r3
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4413      	add	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4b22      	ldr	r3, [pc, #136]	@ (8005ce0 <vPortFree+0xb0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <vPortFree+0x46>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60fb      	str	r3, [r7, #12]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <vPortFree+0x66>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60bb      	str	r3, [r7, #8]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ce0 <vPortFree+0xb0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d019      	beq.n	8005cd8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d115      	bne.n	8005cd8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce0 <vPortFree+0xb0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cbc:	f7fe fd0c 	bl	80046d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <vPortFree+0xb4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4413      	add	r3, r2
 8005cca:	4a06      	ldr	r2, [pc, #24]	@ (8005ce4 <vPortFree+0xb4>)
 8005ccc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cce:	6938      	ldr	r0, [r7, #16]
 8005cd0:	f000 f86c 	bl	8005dac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cd4:	f7fe fd0e 	bl	80046f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cd8:	bf00      	nop
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20002018 	.word	0x20002018
 8005ce4:	20002010 	.word	0x20002010

08005ce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cee:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8005cf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cf4:	4b27      	ldr	r3, [pc, #156]	@ (8005d94 <prvHeapInit+0xac>)
 8005cf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3307      	adds	r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <prvHeapInit+0xac>)
 8005d18:	4413      	add	r3, r2
 8005d1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d20:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <prvHeapInit+0xb0>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d26:	4b1c      	ldr	r3, [pc, #112]	@ (8005d98 <prvHeapInit+0xb0>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d34:	2208      	movs	r2, #8
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0307 	bic.w	r3, r3, #7
 8005d42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4a15      	ldr	r2, [pc, #84]	@ (8005d9c <prvHeapInit+0xb4>)
 8005d48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d4a:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <prvHeapInit+0xb4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d52:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <prvHeapInit+0xb4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d68:	4b0c      	ldr	r3, [pc, #48]	@ (8005d9c <prvHeapInit+0xb4>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a0a      	ldr	r2, [pc, #40]	@ (8005da0 <prvHeapInit+0xb8>)
 8005d76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4a09      	ldr	r2, [pc, #36]	@ (8005da4 <prvHeapInit+0xbc>)
 8005d7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d80:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <prvHeapInit+0xc0>)
 8005d82:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d86:	601a      	str	r2, [r3, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20001064 	.word	0x20001064
 8005d98:	20002004 	.word	0x20002004
 8005d9c:	2000200c 	.word	0x2000200c
 8005da0:	20002014 	.word	0x20002014
 8005da4:	20002010 	.word	0x20002010
 8005da8:	20002018 	.word	0x20002018

08005dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005db4:	4b27      	ldr	r3, [pc, #156]	@ (8005e54 <prvInsertBlockIntoFreeList+0xa8>)
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e002      	b.n	8005dc0 <prvInsertBlockIntoFreeList+0x14>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d8f7      	bhi.n	8005dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d108      	bne.n	8005dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	441a      	add	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	441a      	add	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d118      	bne.n	8005e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4b14      	ldr	r3, [pc, #80]	@ (8005e58 <prvInsertBlockIntoFreeList+0xac>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d00d      	beq.n	8005e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	441a      	add	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e008      	b.n	8005e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <prvInsertBlockIntoFreeList+0xac>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e003      	b.n	8005e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d002      	beq.n	8005e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr
 8005e54:	20002004 	.word	0x20002004
 8005e58:	2000200c 	.word	0x2000200c

08005e5c <__cvt>:
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e62:	461d      	mov	r5, r3
 8005e64:	bfbb      	ittet	lt
 8005e66:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005e6a:	461d      	movlt	r5, r3
 8005e6c:	2300      	movge	r3, #0
 8005e6e:	232d      	movlt	r3, #45	@ 0x2d
 8005e70:	b088      	sub	sp, #32
 8005e72:	4614      	mov	r4, r2
 8005e74:	bfb8      	it	lt
 8005e76:	4614      	movlt	r4, r2
 8005e78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e7a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005e7c:	7013      	strb	r3, [r2, #0]
 8005e7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e80:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005e84:	f023 0820 	bic.w	r8, r3, #32
 8005e88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e8c:	d005      	beq.n	8005e9a <__cvt+0x3e>
 8005e8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e92:	d100      	bne.n	8005e96 <__cvt+0x3a>
 8005e94:	3601      	adds	r6, #1
 8005e96:	2302      	movs	r3, #2
 8005e98:	e000      	b.n	8005e9c <__cvt+0x40>
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	aa07      	add	r2, sp, #28
 8005e9e:	9204      	str	r2, [sp, #16]
 8005ea0:	aa06      	add	r2, sp, #24
 8005ea2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ea6:	e9cd 3600 	strd	r3, r6, [sp]
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	f000 fe7b 	bl	8006ba8 <_dtoa_r>
 8005eb2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	d119      	bne.n	8005eee <__cvt+0x92>
 8005eba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ebc:	07db      	lsls	r3, r3, #31
 8005ebe:	d50e      	bpl.n	8005ede <__cvt+0x82>
 8005ec0:	eb00 0906 	add.w	r9, r0, r6
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4620      	mov	r0, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	f7fa fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8005ed0:	b108      	cbz	r0, 8005ed6 <__cvt+0x7a>
 8005ed2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ed6:	2230      	movs	r2, #48	@ 0x30
 8005ed8:	9b07      	ldr	r3, [sp, #28]
 8005eda:	454b      	cmp	r3, r9
 8005edc:	d31e      	bcc.n	8005f1c <__cvt+0xc0>
 8005ede:	4638      	mov	r0, r7
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005ee4:	1bdb      	subs	r3, r3, r7
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	b008      	add	sp, #32
 8005eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ef2:	eb00 0906 	add.w	r9, r0, r6
 8005ef6:	d1e5      	bne.n	8005ec4 <__cvt+0x68>
 8005ef8:	7803      	ldrb	r3, [r0, #0]
 8005efa:	2b30      	cmp	r3, #48	@ 0x30
 8005efc:	d10a      	bne.n	8005f14 <__cvt+0xb8>
 8005efe:	2200      	movs	r2, #0
 8005f00:	2300      	movs	r3, #0
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8005f0a:	b918      	cbnz	r0, 8005f14 <__cvt+0xb8>
 8005f0c:	f1c6 0601 	rsb	r6, r6, #1
 8005f10:	f8ca 6000 	str.w	r6, [sl]
 8005f14:	f8da 3000 	ldr.w	r3, [sl]
 8005f18:	4499      	add	r9, r3
 8005f1a:	e7d3      	b.n	8005ec4 <__cvt+0x68>
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	9107      	str	r1, [sp, #28]
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e7d9      	b.n	8005ed8 <__cvt+0x7c>

08005f24 <__exponent>:
 8005f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f26:	2900      	cmp	r1, #0
 8005f28:	bfb6      	itet	lt
 8005f2a:	232d      	movlt	r3, #45	@ 0x2d
 8005f2c:	232b      	movge	r3, #43	@ 0x2b
 8005f2e:	4249      	neglt	r1, r1
 8005f30:	2909      	cmp	r1, #9
 8005f32:	7002      	strb	r2, [r0, #0]
 8005f34:	7043      	strb	r3, [r0, #1]
 8005f36:	dd29      	ble.n	8005f8c <__exponent+0x68>
 8005f38:	f10d 0307 	add.w	r3, sp, #7
 8005f3c:	461d      	mov	r5, r3
 8005f3e:	270a      	movs	r7, #10
 8005f40:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f44:	461a      	mov	r2, r3
 8005f46:	fb07 1416 	mls	r4, r7, r6, r1
 8005f4a:	3430      	adds	r4, #48	@ 0x30
 8005f4c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f50:	460c      	mov	r4, r1
 8005f52:	2c63      	cmp	r4, #99	@ 0x63
 8005f54:	4631      	mov	r1, r6
 8005f56:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f5a:	dcf1      	bgt.n	8005f40 <__exponent+0x1c>
 8005f5c:	3130      	adds	r1, #48	@ 0x30
 8005f5e:	1e94      	subs	r4, r2, #2
 8005f60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f64:	4623      	mov	r3, r4
 8005f66:	1c41      	adds	r1, r0, #1
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	d30a      	bcc.n	8005f82 <__exponent+0x5e>
 8005f6c:	f10d 0309 	add.w	r3, sp, #9
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	42ac      	cmp	r4, r5
 8005f74:	bf88      	it	hi
 8005f76:	2300      	movhi	r3, #0
 8005f78:	3302      	adds	r3, #2
 8005f7a:	4403      	add	r3, r0
 8005f7c:	1a18      	subs	r0, r3, r0
 8005f7e:	b003      	add	sp, #12
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f82:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f86:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f8a:	e7ed      	b.n	8005f68 <__exponent+0x44>
 8005f8c:	2330      	movs	r3, #48	@ 0x30
 8005f8e:	3130      	adds	r1, #48	@ 0x30
 8005f90:	7083      	strb	r3, [r0, #2]
 8005f92:	70c1      	strb	r1, [r0, #3]
 8005f94:	1d03      	adds	r3, r0, #4
 8005f96:	e7f1      	b.n	8005f7c <__exponent+0x58>

08005f98 <_printf_float>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	b091      	sub	sp, #68	@ 0x44
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	4605      	mov	r5, r0
 8005faa:	f000 fce1 	bl	8006970 <_localeconv_r>
 8005fae:	6803      	ldr	r3, [r0, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	9308      	str	r3, [sp, #32]
 8005fb4:	f7fa f8cc 	bl	8000150 <strlen>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	930e      	str	r3, [sp, #56]	@ 0x38
 8005fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005fc2:	3307      	adds	r3, #7
 8005fc4:	f023 0307 	bic.w	r3, r3, #7
 8005fc8:	f103 0208 	add.w	r2, r3, #8
 8005fcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fd0:	f8d4 b000 	ldr.w	fp, [r4]
 8005fd4:	f8c8 2000 	str.w	r2, [r8]
 8005fd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ff2:	4b9c      	ldr	r3, [pc, #624]	@ (8006264 <_printf_float+0x2cc>)
 8005ff4:	f7fa fd0a 	bl	8000a0c <__aeabi_dcmpun>
 8005ff8:	bb70      	cbnz	r0, 8006058 <_printf_float+0xc0>
 8005ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8006002:	4b98      	ldr	r3, [pc, #608]	@ (8006264 <_printf_float+0x2cc>)
 8006004:	f7fa fce4 	bl	80009d0 <__aeabi_dcmple>
 8006008:	bb30      	cbnz	r0, 8006058 <_printf_float+0xc0>
 800600a:	2200      	movs	r2, #0
 800600c:	2300      	movs	r3, #0
 800600e:	4640      	mov	r0, r8
 8006010:	4649      	mov	r1, r9
 8006012:	f7fa fcd3 	bl	80009bc <__aeabi_dcmplt>
 8006016:	b110      	cbz	r0, 800601e <_printf_float+0x86>
 8006018:	232d      	movs	r3, #45	@ 0x2d
 800601a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800601e:	4a92      	ldr	r2, [pc, #584]	@ (8006268 <_printf_float+0x2d0>)
 8006020:	4b92      	ldr	r3, [pc, #584]	@ (800626c <_printf_float+0x2d4>)
 8006022:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006026:	bf94      	ite	ls
 8006028:	4690      	movls	r8, r2
 800602a:	4698      	movhi	r8, r3
 800602c:	2303      	movs	r3, #3
 800602e:	f04f 0900 	mov.w	r9, #0
 8006032:	6123      	str	r3, [r4, #16]
 8006034:	f02b 0304 	bic.w	r3, fp, #4
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	4633      	mov	r3, r6
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	9700      	str	r7, [sp, #0]
 8006042:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006044:	f000 f9d4 	bl	80063f0 <_printf_common>
 8006048:	3001      	adds	r0, #1
 800604a:	f040 8090 	bne.w	800616e <_printf_float+0x1d6>
 800604e:	f04f 30ff 	mov.w	r0, #4294967295
 8006052:	b011      	add	sp, #68	@ 0x44
 8006054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa fcd4 	bl	8000a0c <__aeabi_dcmpun>
 8006064:	b148      	cbz	r0, 800607a <_printf_float+0xe2>
 8006066:	464b      	mov	r3, r9
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfb8      	it	lt
 800606c:	232d      	movlt	r3, #45	@ 0x2d
 800606e:	4a80      	ldr	r2, [pc, #512]	@ (8006270 <_printf_float+0x2d8>)
 8006070:	bfb8      	it	lt
 8006072:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006076:	4b7f      	ldr	r3, [pc, #508]	@ (8006274 <_printf_float+0x2dc>)
 8006078:	e7d3      	b.n	8006022 <_printf_float+0x8a>
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	d13f      	bne.n	8006104 <_printf_float+0x16c>
 8006084:	2306      	movs	r3, #6
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	9206      	str	r2, [sp, #24]
 8006092:	aa0e      	add	r2, sp, #56	@ 0x38
 8006094:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006098:	aa0d      	add	r2, sp, #52	@ 0x34
 800609a:	9203      	str	r2, [sp, #12]
 800609c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80060a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	4642      	mov	r2, r8
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4628      	mov	r0, r5
 80060ac:	464b      	mov	r3, r9
 80060ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80060b0:	f7ff fed4 	bl	8005e5c <__cvt>
 80060b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060b6:	4680      	mov	r8, r0
 80060b8:	2947      	cmp	r1, #71	@ 0x47
 80060ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80060bc:	d128      	bne.n	8006110 <_printf_float+0x178>
 80060be:	1cc8      	adds	r0, r1, #3
 80060c0:	db02      	blt.n	80060c8 <_printf_float+0x130>
 80060c2:	6863      	ldr	r3, [r4, #4]
 80060c4:	4299      	cmp	r1, r3
 80060c6:	dd40      	ble.n	800614a <_printf_float+0x1b2>
 80060c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80060cc:	fa5f fa8a 	uxtb.w	sl, sl
 80060d0:	4652      	mov	r2, sl
 80060d2:	3901      	subs	r1, #1
 80060d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80060d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80060da:	f7ff ff23 	bl	8005f24 <__exponent>
 80060de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060e0:	4681      	mov	r9, r0
 80060e2:	1813      	adds	r3, r2, r0
 80060e4:	2a01      	cmp	r2, #1
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	dc02      	bgt.n	80060f0 <_printf_float+0x158>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	07d2      	lsls	r2, r2, #31
 80060ee:	d501      	bpl.n	80060f4 <_printf_float+0x15c>
 80060f0:	3301      	adds	r3, #1
 80060f2:	6123      	str	r3, [r4, #16]
 80060f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d09e      	beq.n	800603a <_printf_float+0xa2>
 80060fc:	232d      	movs	r3, #45	@ 0x2d
 80060fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006102:	e79a      	b.n	800603a <_printf_float+0xa2>
 8006104:	2947      	cmp	r1, #71	@ 0x47
 8006106:	d1bf      	bne.n	8006088 <_printf_float+0xf0>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1bd      	bne.n	8006088 <_printf_float+0xf0>
 800610c:	2301      	movs	r3, #1
 800610e:	e7ba      	b.n	8006086 <_printf_float+0xee>
 8006110:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006114:	d9dc      	bls.n	80060d0 <_printf_float+0x138>
 8006116:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800611a:	d118      	bne.n	800614e <_printf_float+0x1b6>
 800611c:	2900      	cmp	r1, #0
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	dd0b      	ble.n	800613a <_printf_float+0x1a2>
 8006122:	6121      	str	r1, [r4, #16]
 8006124:	b913      	cbnz	r3, 800612c <_printf_float+0x194>
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	07d0      	lsls	r0, r2, #31
 800612a:	d502      	bpl.n	8006132 <_printf_float+0x19a>
 800612c:	3301      	adds	r3, #1
 800612e:	440b      	add	r3, r1
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	f04f 0900 	mov.w	r9, #0
 8006136:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006138:	e7dc      	b.n	80060f4 <_printf_float+0x15c>
 800613a:	b913      	cbnz	r3, 8006142 <_printf_float+0x1aa>
 800613c:	6822      	ldr	r2, [r4, #0]
 800613e:	07d2      	lsls	r2, r2, #31
 8006140:	d501      	bpl.n	8006146 <_printf_float+0x1ae>
 8006142:	3302      	adds	r3, #2
 8006144:	e7f4      	b.n	8006130 <_printf_float+0x198>
 8006146:	2301      	movs	r3, #1
 8006148:	e7f2      	b.n	8006130 <_printf_float+0x198>
 800614a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800614e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006150:	4299      	cmp	r1, r3
 8006152:	db05      	blt.n	8006160 <_printf_float+0x1c8>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	6121      	str	r1, [r4, #16]
 8006158:	07d8      	lsls	r0, r3, #31
 800615a:	d5ea      	bpl.n	8006132 <_printf_float+0x19a>
 800615c:	1c4b      	adds	r3, r1, #1
 800615e:	e7e7      	b.n	8006130 <_printf_float+0x198>
 8006160:	2900      	cmp	r1, #0
 8006162:	bfcc      	ite	gt
 8006164:	2201      	movgt	r2, #1
 8006166:	f1c1 0202 	rsble	r2, r1, #2
 800616a:	4413      	add	r3, r2
 800616c:	e7e0      	b.n	8006130 <_printf_float+0x198>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	055a      	lsls	r2, r3, #21
 8006172:	d407      	bmi.n	8006184 <_printf_float+0x1ec>
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	4642      	mov	r2, r8
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	47b8      	blx	r7
 800617e:	3001      	adds	r0, #1
 8006180:	d12b      	bne.n	80061da <_printf_float+0x242>
 8006182:	e764      	b.n	800604e <_printf_float+0xb6>
 8006184:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006188:	f240 80dc 	bls.w	8006344 <_printf_float+0x3ac>
 800618c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006190:	2200      	movs	r2, #0
 8006192:	2300      	movs	r3, #0
 8006194:	f7fa fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8006198:	2800      	cmp	r0, #0
 800619a:	d033      	beq.n	8006204 <_printf_float+0x26c>
 800619c:	2301      	movs	r3, #1
 800619e:	4631      	mov	r1, r6
 80061a0:	4628      	mov	r0, r5
 80061a2:	4a35      	ldr	r2, [pc, #212]	@ (8006278 <_printf_float+0x2e0>)
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af51 	beq.w	800604e <_printf_float+0xb6>
 80061ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80061b0:	4543      	cmp	r3, r8
 80061b2:	db02      	blt.n	80061ba <_printf_float+0x222>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	07d8      	lsls	r0, r3, #31
 80061b8:	d50f      	bpl.n	80061da <_printf_float+0x242>
 80061ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	f43f af42 	beq.w	800604e <_printf_float+0xb6>
 80061ca:	f04f 0900 	mov.w	r9, #0
 80061ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80061d2:	f104 0a1a 	add.w	sl, r4, #26
 80061d6:	45c8      	cmp	r8, r9
 80061d8:	dc09      	bgt.n	80061ee <_printf_float+0x256>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	079b      	lsls	r3, r3, #30
 80061de:	f100 8102 	bmi.w	80063e6 <_printf_float+0x44e>
 80061e2:	68e0      	ldr	r0, [r4, #12]
 80061e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061e6:	4298      	cmp	r0, r3
 80061e8:	bfb8      	it	lt
 80061ea:	4618      	movlt	r0, r3
 80061ec:	e731      	b.n	8006052 <_printf_float+0xba>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4652      	mov	r2, sl
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f af28 	beq.w	800604e <_printf_float+0xb6>
 80061fe:	f109 0901 	add.w	r9, r9, #1
 8006202:	e7e8      	b.n	80061d6 <_printf_float+0x23e>
 8006204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006206:	2b00      	cmp	r3, #0
 8006208:	dc38      	bgt.n	800627c <_printf_float+0x2e4>
 800620a:	2301      	movs	r3, #1
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <_printf_float+0x2e0>)
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f af1a 	beq.w	800604e <_printf_float+0xb6>
 800621a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800621e:	ea59 0303 	orrs.w	r3, r9, r3
 8006222:	d102      	bne.n	800622a <_printf_float+0x292>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	07d9      	lsls	r1, r3, #31
 8006228:	d5d7      	bpl.n	80061da <_printf_float+0x242>
 800622a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	f43f af0a 	beq.w	800604e <_printf_float+0xb6>
 800623a:	f04f 0a00 	mov.w	sl, #0
 800623e:	f104 0b1a 	add.w	fp, r4, #26
 8006242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006244:	425b      	negs	r3, r3
 8006246:	4553      	cmp	r3, sl
 8006248:	dc01      	bgt.n	800624e <_printf_float+0x2b6>
 800624a:	464b      	mov	r3, r9
 800624c:	e793      	b.n	8006176 <_printf_float+0x1de>
 800624e:	2301      	movs	r3, #1
 8006250:	465a      	mov	r2, fp
 8006252:	4631      	mov	r1, r6
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	f43f aef8 	beq.w	800604e <_printf_float+0xb6>
 800625e:	f10a 0a01 	add.w	sl, sl, #1
 8006262:	e7ee      	b.n	8006242 <_printf_float+0x2aa>
 8006264:	7fefffff 	.word	0x7fefffff
 8006268:	08008c82 	.word	0x08008c82
 800626c:	08008c86 	.word	0x08008c86
 8006270:	08008c8a 	.word	0x08008c8a
 8006274:	08008c8e 	.word	0x08008c8e
 8006278:	08008c92 	.word	0x08008c92
 800627c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800627e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006282:	4553      	cmp	r3, sl
 8006284:	bfa8      	it	ge
 8006286:	4653      	movge	r3, sl
 8006288:	2b00      	cmp	r3, #0
 800628a:	4699      	mov	r9, r3
 800628c:	dc36      	bgt.n	80062fc <_printf_float+0x364>
 800628e:	f04f 0b00 	mov.w	fp, #0
 8006292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006296:	f104 021a 	add.w	r2, r4, #26
 800629a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800629c:	930a      	str	r3, [sp, #40]	@ 0x28
 800629e:	eba3 0309 	sub.w	r3, r3, r9
 80062a2:	455b      	cmp	r3, fp
 80062a4:	dc31      	bgt.n	800630a <_printf_float+0x372>
 80062a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062a8:	459a      	cmp	sl, r3
 80062aa:	dc3a      	bgt.n	8006322 <_printf_float+0x38a>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	07da      	lsls	r2, r3, #31
 80062b0:	d437      	bmi.n	8006322 <_printf_float+0x38a>
 80062b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062b4:	ebaa 0903 	sub.w	r9, sl, r3
 80062b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ba:	ebaa 0303 	sub.w	r3, sl, r3
 80062be:	4599      	cmp	r9, r3
 80062c0:	bfa8      	it	ge
 80062c2:	4699      	movge	r9, r3
 80062c4:	f1b9 0f00 	cmp.w	r9, #0
 80062c8:	dc33      	bgt.n	8006332 <_printf_float+0x39a>
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062d2:	f104 0b1a 	add.w	fp, r4, #26
 80062d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062d8:	ebaa 0303 	sub.w	r3, sl, r3
 80062dc:	eba3 0309 	sub.w	r3, r3, r9
 80062e0:	4543      	cmp	r3, r8
 80062e2:	f77f af7a 	ble.w	80061da <_printf_float+0x242>
 80062e6:	2301      	movs	r3, #1
 80062e8:	465a      	mov	r2, fp
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	f43f aeac 	beq.w	800604e <_printf_float+0xb6>
 80062f6:	f108 0801 	add.w	r8, r8, #1
 80062fa:	e7ec      	b.n	80062d6 <_printf_float+0x33e>
 80062fc:	4642      	mov	r2, r8
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	d1c2      	bne.n	800628e <_printf_float+0x2f6>
 8006308:	e6a1      	b.n	800604e <_printf_float+0xb6>
 800630a:	2301      	movs	r3, #1
 800630c:	4631      	mov	r1, r6
 800630e:	4628      	mov	r0, r5
 8006310:	920a      	str	r2, [sp, #40]	@ 0x28
 8006312:	47b8      	blx	r7
 8006314:	3001      	adds	r0, #1
 8006316:	f43f ae9a 	beq.w	800604e <_printf_float+0xb6>
 800631a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800631c:	f10b 0b01 	add.w	fp, fp, #1
 8006320:	e7bb      	b.n	800629a <_printf_float+0x302>
 8006322:	4631      	mov	r1, r6
 8006324:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d1c0      	bne.n	80062b2 <_printf_float+0x31a>
 8006330:	e68d      	b.n	800604e <_printf_float+0xb6>
 8006332:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006334:	464b      	mov	r3, r9
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	4442      	add	r2, r8
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d1c3      	bne.n	80062ca <_printf_float+0x332>
 8006342:	e684      	b.n	800604e <_printf_float+0xb6>
 8006344:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006348:	f1ba 0f01 	cmp.w	sl, #1
 800634c:	dc01      	bgt.n	8006352 <_printf_float+0x3ba>
 800634e:	07db      	lsls	r3, r3, #31
 8006350:	d536      	bpl.n	80063c0 <_printf_float+0x428>
 8006352:	2301      	movs	r3, #1
 8006354:	4642      	mov	r2, r8
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f ae76 	beq.w	800604e <_printf_float+0xb6>
 8006362:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	f43f ae6e 	beq.w	800604e <_printf_float+0xb6>
 8006372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006376:	2200      	movs	r2, #0
 8006378:	2300      	movs	r3, #0
 800637a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800637e:	f7fa fb13 	bl	80009a8 <__aeabi_dcmpeq>
 8006382:	b9c0      	cbnz	r0, 80063b6 <_printf_float+0x41e>
 8006384:	4653      	mov	r3, sl
 8006386:	f108 0201 	add.w	r2, r8, #1
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	d10c      	bne.n	80063ae <_printf_float+0x416>
 8006394:	e65b      	b.n	800604e <_printf_float+0xb6>
 8006396:	2301      	movs	r3, #1
 8006398:	465a      	mov	r2, fp
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	f43f ae54 	beq.w	800604e <_printf_float+0xb6>
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	45d0      	cmp	r8, sl
 80063ac:	dbf3      	blt.n	8006396 <_printf_float+0x3fe>
 80063ae:	464b      	mov	r3, r9
 80063b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80063b4:	e6e0      	b.n	8006178 <_printf_float+0x1e0>
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	f104 0b1a 	add.w	fp, r4, #26
 80063be:	e7f4      	b.n	80063aa <_printf_float+0x412>
 80063c0:	2301      	movs	r3, #1
 80063c2:	4642      	mov	r2, r8
 80063c4:	e7e1      	b.n	800638a <_printf_float+0x3f2>
 80063c6:	2301      	movs	r3, #1
 80063c8:	464a      	mov	r2, r9
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f ae3c 	beq.w	800604e <_printf_float+0xb6>
 80063d6:	f108 0801 	add.w	r8, r8, #1
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80063de:	1a5b      	subs	r3, r3, r1
 80063e0:	4543      	cmp	r3, r8
 80063e2:	dcf0      	bgt.n	80063c6 <_printf_float+0x42e>
 80063e4:	e6fd      	b.n	80061e2 <_printf_float+0x24a>
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	f104 0919 	add.w	r9, r4, #25
 80063ee:	e7f4      	b.n	80063da <_printf_float+0x442>

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4698      	mov	r8, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	4607      	mov	r7, r0
 80063fe:	4293      	cmp	r3, r2
 8006400:	bfb8      	it	lt
 8006402:	4613      	movlt	r3, r2
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800640a:	460c      	mov	r4, r1
 800640c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc2b      	bgt.n	8006490 <_printf_common+0xa0>
 8006438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	3b00      	subs	r3, #0
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d430      	bmi.n	80064aa <_printf_common+0xba>
 8006448:	4641      	mov	r1, r8
 800644a:	4638      	mov	r0, r7
 800644c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006450:	47c8      	blx	r9
 8006452:	3001      	adds	r0, #1
 8006454:	d023      	beq.n	800649e <_printf_common+0xae>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	6922      	ldr	r2, [r4, #16]
 800645a:	f003 0306 	and.w	r3, r3, #6
 800645e:	2b04      	cmp	r3, #4
 8006460:	bf14      	ite	ne
 8006462:	2500      	movne	r5, #0
 8006464:	6833      	ldreq	r3, [r6, #0]
 8006466:	f04f 0600 	mov.w	r6, #0
 800646a:	bf08      	it	eq
 800646c:	68e5      	ldreq	r5, [r4, #12]
 800646e:	f104 041a 	add.w	r4, r4, #26
 8006472:	bf08      	it	eq
 8006474:	1aed      	subeq	r5, r5, r3
 8006476:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800647a:	bf08      	it	eq
 800647c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006480:	4293      	cmp	r3, r2
 8006482:	bfc4      	itt	gt
 8006484:	1a9b      	subgt	r3, r3, r2
 8006486:	18ed      	addgt	r5, r5, r3
 8006488:	42b5      	cmp	r5, r6
 800648a:	d11a      	bne.n	80064c2 <_printf_common+0xd2>
 800648c:	2000      	movs	r0, #0
 800648e:	e008      	b.n	80064a2 <_printf_common+0xb2>
 8006490:	2301      	movs	r3, #1
 8006492:	4652      	mov	r2, sl
 8006494:	4641      	mov	r1, r8
 8006496:	4638      	mov	r0, r7
 8006498:	47c8      	blx	r9
 800649a:	3001      	adds	r0, #1
 800649c:	d103      	bne.n	80064a6 <_printf_common+0xb6>
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a6:	3501      	adds	r5, #1
 80064a8:	e7c1      	b.n	800642e <_printf_common+0x3e>
 80064aa:	2030      	movs	r0, #48	@ 0x30
 80064ac:	18e1      	adds	r1, r4, r3
 80064ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064b8:	4422      	add	r2, r4
 80064ba:	3302      	adds	r3, #2
 80064bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064c0:	e7c2      	b.n	8006448 <_printf_common+0x58>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4622      	mov	r2, r4
 80064c6:	4641      	mov	r1, r8
 80064c8:	4638      	mov	r0, r7
 80064ca:	47c8      	blx	r9
 80064cc:	3001      	adds	r0, #1
 80064ce:	d0e6      	beq.n	800649e <_printf_common+0xae>
 80064d0:	3601      	adds	r6, #1
 80064d2:	e7d9      	b.n	8006488 <_printf_common+0x98>

080064d4 <_printf_i>:
 80064d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	7e0f      	ldrb	r7, [r1, #24]
 80064da:	4691      	mov	r9, r2
 80064dc:	2f78      	cmp	r7, #120	@ 0x78
 80064de:	4680      	mov	r8, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	469a      	mov	sl, r3
 80064e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ea:	d807      	bhi.n	80064fc <_printf_i+0x28>
 80064ec:	2f62      	cmp	r7, #98	@ 0x62
 80064ee:	d80a      	bhi.n	8006506 <_printf_i+0x32>
 80064f0:	2f00      	cmp	r7, #0
 80064f2:	f000 80d3 	beq.w	800669c <_printf_i+0x1c8>
 80064f6:	2f58      	cmp	r7, #88	@ 0x58
 80064f8:	f000 80ba 	beq.w	8006670 <_printf_i+0x19c>
 80064fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006504:	e03a      	b.n	800657c <_printf_i+0xa8>
 8006506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800650a:	2b15      	cmp	r3, #21
 800650c:	d8f6      	bhi.n	80064fc <_printf_i+0x28>
 800650e:	a101      	add	r1, pc, #4	@ (adr r1, 8006514 <_printf_i+0x40>)
 8006510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006514:	0800656d 	.word	0x0800656d
 8006518:	08006581 	.word	0x08006581
 800651c:	080064fd 	.word	0x080064fd
 8006520:	080064fd 	.word	0x080064fd
 8006524:	080064fd 	.word	0x080064fd
 8006528:	080064fd 	.word	0x080064fd
 800652c:	08006581 	.word	0x08006581
 8006530:	080064fd 	.word	0x080064fd
 8006534:	080064fd 	.word	0x080064fd
 8006538:	080064fd 	.word	0x080064fd
 800653c:	080064fd 	.word	0x080064fd
 8006540:	08006683 	.word	0x08006683
 8006544:	080065ab 	.word	0x080065ab
 8006548:	0800663d 	.word	0x0800663d
 800654c:	080064fd 	.word	0x080064fd
 8006550:	080064fd 	.word	0x080064fd
 8006554:	080066a5 	.word	0x080066a5
 8006558:	080064fd 	.word	0x080064fd
 800655c:	080065ab 	.word	0x080065ab
 8006560:	080064fd 	.word	0x080064fd
 8006564:	080064fd 	.word	0x080064fd
 8006568:	08006645 	.word	0x08006645
 800656c:	6833      	ldr	r3, [r6, #0]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6032      	str	r2, [r6, #0]
 8006574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800657c:	2301      	movs	r3, #1
 800657e:	e09e      	b.n	80066be <_printf_i+0x1ea>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	1d19      	adds	r1, r3, #4
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	0606      	lsls	r6, r0, #24
 800658a:	d501      	bpl.n	8006590 <_printf_i+0xbc>
 800658c:	681d      	ldr	r5, [r3, #0]
 800658e:	e003      	b.n	8006598 <_printf_i+0xc4>
 8006590:	0645      	lsls	r5, r0, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0xb8>
 8006594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006598:	2d00      	cmp	r5, #0
 800659a:	da03      	bge.n	80065a4 <_printf_i+0xd0>
 800659c:	232d      	movs	r3, #45	@ 0x2d
 800659e:	426d      	negs	r5, r5
 80065a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a4:	230a      	movs	r3, #10
 80065a6:	4859      	ldr	r0, [pc, #356]	@ (800670c <_printf_i+0x238>)
 80065a8:	e011      	b.n	80065ce <_printf_i+0xfa>
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	0608      	lsls	r0, r1, #24
 80065b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80065b4:	d402      	bmi.n	80065bc <_printf_i+0xe8>
 80065b6:	0649      	lsls	r1, r1, #25
 80065b8:	bf48      	it	mi
 80065ba:	b2ad      	uxthmi	r5, r5
 80065bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80065be:	6033      	str	r3, [r6, #0]
 80065c0:	bf14      	ite	ne
 80065c2:	230a      	movne	r3, #10
 80065c4:	2308      	moveq	r3, #8
 80065c6:	4851      	ldr	r0, [pc, #324]	@ (800670c <_printf_i+0x238>)
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065ce:	6866      	ldr	r6, [r4, #4]
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	bfa8      	it	ge
 80065d4:	6821      	ldrge	r1, [r4, #0]
 80065d6:	60a6      	str	r6, [r4, #8]
 80065d8:	bfa4      	itt	ge
 80065da:	f021 0104 	bicge.w	r1, r1, #4
 80065de:	6021      	strge	r1, [r4, #0]
 80065e0:	b90d      	cbnz	r5, 80065e6 <_printf_i+0x112>
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	d04b      	beq.n	800667e <_printf_i+0x1aa>
 80065e6:	4616      	mov	r6, r2
 80065e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ec:	fb03 5711 	mls	r7, r3, r1, r5
 80065f0:	5dc7      	ldrb	r7, [r0, r7]
 80065f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065f6:	462f      	mov	r7, r5
 80065f8:	42bb      	cmp	r3, r7
 80065fa:	460d      	mov	r5, r1
 80065fc:	d9f4      	bls.n	80065e8 <_printf_i+0x114>
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d10b      	bne.n	800661a <_printf_i+0x146>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	07df      	lsls	r7, r3, #31
 8006606:	d508      	bpl.n	800661a <_printf_i+0x146>
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	6861      	ldr	r1, [r4, #4]
 800660c:	4299      	cmp	r1, r3
 800660e:	bfde      	ittt	le
 8006610:	2330      	movle	r3, #48	@ 0x30
 8006612:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006616:	f106 36ff 	addle.w	r6, r6, #4294967295
 800661a:	1b92      	subs	r2, r2, r6
 800661c:	6122      	str	r2, [r4, #16]
 800661e:	464b      	mov	r3, r9
 8006620:	4621      	mov	r1, r4
 8006622:	4640      	mov	r0, r8
 8006624:	f8cd a000 	str.w	sl, [sp]
 8006628:	aa03      	add	r2, sp, #12
 800662a:	f7ff fee1 	bl	80063f0 <_printf_common>
 800662e:	3001      	adds	r0, #1
 8006630:	d14a      	bne.n	80066c8 <_printf_i+0x1f4>
 8006632:	f04f 30ff 	mov.w	r0, #4294967295
 8006636:	b004      	add	sp, #16
 8006638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	f043 0320 	orr.w	r3, r3, #32
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	2778      	movs	r7, #120	@ 0x78
 8006646:	4832      	ldr	r0, [pc, #200]	@ (8006710 <_printf_i+0x23c>)
 8006648:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	6831      	ldr	r1, [r6, #0]
 8006650:	061f      	lsls	r7, r3, #24
 8006652:	f851 5b04 	ldr.w	r5, [r1], #4
 8006656:	d402      	bmi.n	800665e <_printf_i+0x18a>
 8006658:	065f      	lsls	r7, r3, #25
 800665a:	bf48      	it	mi
 800665c:	b2ad      	uxthmi	r5, r5
 800665e:	6031      	str	r1, [r6, #0]
 8006660:	07d9      	lsls	r1, r3, #31
 8006662:	bf44      	itt	mi
 8006664:	f043 0320 	orrmi.w	r3, r3, #32
 8006668:	6023      	strmi	r3, [r4, #0]
 800666a:	b11d      	cbz	r5, 8006674 <_printf_i+0x1a0>
 800666c:	2310      	movs	r3, #16
 800666e:	e7ab      	b.n	80065c8 <_printf_i+0xf4>
 8006670:	4826      	ldr	r0, [pc, #152]	@ (800670c <_printf_i+0x238>)
 8006672:	e7e9      	b.n	8006648 <_printf_i+0x174>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	f023 0320 	bic.w	r3, r3, #32
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	e7f6      	b.n	800666c <_printf_i+0x198>
 800667e:	4616      	mov	r6, r2
 8006680:	e7bd      	b.n	80065fe <_printf_i+0x12a>
 8006682:	6833      	ldr	r3, [r6, #0]
 8006684:	6825      	ldr	r5, [r4, #0]
 8006686:	1d18      	adds	r0, r3, #4
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	6030      	str	r0, [r6, #0]
 800668c:	062e      	lsls	r6, r5, #24
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	d501      	bpl.n	8006696 <_printf_i+0x1c2>
 8006692:	6019      	str	r1, [r3, #0]
 8006694:	e002      	b.n	800669c <_printf_i+0x1c8>
 8006696:	0668      	lsls	r0, r5, #25
 8006698:	d5fb      	bpl.n	8006692 <_printf_i+0x1be>
 800669a:	8019      	strh	r1, [r3, #0]
 800669c:	2300      	movs	r3, #0
 800669e:	4616      	mov	r6, r2
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	e7bc      	b.n	800661e <_printf_i+0x14a>
 80066a4:	6833      	ldr	r3, [r6, #0]
 80066a6:	2100      	movs	r1, #0
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	6032      	str	r2, [r6, #0]
 80066ac:	681e      	ldr	r6, [r3, #0]
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 f9d4 	bl	8006a5e <memchr>
 80066b6:	b108      	cbz	r0, 80066bc <_printf_i+0x1e8>
 80066b8:	1b80      	subs	r0, r0, r6
 80066ba:	6060      	str	r0, [r4, #4]
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	2300      	movs	r3, #0
 80066c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066c6:	e7aa      	b.n	800661e <_printf_i+0x14a>
 80066c8:	4632      	mov	r2, r6
 80066ca:	4649      	mov	r1, r9
 80066cc:	4640      	mov	r0, r8
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	47d0      	blx	sl
 80066d2:	3001      	adds	r0, #1
 80066d4:	d0ad      	beq.n	8006632 <_printf_i+0x15e>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	079b      	lsls	r3, r3, #30
 80066da:	d413      	bmi.n	8006704 <_printf_i+0x230>
 80066dc:	68e0      	ldr	r0, [r4, #12]
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	4298      	cmp	r0, r3
 80066e2:	bfb8      	it	lt
 80066e4:	4618      	movlt	r0, r3
 80066e6:	e7a6      	b.n	8006636 <_printf_i+0x162>
 80066e8:	2301      	movs	r3, #1
 80066ea:	4632      	mov	r2, r6
 80066ec:	4649      	mov	r1, r9
 80066ee:	4640      	mov	r0, r8
 80066f0:	47d0      	blx	sl
 80066f2:	3001      	adds	r0, #1
 80066f4:	d09d      	beq.n	8006632 <_printf_i+0x15e>
 80066f6:	3501      	adds	r5, #1
 80066f8:	68e3      	ldr	r3, [r4, #12]
 80066fa:	9903      	ldr	r1, [sp, #12]
 80066fc:	1a5b      	subs	r3, r3, r1
 80066fe:	42ab      	cmp	r3, r5
 8006700:	dcf2      	bgt.n	80066e8 <_printf_i+0x214>
 8006702:	e7eb      	b.n	80066dc <_printf_i+0x208>
 8006704:	2500      	movs	r5, #0
 8006706:	f104 0619 	add.w	r6, r4, #25
 800670a:	e7f5      	b.n	80066f8 <_printf_i+0x224>
 800670c:	08008c94 	.word	0x08008c94
 8006710:	08008ca5 	.word	0x08008ca5

08006714 <std>:
 8006714:	2300      	movs	r3, #0
 8006716:	b510      	push	{r4, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	e9c0 3300 	strd	r3, r3, [r0]
 800671e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006722:	6083      	str	r3, [r0, #8]
 8006724:	8181      	strh	r1, [r0, #12]
 8006726:	6643      	str	r3, [r0, #100]	@ 0x64
 8006728:	81c2      	strh	r2, [r0, #14]
 800672a:	6183      	str	r3, [r0, #24]
 800672c:	4619      	mov	r1, r3
 800672e:	2208      	movs	r2, #8
 8006730:	305c      	adds	r0, #92	@ 0x5c
 8006732:	f000 f914 	bl	800695e <memset>
 8006736:	4b0d      	ldr	r3, [pc, #52]	@ (800676c <std+0x58>)
 8006738:	6224      	str	r4, [r4, #32]
 800673a:	6263      	str	r3, [r4, #36]	@ 0x24
 800673c:	4b0c      	ldr	r3, [pc, #48]	@ (8006770 <std+0x5c>)
 800673e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006740:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <std+0x60>)
 8006742:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006744:	4b0c      	ldr	r3, [pc, #48]	@ (8006778 <std+0x64>)
 8006746:	6323      	str	r3, [r4, #48]	@ 0x30
 8006748:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <std+0x68>)
 800674a:	429c      	cmp	r4, r3
 800674c:	d006      	beq.n	800675c <std+0x48>
 800674e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006752:	4294      	cmp	r4, r2
 8006754:	d002      	beq.n	800675c <std+0x48>
 8006756:	33d0      	adds	r3, #208	@ 0xd0
 8006758:	429c      	cmp	r4, r3
 800675a:	d105      	bne.n	8006768 <std+0x54>
 800675c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f000 b978 	b.w	8006a58 <__retarget_lock_init_recursive>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	080068d9 	.word	0x080068d9
 8006770:	080068fb 	.word	0x080068fb
 8006774:	08006933 	.word	0x08006933
 8006778:	08006957 	.word	0x08006957
 800677c:	2000201c 	.word	0x2000201c

08006780 <stdio_exit_handler>:
 8006780:	4a02      	ldr	r2, [pc, #8]	@ (800678c <stdio_exit_handler+0xc>)
 8006782:	4903      	ldr	r1, [pc, #12]	@ (8006790 <stdio_exit_handler+0x10>)
 8006784:	4803      	ldr	r0, [pc, #12]	@ (8006794 <stdio_exit_handler+0x14>)
 8006786:	f000 b869 	b.w	800685c <_fwalk_sglue>
 800678a:	bf00      	nop
 800678c:	20000050 	.word	0x20000050
 8006790:	080083e5 	.word	0x080083e5
 8006794:	20000060 	.word	0x20000060

08006798 <cleanup_stdio>:
 8006798:	6841      	ldr	r1, [r0, #4]
 800679a:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <cleanup_stdio+0x34>)
 800679c:	b510      	push	{r4, lr}
 800679e:	4299      	cmp	r1, r3
 80067a0:	4604      	mov	r4, r0
 80067a2:	d001      	beq.n	80067a8 <cleanup_stdio+0x10>
 80067a4:	f001 fe1e 	bl	80083e4 <_fflush_r>
 80067a8:	68a1      	ldr	r1, [r4, #8]
 80067aa:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <cleanup_stdio+0x38>)
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d002      	beq.n	80067b6 <cleanup_stdio+0x1e>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f001 fe17 	bl	80083e4 <_fflush_r>
 80067b6:	68e1      	ldr	r1, [r4, #12]
 80067b8:	4b06      	ldr	r3, [pc, #24]	@ (80067d4 <cleanup_stdio+0x3c>)
 80067ba:	4299      	cmp	r1, r3
 80067bc:	d004      	beq.n	80067c8 <cleanup_stdio+0x30>
 80067be:	4620      	mov	r0, r4
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f001 be0e 	b.w	80083e4 <_fflush_r>
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	2000201c 	.word	0x2000201c
 80067d0:	20002084 	.word	0x20002084
 80067d4:	200020ec 	.word	0x200020ec

080067d8 <global_stdio_init.part.0>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <global_stdio_init.part.0+0x30>)
 80067dc:	4c0b      	ldr	r4, [pc, #44]	@ (800680c <global_stdio_init.part.0+0x34>)
 80067de:	4a0c      	ldr	r2, [pc, #48]	@ (8006810 <global_stdio_init.part.0+0x38>)
 80067e0:	4620      	mov	r0, r4
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	2104      	movs	r1, #4
 80067e6:	2200      	movs	r2, #0
 80067e8:	f7ff ff94 	bl	8006714 <std>
 80067ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067f0:	2201      	movs	r2, #1
 80067f2:	2109      	movs	r1, #9
 80067f4:	f7ff ff8e 	bl	8006714 <std>
 80067f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067fc:	2202      	movs	r2, #2
 80067fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006802:	2112      	movs	r1, #18
 8006804:	f7ff bf86 	b.w	8006714 <std>
 8006808:	20002154 	.word	0x20002154
 800680c:	2000201c 	.word	0x2000201c
 8006810:	08006781 	.word	0x08006781

08006814 <__sfp_lock_acquire>:
 8006814:	4801      	ldr	r0, [pc, #4]	@ (800681c <__sfp_lock_acquire+0x8>)
 8006816:	f000 b920 	b.w	8006a5a <__retarget_lock_acquire_recursive>
 800681a:	bf00      	nop
 800681c:	2000215d 	.word	0x2000215d

08006820 <__sfp_lock_release>:
 8006820:	4801      	ldr	r0, [pc, #4]	@ (8006828 <__sfp_lock_release+0x8>)
 8006822:	f000 b91b 	b.w	8006a5c <__retarget_lock_release_recursive>
 8006826:	bf00      	nop
 8006828:	2000215d 	.word	0x2000215d

0800682c <__sinit>:
 800682c:	b510      	push	{r4, lr}
 800682e:	4604      	mov	r4, r0
 8006830:	f7ff fff0 	bl	8006814 <__sfp_lock_acquire>
 8006834:	6a23      	ldr	r3, [r4, #32]
 8006836:	b11b      	cbz	r3, 8006840 <__sinit+0x14>
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f7ff bff0 	b.w	8006820 <__sfp_lock_release>
 8006840:	4b04      	ldr	r3, [pc, #16]	@ (8006854 <__sinit+0x28>)
 8006842:	6223      	str	r3, [r4, #32]
 8006844:	4b04      	ldr	r3, [pc, #16]	@ (8006858 <__sinit+0x2c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f5      	bne.n	8006838 <__sinit+0xc>
 800684c:	f7ff ffc4 	bl	80067d8 <global_stdio_init.part.0>
 8006850:	e7f2      	b.n	8006838 <__sinit+0xc>
 8006852:	bf00      	nop
 8006854:	08006799 	.word	0x08006799
 8006858:	20002154 	.word	0x20002154

0800685c <_fwalk_sglue>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	4607      	mov	r7, r0
 8006862:	4688      	mov	r8, r1
 8006864:	4614      	mov	r4, r2
 8006866:	2600      	movs	r6, #0
 8006868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800686c:	f1b9 0901 	subs.w	r9, r9, #1
 8006870:	d505      	bpl.n	800687e <_fwalk_sglue+0x22>
 8006872:	6824      	ldr	r4, [r4, #0]
 8006874:	2c00      	cmp	r4, #0
 8006876:	d1f7      	bne.n	8006868 <_fwalk_sglue+0xc>
 8006878:	4630      	mov	r0, r6
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d907      	bls.n	8006894 <_fwalk_sglue+0x38>
 8006884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006888:	3301      	adds	r3, #1
 800688a:	d003      	beq.n	8006894 <_fwalk_sglue+0x38>
 800688c:	4629      	mov	r1, r5
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	4306      	orrs	r6, r0
 8006894:	3568      	adds	r5, #104	@ 0x68
 8006896:	e7e9      	b.n	800686c <_fwalk_sglue+0x10>

08006898 <siprintf>:
 8006898:	b40e      	push	{r1, r2, r3}
 800689a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800689e:	b500      	push	{lr}
 80068a0:	b09c      	sub	sp, #112	@ 0x70
 80068a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	9006      	str	r0, [sp, #24]
 80068a8:	9107      	str	r1, [sp, #28]
 80068aa:	9104      	str	r1, [sp, #16]
 80068ac:	4808      	ldr	r0, [pc, #32]	@ (80068d0 <siprintf+0x38>)
 80068ae:	4909      	ldr	r1, [pc, #36]	@ (80068d4 <siprintf+0x3c>)
 80068b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b4:	9105      	str	r1, [sp, #20]
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	a902      	add	r1, sp, #8
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	f001 fc16 	bl	80080ec <_svfiprintf_r>
 80068c0:	2200      	movs	r2, #0
 80068c2:	9b02      	ldr	r3, [sp, #8]
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	b01c      	add	sp, #112	@ 0x70
 80068c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068cc:	b003      	add	sp, #12
 80068ce:	4770      	bx	lr
 80068d0:	2000005c 	.word	0x2000005c
 80068d4:	ffff0208 	.word	0xffff0208

080068d8 <__sread>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	460c      	mov	r4, r1
 80068dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e0:	f000 f86c 	bl	80069bc <_read_r>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	bfab      	itete	ge
 80068e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068ea:	89a3      	ldrhlt	r3, [r4, #12]
 80068ec:	181b      	addge	r3, r3, r0
 80068ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068f2:	bfac      	ite	ge
 80068f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068f6:	81a3      	strhlt	r3, [r4, #12]
 80068f8:	bd10      	pop	{r4, pc}

080068fa <__swrite>:
 80068fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fe:	461f      	mov	r7, r3
 8006900:	898b      	ldrh	r3, [r1, #12]
 8006902:	4605      	mov	r5, r0
 8006904:	05db      	lsls	r3, r3, #23
 8006906:	460c      	mov	r4, r1
 8006908:	4616      	mov	r6, r2
 800690a:	d505      	bpl.n	8006918 <__swrite+0x1e>
 800690c:	2302      	movs	r3, #2
 800690e:	2200      	movs	r2, #0
 8006910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006914:	f000 f840 	bl	8006998 <_lseek_r>
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	4632      	mov	r2, r6
 800691c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	4628      	mov	r0, r5
 8006924:	463b      	mov	r3, r7
 8006926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800692a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800692e:	f000 b857 	b.w	80069e0 <_write_r>

08006932 <__sseek>:
 8006932:	b510      	push	{r4, lr}
 8006934:	460c      	mov	r4, r1
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 f82d 	bl	8006998 <_lseek_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	bf15      	itete	ne
 8006944:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006946:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800694a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800694e:	81a3      	strheq	r3, [r4, #12]
 8006950:	bf18      	it	ne
 8006952:	81a3      	strhne	r3, [r4, #12]
 8006954:	bd10      	pop	{r4, pc}

08006956 <__sclose>:
 8006956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695a:	f000 b80d 	b.w	8006978 <_close_r>

0800695e <memset>:
 800695e:	4603      	mov	r3, r0
 8006960:	4402      	add	r2, r0
 8006962:	4293      	cmp	r3, r2
 8006964:	d100      	bne.n	8006968 <memset+0xa>
 8006966:	4770      	bx	lr
 8006968:	f803 1b01 	strb.w	r1, [r3], #1
 800696c:	e7f9      	b.n	8006962 <memset+0x4>
	...

08006970 <_localeconv_r>:
 8006970:	4800      	ldr	r0, [pc, #0]	@ (8006974 <_localeconv_r+0x4>)
 8006972:	4770      	bx	lr
 8006974:	2000019c 	.word	0x2000019c

08006978 <_close_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	2300      	movs	r3, #0
 800697c:	4d05      	ldr	r5, [pc, #20]	@ (8006994 <_close_r+0x1c>)
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f7fb f910 	bl	8001ba8 <_close>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_close_r+0x1a>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_close_r+0x1a>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20002158 	.word	0x20002158

08006998 <_lseek_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	2200      	movs	r2, #0
 80069a2:	4d05      	ldr	r5, [pc, #20]	@ (80069b8 <_lseek_r+0x20>)
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7fb f922 	bl	8001bf0 <_lseek>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_lseek_r+0x1e>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_lseek_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	20002158 	.word	0x20002158

080069bc <_read_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4604      	mov	r4, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	2200      	movs	r2, #0
 80069c6:	4d05      	ldr	r5, [pc, #20]	@ (80069dc <_read_r+0x20>)
 80069c8:	602a      	str	r2, [r5, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7fb f8b3 	bl	8001b36 <_read>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_read_r+0x1e>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_read_r+0x1e>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20002158 	.word	0x20002158

080069e0 <_write_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4604      	mov	r4, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	2200      	movs	r2, #0
 80069ea:	4d05      	ldr	r5, [pc, #20]	@ (8006a00 <_write_r+0x20>)
 80069ec:	602a      	str	r2, [r5, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f7fb f8be 	bl	8001b70 <_write>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_write_r+0x1e>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_write_r+0x1e>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	20002158 	.word	0x20002158

08006a04 <__errno>:
 8006a04:	4b01      	ldr	r3, [pc, #4]	@ (8006a0c <__errno+0x8>)
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	2000005c 	.word	0x2000005c

08006a10 <__libc_init_array>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	2600      	movs	r6, #0
 8006a14:	4d0c      	ldr	r5, [pc, #48]	@ (8006a48 <__libc_init_array+0x38>)
 8006a16:	4c0d      	ldr	r4, [pc, #52]	@ (8006a4c <__libc_init_array+0x3c>)
 8006a18:	1b64      	subs	r4, r4, r5
 8006a1a:	10a4      	asrs	r4, r4, #2
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	d109      	bne.n	8006a34 <__libc_init_array+0x24>
 8006a20:	f002 f86e 	bl	8008b00 <_init>
 8006a24:	2600      	movs	r6, #0
 8006a26:	4d0a      	ldr	r5, [pc, #40]	@ (8006a50 <__libc_init_array+0x40>)
 8006a28:	4c0a      	ldr	r4, [pc, #40]	@ (8006a54 <__libc_init_array+0x44>)
 8006a2a:	1b64      	subs	r4, r4, r5
 8006a2c:	10a4      	asrs	r4, r4, #2
 8006a2e:	42a6      	cmp	r6, r4
 8006a30:	d105      	bne.n	8006a3e <__libc_init_array+0x2e>
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a38:	4798      	blx	r3
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	e7ee      	b.n	8006a1c <__libc_init_array+0xc>
 8006a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a42:	4798      	blx	r3
 8006a44:	3601      	adds	r6, #1
 8006a46:	e7f2      	b.n	8006a2e <__libc_init_array+0x1e>
 8006a48:	08008ff8 	.word	0x08008ff8
 8006a4c:	08008ff8 	.word	0x08008ff8
 8006a50:	08008ff8 	.word	0x08008ff8
 8006a54:	08008ffc 	.word	0x08008ffc

08006a58 <__retarget_lock_init_recursive>:
 8006a58:	4770      	bx	lr

08006a5a <__retarget_lock_acquire_recursive>:
 8006a5a:	4770      	bx	lr

08006a5c <__retarget_lock_release_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <memchr>:
 8006a5e:	4603      	mov	r3, r0
 8006a60:	b510      	push	{r4, lr}
 8006a62:	b2c9      	uxtb	r1, r1
 8006a64:	4402      	add	r2, r0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	4618      	mov	r0, r3
 8006a6a:	d101      	bne.n	8006a70 <memchr+0x12>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	e003      	b.n	8006a78 <memchr+0x1a>
 8006a70:	7804      	ldrb	r4, [r0, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	428c      	cmp	r4, r1
 8006a76:	d1f6      	bne.n	8006a66 <memchr+0x8>
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <memcpy>:
 8006a7a:	440a      	add	r2, r1
 8006a7c:	4291      	cmp	r1, r2
 8006a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a82:	d100      	bne.n	8006a86 <memcpy+0xc>
 8006a84:	4770      	bx	lr
 8006a86:	b510      	push	{r4, lr}
 8006a88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8c:	4291      	cmp	r1, r2
 8006a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a92:	d1f9      	bne.n	8006a88 <memcpy+0xe>
 8006a94:	bd10      	pop	{r4, pc}

08006a96 <quorem>:
 8006a96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	6903      	ldr	r3, [r0, #16]
 8006a9c:	690c      	ldr	r4, [r1, #16]
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	db7e      	blt.n	8006ba2 <quorem+0x10c>
 8006aa4:	3c01      	subs	r4, #1
 8006aa6:	00a3      	lsls	r3, r4, #2
 8006aa8:	f100 0514 	add.w	r5, r0, #20
 8006aac:	f101 0814 	add.w	r8, r1, #20
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ac8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006acc:	d32e      	bcc.n	8006b2c <quorem+0x96>
 8006ace:	f04f 0a00 	mov.w	sl, #0
 8006ad2:	46c4      	mov	ip, r8
 8006ad4:	46ae      	mov	lr, r5
 8006ad6:	46d3      	mov	fp, sl
 8006ad8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006adc:	b298      	uxth	r0, r3
 8006ade:	fb06 a000 	mla	r0, r6, r0, sl
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	0c02      	lsrs	r2, r0, #16
 8006ae6:	fb06 2303 	mla	r3, r6, r3, r2
 8006aea:	f8de 2000 	ldr.w	r2, [lr]
 8006aee:	b280      	uxth	r0, r0
 8006af0:	b292      	uxth	r2, r2
 8006af2:	1a12      	subs	r2, r2, r0
 8006af4:	445a      	add	r2, fp
 8006af6:	f8de 0000 	ldr.w	r0, [lr]
 8006afa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b0e:	45e1      	cmp	r9, ip
 8006b10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b14:	f84e 2b04 	str.w	r2, [lr], #4
 8006b18:	d2de      	bcs.n	8006ad8 <quorem+0x42>
 8006b1a:	9b00      	ldr	r3, [sp, #0]
 8006b1c:	58eb      	ldr	r3, [r5, r3]
 8006b1e:	b92b      	cbnz	r3, 8006b2c <quorem+0x96>
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	3b04      	subs	r3, #4
 8006b24:	429d      	cmp	r5, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	d32f      	bcc.n	8006b8a <quorem+0xf4>
 8006b2a:	613c      	str	r4, [r7, #16]
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	f001 f979 	bl	8007e24 <__mcmp>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	db25      	blt.n	8006b82 <quorem+0xec>
 8006b36:	4629      	mov	r1, r5
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b3e:	f8d1 c000 	ldr.w	ip, [r1]
 8006b42:	fa1f fe82 	uxth.w	lr, r2
 8006b46:	fa1f f38c 	uxth.w	r3, ip
 8006b4a:	eba3 030e 	sub.w	r3, r3, lr
 8006b4e:	4403      	add	r3, r0
 8006b50:	0c12      	lsrs	r2, r2, #16
 8006b52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b60:	45c1      	cmp	r9, r8
 8006b62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b66:	f841 3b04 	str.w	r3, [r1], #4
 8006b6a:	d2e6      	bcs.n	8006b3a <quorem+0xa4>
 8006b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b74:	b922      	cbnz	r2, 8006b80 <quorem+0xea>
 8006b76:	3b04      	subs	r3, #4
 8006b78:	429d      	cmp	r5, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	d30b      	bcc.n	8006b96 <quorem+0x100>
 8006b7e:	613c      	str	r4, [r7, #16]
 8006b80:	3601      	adds	r6, #1
 8006b82:	4630      	mov	r0, r6
 8006b84:	b003      	add	sp, #12
 8006b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	3b04      	subs	r3, #4
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	d1cb      	bne.n	8006b2a <quorem+0x94>
 8006b92:	3c01      	subs	r4, #1
 8006b94:	e7c6      	b.n	8006b24 <quorem+0x8e>
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d1ef      	bne.n	8006b7e <quorem+0xe8>
 8006b9e:	3c01      	subs	r4, #1
 8006ba0:	e7ea      	b.n	8006b78 <quorem+0xe2>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e7ee      	b.n	8006b84 <quorem+0xee>
	...

08006ba8 <_dtoa_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	4614      	mov	r4, r2
 8006bae:	461d      	mov	r5, r3
 8006bb0:	69c7      	ldr	r7, [r0, #28]
 8006bb2:	b097      	sub	sp, #92	@ 0x5c
 8006bb4:	4683      	mov	fp, r0
 8006bb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006bba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006bbc:	b97f      	cbnz	r7, 8006bde <_dtoa_r+0x36>
 8006bbe:	2010      	movs	r0, #16
 8006bc0:	f000 fe02 	bl	80077c8 <malloc>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	f8cb 001c 	str.w	r0, [fp, #28]
 8006bca:	b920      	cbnz	r0, 8006bd6 <_dtoa_r+0x2e>
 8006bcc:	21ef      	movs	r1, #239	@ 0xef
 8006bce:	4ba8      	ldr	r3, [pc, #672]	@ (8006e70 <_dtoa_r+0x2c8>)
 8006bd0:	48a8      	ldr	r0, [pc, #672]	@ (8006e74 <_dtoa_r+0x2cc>)
 8006bd2:	f001 fc59 	bl	8008488 <__assert_func>
 8006bd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006bda:	6007      	str	r7, [r0, #0]
 8006bdc:	60c7      	str	r7, [r0, #12]
 8006bde:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	b159      	cbz	r1, 8006bfe <_dtoa_r+0x56>
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	2301      	movs	r3, #1
 8006bea:	4093      	lsls	r3, r2
 8006bec:	604a      	str	r2, [r1, #4]
 8006bee:	608b      	str	r3, [r1, #8]
 8006bf0:	4658      	mov	r0, fp
 8006bf2:	f000 fedf 	bl	80079b4 <_Bfree>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	1e2b      	subs	r3, r5, #0
 8006c00:	bfaf      	iteee	ge
 8006c02:	2300      	movge	r3, #0
 8006c04:	2201      	movlt	r2, #1
 8006c06:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c0a:	9303      	strlt	r3, [sp, #12]
 8006c0c:	bfa8      	it	ge
 8006c0e:	6033      	strge	r3, [r6, #0]
 8006c10:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c14:	4b98      	ldr	r3, [pc, #608]	@ (8006e78 <_dtoa_r+0x2d0>)
 8006c16:	bfb8      	it	lt
 8006c18:	6032      	strlt	r2, [r6, #0]
 8006c1a:	ea33 0308 	bics.w	r3, r3, r8
 8006c1e:	d112      	bne.n	8006c46 <_dtoa_r+0x9e>
 8006c20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c24:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c2c:	4323      	orrs	r3, r4
 8006c2e:	f000 8550 	beq.w	80076d2 <_dtoa_r+0xb2a>
 8006c32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c34:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006e7c <_dtoa_r+0x2d4>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8552 	beq.w	80076e2 <_dtoa_r+0xb3a>
 8006c3e:	f10a 0303 	add.w	r3, sl, #3
 8006c42:	f000 bd4c 	b.w	80076de <_dtoa_r+0xb36>
 8006c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c52:	2200      	movs	r2, #0
 8006c54:	2300      	movs	r3, #0
 8006c56:	f7f9 fea7 	bl	80009a8 <__aeabi_dcmpeq>
 8006c5a:	4607      	mov	r7, r0
 8006c5c:	b158      	cbz	r0, 8006c76 <_dtoa_r+0xce>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c66:	b113      	cbz	r3, 8006c6e <_dtoa_r+0xc6>
 8006c68:	4b85      	ldr	r3, [pc, #532]	@ (8006e80 <_dtoa_r+0x2d8>)
 8006c6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006e84 <_dtoa_r+0x2dc>
 8006c72:	f000 bd36 	b.w	80076e2 <_dtoa_r+0xb3a>
 8006c76:	ab14      	add	r3, sp, #80	@ 0x50
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	ab15      	add	r3, sp, #84	@ 0x54
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	4658      	mov	r0, fp
 8006c80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006c84:	f001 f97e 	bl	8007f84 <__d2b>
 8006c88:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d077      	beq.n	8006d82 <_dtoa_r+0x1da>
 8006c92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c98:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ca0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ca4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ca8:	9712      	str	r7, [sp, #72]	@ 0x48
 8006caa:	4619      	mov	r1, r3
 8006cac:	2200      	movs	r2, #0
 8006cae:	4b76      	ldr	r3, [pc, #472]	@ (8006e88 <_dtoa_r+0x2e0>)
 8006cb0:	f7f9 fa5a 	bl	8000168 <__aeabi_dsub>
 8006cb4:	a368      	add	r3, pc, #416	@ (adr r3, 8006e58 <_dtoa_r+0x2b0>)
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f7f9 fc0d 	bl	80004d8 <__aeabi_dmul>
 8006cbe:	a368      	add	r3, pc, #416	@ (adr r3, 8006e60 <_dtoa_r+0x2b8>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 fa52 	bl	800016c <__adddf3>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4630      	mov	r0, r6
 8006ccc:	460d      	mov	r5, r1
 8006cce:	f7f9 fb99 	bl	8000404 <__aeabi_i2d>
 8006cd2:	a365      	add	r3, pc, #404	@ (adr r3, 8006e68 <_dtoa_r+0x2c0>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 fbfe 	bl	80004d8 <__aeabi_dmul>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	f7f9 fa42 	bl	800016c <__adddf3>
 8006ce8:	4604      	mov	r4, r0
 8006cea:	460d      	mov	r5, r1
 8006cec:	f7f9 fea4 	bl	8000a38 <__aeabi_d2iz>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f7f9 fe5f 	bl	80009bc <__aeabi_dcmplt>
 8006cfe:	b140      	cbz	r0, 8006d12 <_dtoa_r+0x16a>
 8006d00:	4638      	mov	r0, r7
 8006d02:	f7f9 fb7f 	bl	8000404 <__aeabi_i2d>
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	f7f9 fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 8006d0e:	b900      	cbnz	r0, 8006d12 <_dtoa_r+0x16a>
 8006d10:	3f01      	subs	r7, #1
 8006d12:	2f16      	cmp	r7, #22
 8006d14:	d853      	bhi.n	8006dbe <_dtoa_r+0x216>
 8006d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8006e8c <_dtoa_r+0x2e4>)
 8006d1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fe4a 	bl	80009bc <__aeabi_dcmplt>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d04a      	beq.n	8006dc2 <_dtoa_r+0x21a>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	3f01      	subs	r7, #1
 8006d30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d34:	1b9b      	subs	r3, r3, r6
 8006d36:	1e5a      	subs	r2, r3, #1
 8006d38:	bf46      	itte	mi
 8006d3a:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d3e:	2300      	movmi	r3, #0
 8006d40:	f04f 0800 	movpl.w	r8, #0
 8006d44:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d46:	bf48      	it	mi
 8006d48:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006d4a:	2f00      	cmp	r7, #0
 8006d4c:	db3b      	blt.n	8006dc6 <_dtoa_r+0x21e>
 8006d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d50:	970e      	str	r7, [sp, #56]	@ 0x38
 8006d52:	443b      	add	r3, r7
 8006d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d56:	2300      	movs	r3, #0
 8006d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	d866      	bhi.n	8006e2e <_dtoa_r+0x286>
 8006d60:	2b05      	cmp	r3, #5
 8006d62:	bfc4      	itt	gt
 8006d64:	3b04      	subgt	r3, #4
 8006d66:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006d68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d6a:	bfc8      	it	gt
 8006d6c:	2400      	movgt	r4, #0
 8006d6e:	f1a3 0302 	sub.w	r3, r3, #2
 8006d72:	bfd8      	it	le
 8006d74:	2401      	movle	r4, #1
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d864      	bhi.n	8006e44 <_dtoa_r+0x29c>
 8006d7a:	e8df f003 	tbb	[pc, r3]
 8006d7e:	382b      	.short	0x382b
 8006d80:	5636      	.short	0x5636
 8006d82:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006d86:	441e      	add	r6, r3
 8006d88:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	bfc1      	itttt	gt
 8006d90:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d94:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d98:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d9c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006da0:	bfd6      	itet	le
 8006da2:	f1c3 0320 	rsble	r3, r3, #32
 8006da6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006daa:	fa04 f003 	lslle.w	r0, r4, r3
 8006dae:	f7f9 fb19 	bl	80003e4 <__aeabi_ui2d>
 8006db2:	2201      	movs	r2, #1
 8006db4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006db8:	3e01      	subs	r6, #1
 8006dba:	9212      	str	r2, [sp, #72]	@ 0x48
 8006dbc:	e775      	b.n	8006caa <_dtoa_r+0x102>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7b6      	b.n	8006d30 <_dtoa_r+0x188>
 8006dc2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006dc4:	e7b5      	b.n	8006d32 <_dtoa_r+0x18a>
 8006dc6:	427b      	negs	r3, r7
 8006dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dca:	2300      	movs	r3, #0
 8006dcc:	eba8 0807 	sub.w	r8, r8, r7
 8006dd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006dd2:	e7c2      	b.n	8006d5a <_dtoa_r+0x1b2>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dc35      	bgt.n	8006e4a <_dtoa_r+0x2a2>
 8006dde:	2301      	movs	r3, #1
 8006de0:	461a      	mov	r2, r3
 8006de2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006de6:	9221      	str	r2, [sp, #132]	@ 0x84
 8006de8:	e00b      	b.n	8006e02 <_dtoa_r+0x25a>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e7f3      	b.n	8006dd6 <_dtoa_r+0x22e>
 8006dee:	2300      	movs	r3, #0
 8006df0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006df2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	9308      	str	r3, [sp, #32]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	9307      	str	r3, [sp, #28]
 8006dfe:	bfb8      	it	lt
 8006e00:	2301      	movlt	r3, #1
 8006e02:	2100      	movs	r1, #0
 8006e04:	2204      	movs	r2, #4
 8006e06:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e0a:	f102 0514 	add.w	r5, r2, #20
 8006e0e:	429d      	cmp	r5, r3
 8006e10:	d91f      	bls.n	8006e52 <_dtoa_r+0x2aa>
 8006e12:	6041      	str	r1, [r0, #4]
 8006e14:	4658      	mov	r0, fp
 8006e16:	f000 fd8d 	bl	8007934 <_Balloc>
 8006e1a:	4682      	mov	sl, r0
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d139      	bne.n	8006e94 <_dtoa_r+0x2ec>
 8006e20:	4602      	mov	r2, r0
 8006e22:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e26:	4b1a      	ldr	r3, [pc, #104]	@ (8006e90 <_dtoa_r+0x2e8>)
 8006e28:	e6d2      	b.n	8006bd0 <_dtoa_r+0x28>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e7e0      	b.n	8006df0 <_dtoa_r+0x248>
 8006e2e:	2401      	movs	r4, #1
 8006e30:	2300      	movs	r3, #0
 8006e32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e34:	9320      	str	r3, [sp, #128]	@ 0x80
 8006e36:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006e40:	2312      	movs	r3, #18
 8006e42:	e7d0      	b.n	8006de6 <_dtoa_r+0x23e>
 8006e44:	2301      	movs	r3, #1
 8006e46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e48:	e7f5      	b.n	8006e36 <_dtoa_r+0x28e>
 8006e4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006e50:	e7d7      	b.n	8006e02 <_dtoa_r+0x25a>
 8006e52:	3101      	adds	r1, #1
 8006e54:	0052      	lsls	r2, r2, #1
 8006e56:	e7d8      	b.n	8006e0a <_dtoa_r+0x262>
 8006e58:	636f4361 	.word	0x636f4361
 8006e5c:	3fd287a7 	.word	0x3fd287a7
 8006e60:	8b60c8b3 	.word	0x8b60c8b3
 8006e64:	3fc68a28 	.word	0x3fc68a28
 8006e68:	509f79fb 	.word	0x509f79fb
 8006e6c:	3fd34413 	.word	0x3fd34413
 8006e70:	08008cc3 	.word	0x08008cc3
 8006e74:	08008cda 	.word	0x08008cda
 8006e78:	7ff00000 	.word	0x7ff00000
 8006e7c:	08008cbf 	.word	0x08008cbf
 8006e80:	08008c93 	.word	0x08008c93
 8006e84:	08008c92 	.word	0x08008c92
 8006e88:	3ff80000 	.word	0x3ff80000
 8006e8c:	08008dd0 	.word	0x08008dd0
 8006e90:	08008d32 	.word	0x08008d32
 8006e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e98:	6018      	str	r0, [r3, #0]
 8006e9a:	9b07      	ldr	r3, [sp, #28]
 8006e9c:	2b0e      	cmp	r3, #14
 8006e9e:	f200 80a4 	bhi.w	8006fea <_dtoa_r+0x442>
 8006ea2:	2c00      	cmp	r4, #0
 8006ea4:	f000 80a1 	beq.w	8006fea <_dtoa_r+0x442>
 8006ea8:	2f00      	cmp	r7, #0
 8006eaa:	dd33      	ble.n	8006f14 <_dtoa_r+0x36c>
 8006eac:	4b86      	ldr	r3, [pc, #536]	@ (80070c8 <_dtoa_r+0x520>)
 8006eae:	f007 020f 	and.w	r2, r7, #15
 8006eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb6:	05f8      	lsls	r0, r7, #23
 8006eb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ebc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ec0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ec4:	d516      	bpl.n	8006ef4 <_dtoa_r+0x34c>
 8006ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eca:	4b80      	ldr	r3, [pc, #512]	@ (80070cc <_dtoa_r+0x524>)
 8006ecc:	2603      	movs	r6, #3
 8006ece:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ed2:	f7f9 fc2b 	bl	800072c <__aeabi_ddiv>
 8006ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eda:	f004 040f 	and.w	r4, r4, #15
 8006ede:	4d7b      	ldr	r5, [pc, #492]	@ (80070cc <_dtoa_r+0x524>)
 8006ee0:	b954      	cbnz	r4, 8006ef8 <_dtoa_r+0x350>
 8006ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eea:	f7f9 fc1f 	bl	800072c <__aeabi_ddiv>
 8006eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef2:	e028      	b.n	8006f46 <_dtoa_r+0x39e>
 8006ef4:	2602      	movs	r6, #2
 8006ef6:	e7f2      	b.n	8006ede <_dtoa_r+0x336>
 8006ef8:	07e1      	lsls	r1, r4, #31
 8006efa:	d508      	bpl.n	8006f0e <_dtoa_r+0x366>
 8006efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f04:	f7f9 fae8 	bl	80004d8 <__aeabi_dmul>
 8006f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	1064      	asrs	r4, r4, #1
 8006f10:	3508      	adds	r5, #8
 8006f12:	e7e5      	b.n	8006ee0 <_dtoa_r+0x338>
 8006f14:	f000 80d2 	beq.w	80070bc <_dtoa_r+0x514>
 8006f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f1c:	427c      	negs	r4, r7
 8006f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80070c8 <_dtoa_r+0x520>)
 8006f20:	f004 020f 	and.w	r2, r4, #15
 8006f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 fad4 	bl	80004d8 <__aeabi_dmul>
 8006f30:	2602      	movs	r6, #2
 8006f32:	2300      	movs	r3, #0
 8006f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f38:	4d64      	ldr	r5, [pc, #400]	@ (80070cc <_dtoa_r+0x524>)
 8006f3a:	1124      	asrs	r4, r4, #4
 8006f3c:	2c00      	cmp	r4, #0
 8006f3e:	f040 80b2 	bne.w	80070a6 <_dtoa_r+0x4fe>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1d3      	bne.n	8006eee <_dtoa_r+0x346>
 8006f46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80b7 	beq.w	80070c0 <_dtoa_r+0x518>
 8006f52:	2200      	movs	r2, #0
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	4b5d      	ldr	r3, [pc, #372]	@ (80070d0 <_dtoa_r+0x528>)
 8006f5a:	f7f9 fd2f 	bl	80009bc <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f000 80ae 	beq.w	80070c0 <_dtoa_r+0x518>
 8006f64:	9b07      	ldr	r3, [sp, #28]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80aa 	beq.w	80070c0 <_dtoa_r+0x518>
 8006f6c:	9b08      	ldr	r3, [sp, #32]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd37      	ble.n	8006fe2 <_dtoa_r+0x43a>
 8006f72:	1e7b      	subs	r3, r7, #1
 8006f74:	4620      	mov	r0, r4
 8006f76:	9304      	str	r3, [sp, #16]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	4b55      	ldr	r3, [pc, #340]	@ (80070d4 <_dtoa_r+0x52c>)
 8006f7e:	f7f9 faab 	bl	80004d8 <__aeabi_dmul>
 8006f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f86:	9c08      	ldr	r4, [sp, #32]
 8006f88:	3601      	adds	r6, #1
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f7f9 fa3a 	bl	8000404 <__aeabi_i2d>
 8006f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f94:	f7f9 faa0 	bl	80004d8 <__aeabi_dmul>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80070d8 <_dtoa_r+0x530>)
 8006f9c:	f7f9 f8e6 	bl	800016c <__adddf3>
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fa6:	2c00      	cmp	r4, #0
 8006fa8:	f040 809a 	bne.w	80070e0 <_dtoa_r+0x538>
 8006fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80070dc <_dtoa_r+0x534>)
 8006fb4:	f7f9 f8d8 	bl	8000168 <__aeabi_dsub>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4633      	mov	r3, r6
 8006fc4:	f7f9 fd18 	bl	80009f8 <__aeabi_dcmpgt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	f040 828e 	bne.w	80074ea <_dtoa_r+0x942>
 8006fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006fd8:	f7f9 fcf0 	bl	80009bc <__aeabi_dcmplt>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f040 8127 	bne.w	8007230 <_dtoa_r+0x688>
 8006fe2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006fe6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006fea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f2c0 8163 	blt.w	80072b8 <_dtoa_r+0x710>
 8006ff2:	2f0e      	cmp	r7, #14
 8006ff4:	f300 8160 	bgt.w	80072b8 <_dtoa_r+0x710>
 8006ff8:	4b33      	ldr	r3, [pc, #204]	@ (80070c8 <_dtoa_r+0x520>)
 8006ffa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ffe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007002:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007006:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007008:	2b00      	cmp	r3, #0
 800700a:	da03      	bge.n	8007014 <_dtoa_r+0x46c>
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f340 8100 	ble.w	8007214 <_dtoa_r+0x66c>
 8007014:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007018:	4656      	mov	r6, sl
 800701a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 fb83 	bl	800072c <__aeabi_ddiv>
 8007026:	f7f9 fd07 	bl	8000a38 <__aeabi_d2iz>
 800702a:	4680      	mov	r8, r0
 800702c:	f7f9 f9ea 	bl	8000404 <__aeabi_i2d>
 8007030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007034:	f7f9 fa50 	bl	80004d8 <__aeabi_dmul>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 f892 	bl	8000168 <__aeabi_dsub>
 8007044:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007048:	9d07      	ldr	r5, [sp, #28]
 800704a:	f806 4b01 	strb.w	r4, [r6], #1
 800704e:	eba6 040a 	sub.w	r4, r6, sl
 8007052:	42a5      	cmp	r5, r4
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	f040 8116 	bne.w	8007288 <_dtoa_r+0x6e0>
 800705c:	f7f9 f886 	bl	800016c <__adddf3>
 8007060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	f7f9 fcc6 	bl	80009f8 <__aeabi_dcmpgt>
 800706c:	2800      	cmp	r0, #0
 800706e:	f040 80f8 	bne.w	8007262 <_dtoa_r+0x6ba>
 8007072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007076:	4620      	mov	r0, r4
 8007078:	4629      	mov	r1, r5
 800707a:	f7f9 fc95 	bl	80009a8 <__aeabi_dcmpeq>
 800707e:	b118      	cbz	r0, 8007088 <_dtoa_r+0x4e0>
 8007080:	f018 0f01 	tst.w	r8, #1
 8007084:	f040 80ed 	bne.w	8007262 <_dtoa_r+0x6ba>
 8007088:	4649      	mov	r1, r9
 800708a:	4658      	mov	r0, fp
 800708c:	f000 fc92 	bl	80079b4 <_Bfree>
 8007090:	2300      	movs	r3, #0
 8007092:	7033      	strb	r3, [r6, #0]
 8007094:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007096:	3701      	adds	r7, #1
 8007098:	601f      	str	r7, [r3, #0]
 800709a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8320 	beq.w	80076e2 <_dtoa_r+0xb3a>
 80070a2:	601e      	str	r6, [r3, #0]
 80070a4:	e31d      	b.n	80076e2 <_dtoa_r+0xb3a>
 80070a6:	07e2      	lsls	r2, r4, #31
 80070a8:	d505      	bpl.n	80070b6 <_dtoa_r+0x50e>
 80070aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ae:	f7f9 fa13 	bl	80004d8 <__aeabi_dmul>
 80070b2:	2301      	movs	r3, #1
 80070b4:	3601      	adds	r6, #1
 80070b6:	1064      	asrs	r4, r4, #1
 80070b8:	3508      	adds	r5, #8
 80070ba:	e73f      	b.n	8006f3c <_dtoa_r+0x394>
 80070bc:	2602      	movs	r6, #2
 80070be:	e742      	b.n	8006f46 <_dtoa_r+0x39e>
 80070c0:	9c07      	ldr	r4, [sp, #28]
 80070c2:	9704      	str	r7, [sp, #16]
 80070c4:	e761      	b.n	8006f8a <_dtoa_r+0x3e2>
 80070c6:	bf00      	nop
 80070c8:	08008dd0 	.word	0x08008dd0
 80070cc:	08008da8 	.word	0x08008da8
 80070d0:	3ff00000 	.word	0x3ff00000
 80070d4:	40240000 	.word	0x40240000
 80070d8:	401c0000 	.word	0x401c0000
 80070dc:	40140000 	.word	0x40140000
 80070e0:	4b70      	ldr	r3, [pc, #448]	@ (80072a4 <_dtoa_r+0x6fc>)
 80070e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ec:	4454      	add	r4, sl
 80070ee:	2900      	cmp	r1, #0
 80070f0:	d045      	beq.n	800717e <_dtoa_r+0x5d6>
 80070f2:	2000      	movs	r0, #0
 80070f4:	496c      	ldr	r1, [pc, #432]	@ (80072a8 <_dtoa_r+0x700>)
 80070f6:	f7f9 fb19 	bl	800072c <__aeabi_ddiv>
 80070fa:	4633      	mov	r3, r6
 80070fc:	462a      	mov	r2, r5
 80070fe:	f7f9 f833 	bl	8000168 <__aeabi_dsub>
 8007102:	4656      	mov	r6, sl
 8007104:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800710c:	f7f9 fc94 	bl	8000a38 <__aeabi_d2iz>
 8007110:	4605      	mov	r5, r0
 8007112:	f7f9 f977 	bl	8000404 <__aeabi_i2d>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800711e:	f7f9 f823 	bl	8000168 <__aeabi_dsub>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	3530      	adds	r5, #48	@ 0x30
 8007128:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800712c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007130:	f806 5b01 	strb.w	r5, [r6], #1
 8007134:	f7f9 fc42 	bl	80009bc <__aeabi_dcmplt>
 8007138:	2800      	cmp	r0, #0
 800713a:	d163      	bne.n	8007204 <_dtoa_r+0x65c>
 800713c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007140:	2000      	movs	r0, #0
 8007142:	495a      	ldr	r1, [pc, #360]	@ (80072ac <_dtoa_r+0x704>)
 8007144:	f7f9 f810 	bl	8000168 <__aeabi_dsub>
 8007148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800714c:	f7f9 fc36 	bl	80009bc <__aeabi_dcmplt>
 8007150:	2800      	cmp	r0, #0
 8007152:	f040 8087 	bne.w	8007264 <_dtoa_r+0x6bc>
 8007156:	42a6      	cmp	r6, r4
 8007158:	f43f af43 	beq.w	8006fe2 <_dtoa_r+0x43a>
 800715c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007160:	2200      	movs	r2, #0
 8007162:	4b53      	ldr	r3, [pc, #332]	@ (80072b0 <_dtoa_r+0x708>)
 8007164:	f7f9 f9b8 	bl	80004d8 <__aeabi_dmul>
 8007168:	2200      	movs	r2, #0
 800716a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800716e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007172:	4b4f      	ldr	r3, [pc, #316]	@ (80072b0 <_dtoa_r+0x708>)
 8007174:	f7f9 f9b0 	bl	80004d8 <__aeabi_dmul>
 8007178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800717c:	e7c4      	b.n	8007108 <_dtoa_r+0x560>
 800717e:	4631      	mov	r1, r6
 8007180:	4628      	mov	r0, r5
 8007182:	f7f9 f9a9 	bl	80004d8 <__aeabi_dmul>
 8007186:	4656      	mov	r6, sl
 8007188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800718c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800718e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007192:	f7f9 fc51 	bl	8000a38 <__aeabi_d2iz>
 8007196:	4605      	mov	r5, r0
 8007198:	f7f9 f934 	bl	8000404 <__aeabi_i2d>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a4:	f7f8 ffe0 	bl	8000168 <__aeabi_dsub>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	3530      	adds	r5, #48	@ 0x30
 80071ae:	f806 5b01 	strb.w	r5, [r6], #1
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	d124      	bne.n	8007208 <_dtoa_r+0x660>
 80071be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071c2:	4b39      	ldr	r3, [pc, #228]	@ (80072a8 <_dtoa_r+0x700>)
 80071c4:	f7f8 ffd2 	bl	800016c <__adddf3>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d0:	f7f9 fc12 	bl	80009f8 <__aeabi_dcmpgt>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d145      	bne.n	8007264 <_dtoa_r+0x6bc>
 80071d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071dc:	2000      	movs	r0, #0
 80071de:	4932      	ldr	r1, [pc, #200]	@ (80072a8 <_dtoa_r+0x700>)
 80071e0:	f7f8 ffc2 	bl	8000168 <__aeabi_dsub>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ec:	f7f9 fbe6 	bl	80009bc <__aeabi_dcmplt>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f43f aef6 	beq.w	8006fe2 <_dtoa_r+0x43a>
 80071f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80071f8:	1e73      	subs	r3, r6, #1
 80071fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007200:	2b30      	cmp	r3, #48	@ 0x30
 8007202:	d0f8      	beq.n	80071f6 <_dtoa_r+0x64e>
 8007204:	9f04      	ldr	r7, [sp, #16]
 8007206:	e73f      	b.n	8007088 <_dtoa_r+0x4e0>
 8007208:	4b29      	ldr	r3, [pc, #164]	@ (80072b0 <_dtoa_r+0x708>)
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007212:	e7bc      	b.n	800718e <_dtoa_r+0x5e6>
 8007214:	d10c      	bne.n	8007230 <_dtoa_r+0x688>
 8007216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800721a:	2200      	movs	r2, #0
 800721c:	4b25      	ldr	r3, [pc, #148]	@ (80072b4 <_dtoa_r+0x70c>)
 800721e:	f7f9 f95b 	bl	80004d8 <__aeabi_dmul>
 8007222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007226:	f7f9 fbdd 	bl	80009e4 <__aeabi_dcmpge>
 800722a:	2800      	cmp	r0, #0
 800722c:	f000 815b 	beq.w	80074e6 <_dtoa_r+0x93e>
 8007230:	2400      	movs	r4, #0
 8007232:	4625      	mov	r5, r4
 8007234:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007236:	4656      	mov	r6, sl
 8007238:	43db      	mvns	r3, r3
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	2700      	movs	r7, #0
 800723e:	4621      	mov	r1, r4
 8007240:	4658      	mov	r0, fp
 8007242:	f000 fbb7 	bl	80079b4 <_Bfree>
 8007246:	2d00      	cmp	r5, #0
 8007248:	d0dc      	beq.n	8007204 <_dtoa_r+0x65c>
 800724a:	b12f      	cbz	r7, 8007258 <_dtoa_r+0x6b0>
 800724c:	42af      	cmp	r7, r5
 800724e:	d003      	beq.n	8007258 <_dtoa_r+0x6b0>
 8007250:	4639      	mov	r1, r7
 8007252:	4658      	mov	r0, fp
 8007254:	f000 fbae 	bl	80079b4 <_Bfree>
 8007258:	4629      	mov	r1, r5
 800725a:	4658      	mov	r0, fp
 800725c:	f000 fbaa 	bl	80079b4 <_Bfree>
 8007260:	e7d0      	b.n	8007204 <_dtoa_r+0x65c>
 8007262:	9704      	str	r7, [sp, #16]
 8007264:	4633      	mov	r3, r6
 8007266:	461e      	mov	r6, r3
 8007268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800726c:	2a39      	cmp	r2, #57	@ 0x39
 800726e:	d107      	bne.n	8007280 <_dtoa_r+0x6d8>
 8007270:	459a      	cmp	sl, r3
 8007272:	d1f8      	bne.n	8007266 <_dtoa_r+0x6be>
 8007274:	9a04      	ldr	r2, [sp, #16]
 8007276:	3201      	adds	r2, #1
 8007278:	9204      	str	r2, [sp, #16]
 800727a:	2230      	movs	r2, #48	@ 0x30
 800727c:	f88a 2000 	strb.w	r2, [sl]
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	3201      	adds	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e7bd      	b.n	8007204 <_dtoa_r+0x65c>
 8007288:	2200      	movs	r2, #0
 800728a:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <_dtoa_r+0x708>)
 800728c:	f7f9 f924 	bl	80004d8 <__aeabi_dmul>
 8007290:	2200      	movs	r2, #0
 8007292:	2300      	movs	r3, #0
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	f7f9 fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800729c:	2800      	cmp	r0, #0
 800729e:	f43f aebc 	beq.w	800701a <_dtoa_r+0x472>
 80072a2:	e6f1      	b.n	8007088 <_dtoa_r+0x4e0>
 80072a4:	08008dd0 	.word	0x08008dd0
 80072a8:	3fe00000 	.word	0x3fe00000
 80072ac:	3ff00000 	.word	0x3ff00000
 80072b0:	40240000 	.word	0x40240000
 80072b4:	40140000 	.word	0x40140000
 80072b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	f000 80db 	beq.w	8007476 <_dtoa_r+0x8ce>
 80072c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072c2:	2a01      	cmp	r2, #1
 80072c4:	f300 80bf 	bgt.w	8007446 <_dtoa_r+0x89e>
 80072c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072ca:	2a00      	cmp	r2, #0
 80072cc:	f000 80b7 	beq.w	800743e <_dtoa_r+0x896>
 80072d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072d4:	4646      	mov	r6, r8
 80072d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072da:	2101      	movs	r1, #1
 80072dc:	441a      	add	r2, r3
 80072de:	4658      	mov	r0, fp
 80072e0:	4498      	add	r8, r3
 80072e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80072e4:	f000 fc1a 	bl	8007b1c <__i2b>
 80072e8:	4605      	mov	r5, r0
 80072ea:	b15e      	cbz	r6, 8007304 <_dtoa_r+0x75c>
 80072ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dd08      	ble.n	8007304 <_dtoa_r+0x75c>
 80072f2:	42b3      	cmp	r3, r6
 80072f4:	bfa8      	it	ge
 80072f6:	4633      	movge	r3, r6
 80072f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fa:	eba8 0803 	sub.w	r8, r8, r3
 80072fe:	1af6      	subs	r6, r6, r3
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	9309      	str	r3, [sp, #36]	@ 0x24
 8007304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007306:	b1f3      	cbz	r3, 8007346 <_dtoa_r+0x79e>
 8007308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80b7 	beq.w	800747e <_dtoa_r+0x8d6>
 8007310:	b18c      	cbz	r4, 8007336 <_dtoa_r+0x78e>
 8007312:	4629      	mov	r1, r5
 8007314:	4622      	mov	r2, r4
 8007316:	4658      	mov	r0, fp
 8007318:	f000 fcbe 	bl	8007c98 <__pow5mult>
 800731c:	464a      	mov	r2, r9
 800731e:	4601      	mov	r1, r0
 8007320:	4605      	mov	r5, r0
 8007322:	4658      	mov	r0, fp
 8007324:	f000 fc10 	bl	8007b48 <__multiply>
 8007328:	4649      	mov	r1, r9
 800732a:	9004      	str	r0, [sp, #16]
 800732c:	4658      	mov	r0, fp
 800732e:	f000 fb41 	bl	80079b4 <_Bfree>
 8007332:	9b04      	ldr	r3, [sp, #16]
 8007334:	4699      	mov	r9, r3
 8007336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007338:	1b1a      	subs	r2, r3, r4
 800733a:	d004      	beq.n	8007346 <_dtoa_r+0x79e>
 800733c:	4649      	mov	r1, r9
 800733e:	4658      	mov	r0, fp
 8007340:	f000 fcaa 	bl	8007c98 <__pow5mult>
 8007344:	4681      	mov	r9, r0
 8007346:	2101      	movs	r1, #1
 8007348:	4658      	mov	r0, fp
 800734a:	f000 fbe7 	bl	8007b1c <__i2b>
 800734e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007350:	4604      	mov	r4, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 81c9 	beq.w	80076ea <_dtoa_r+0xb42>
 8007358:	461a      	mov	r2, r3
 800735a:	4601      	mov	r1, r0
 800735c:	4658      	mov	r0, fp
 800735e:	f000 fc9b 	bl	8007c98 <__pow5mult>
 8007362:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007364:	4604      	mov	r4, r0
 8007366:	2b01      	cmp	r3, #1
 8007368:	f300 808f 	bgt.w	800748a <_dtoa_r+0x8e2>
 800736c:	9b02      	ldr	r3, [sp, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f040 8087 	bne.w	8007482 <_dtoa_r+0x8da>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 8083 	bne.w	8007486 <_dtoa_r+0x8de>
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007386:	0d1b      	lsrs	r3, r3, #20
 8007388:	051b      	lsls	r3, r3, #20
 800738a:	b12b      	cbz	r3, 8007398 <_dtoa_r+0x7f0>
 800738c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738e:	f108 0801 	add.w	r8, r8, #1
 8007392:	3301      	adds	r3, #1
 8007394:	9309      	str	r3, [sp, #36]	@ 0x24
 8007396:	2301      	movs	r3, #1
 8007398:	930a      	str	r3, [sp, #40]	@ 0x28
 800739a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 81aa 	beq.w	80076f6 <_dtoa_r+0xb4e>
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073a8:	6918      	ldr	r0, [r3, #16]
 80073aa:	f000 fb6b 	bl	8007a84 <__hi0bits>
 80073ae:	f1c0 0020 	rsb	r0, r0, #32
 80073b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b4:	4418      	add	r0, r3
 80073b6:	f010 001f 	ands.w	r0, r0, #31
 80073ba:	d071      	beq.n	80074a0 <_dtoa_r+0x8f8>
 80073bc:	f1c0 0320 	rsb	r3, r0, #32
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	dd65      	ble.n	8007490 <_dtoa_r+0x8e8>
 80073c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c6:	f1c0 001c 	rsb	r0, r0, #28
 80073ca:	4403      	add	r3, r0
 80073cc:	4480      	add	r8, r0
 80073ce:	4406      	add	r6, r0
 80073d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d2:	f1b8 0f00 	cmp.w	r8, #0
 80073d6:	dd05      	ble.n	80073e4 <_dtoa_r+0x83c>
 80073d8:	4649      	mov	r1, r9
 80073da:	4642      	mov	r2, r8
 80073dc:	4658      	mov	r0, fp
 80073de:	f000 fcb5 	bl	8007d4c <__lshift>
 80073e2:	4681      	mov	r9, r0
 80073e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dd05      	ble.n	80073f6 <_dtoa_r+0x84e>
 80073ea:	4621      	mov	r1, r4
 80073ec:	461a      	mov	r2, r3
 80073ee:	4658      	mov	r0, fp
 80073f0:	f000 fcac 	bl	8007d4c <__lshift>
 80073f4:	4604      	mov	r4, r0
 80073f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d053      	beq.n	80074a4 <_dtoa_r+0x8fc>
 80073fc:	4621      	mov	r1, r4
 80073fe:	4648      	mov	r0, r9
 8007400:	f000 fd10 	bl	8007e24 <__mcmp>
 8007404:	2800      	cmp	r0, #0
 8007406:	da4d      	bge.n	80074a4 <_dtoa_r+0x8fc>
 8007408:	1e7b      	subs	r3, r7, #1
 800740a:	4649      	mov	r1, r9
 800740c:	9304      	str	r3, [sp, #16]
 800740e:	220a      	movs	r2, #10
 8007410:	2300      	movs	r3, #0
 8007412:	4658      	mov	r0, fp
 8007414:	f000 faf0 	bl	80079f8 <__multadd>
 8007418:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800741a:	4681      	mov	r9, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 816c 	beq.w	80076fa <_dtoa_r+0xb52>
 8007422:	2300      	movs	r3, #0
 8007424:	4629      	mov	r1, r5
 8007426:	220a      	movs	r2, #10
 8007428:	4658      	mov	r0, fp
 800742a:	f000 fae5 	bl	80079f8 <__multadd>
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	4605      	mov	r5, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	dc61      	bgt.n	80074fa <_dtoa_r+0x952>
 8007436:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007438:	2b02      	cmp	r3, #2
 800743a:	dc3b      	bgt.n	80074b4 <_dtoa_r+0x90c>
 800743c:	e05d      	b.n	80074fa <_dtoa_r+0x952>
 800743e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007440:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007444:	e746      	b.n	80072d4 <_dtoa_r+0x72c>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	1e5c      	subs	r4, r3, #1
 800744a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800744c:	42a3      	cmp	r3, r4
 800744e:	bfbf      	itttt	lt
 8007450:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007452:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007454:	1ae3      	sublt	r3, r4, r3
 8007456:	18d2      	addlt	r2, r2, r3
 8007458:	bfa8      	it	ge
 800745a:	1b1c      	subge	r4, r3, r4
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	bfbe      	ittt	lt
 8007460:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007462:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007464:	2400      	movlt	r4, #0
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfb5      	itete	lt
 800746a:	eba8 0603 	sublt.w	r6, r8, r3
 800746e:	4646      	movge	r6, r8
 8007470:	2300      	movlt	r3, #0
 8007472:	9b07      	ldrge	r3, [sp, #28]
 8007474:	e730      	b.n	80072d8 <_dtoa_r+0x730>
 8007476:	4646      	mov	r6, r8
 8007478:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800747a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800747c:	e735      	b.n	80072ea <_dtoa_r+0x742>
 800747e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007480:	e75c      	b.n	800733c <_dtoa_r+0x794>
 8007482:	2300      	movs	r3, #0
 8007484:	e788      	b.n	8007398 <_dtoa_r+0x7f0>
 8007486:	9b02      	ldr	r3, [sp, #8]
 8007488:	e786      	b.n	8007398 <_dtoa_r+0x7f0>
 800748a:	2300      	movs	r3, #0
 800748c:	930a      	str	r3, [sp, #40]	@ 0x28
 800748e:	e788      	b.n	80073a2 <_dtoa_r+0x7fa>
 8007490:	d09f      	beq.n	80073d2 <_dtoa_r+0x82a>
 8007492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007494:	331c      	adds	r3, #28
 8007496:	441a      	add	r2, r3
 8007498:	4498      	add	r8, r3
 800749a:	441e      	add	r6, r3
 800749c:	9209      	str	r2, [sp, #36]	@ 0x24
 800749e:	e798      	b.n	80073d2 <_dtoa_r+0x82a>
 80074a0:	4603      	mov	r3, r0
 80074a2:	e7f6      	b.n	8007492 <_dtoa_r+0x8ea>
 80074a4:	9b07      	ldr	r3, [sp, #28]
 80074a6:	9704      	str	r7, [sp, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dc20      	bgt.n	80074ee <_dtoa_r+0x946>
 80074ac:	9308      	str	r3, [sp, #32]
 80074ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	dd1e      	ble.n	80074f2 <_dtoa_r+0x94a>
 80074b4:	9b08      	ldr	r3, [sp, #32]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f47f aebc 	bne.w	8007234 <_dtoa_r+0x68c>
 80074bc:	4621      	mov	r1, r4
 80074be:	2205      	movs	r2, #5
 80074c0:	4658      	mov	r0, fp
 80074c2:	f000 fa99 	bl	80079f8 <__multadd>
 80074c6:	4601      	mov	r1, r0
 80074c8:	4604      	mov	r4, r0
 80074ca:	4648      	mov	r0, r9
 80074cc:	f000 fcaa 	bl	8007e24 <__mcmp>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	f77f aeaf 	ble.w	8007234 <_dtoa_r+0x68c>
 80074d6:	2331      	movs	r3, #49	@ 0x31
 80074d8:	4656      	mov	r6, sl
 80074da:	f806 3b01 	strb.w	r3, [r6], #1
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	3301      	adds	r3, #1
 80074e2:	9304      	str	r3, [sp, #16]
 80074e4:	e6aa      	b.n	800723c <_dtoa_r+0x694>
 80074e6:	9c07      	ldr	r4, [sp, #28]
 80074e8:	9704      	str	r7, [sp, #16]
 80074ea:	4625      	mov	r5, r4
 80074ec:	e7f3      	b.n	80074d6 <_dtoa_r+0x92e>
 80074ee:	9b07      	ldr	r3, [sp, #28]
 80074f0:	9308      	str	r3, [sp, #32]
 80074f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8104 	beq.w	8007702 <_dtoa_r+0xb5a>
 80074fa:	2e00      	cmp	r6, #0
 80074fc:	dd05      	ble.n	800750a <_dtoa_r+0x962>
 80074fe:	4629      	mov	r1, r5
 8007500:	4632      	mov	r2, r6
 8007502:	4658      	mov	r0, fp
 8007504:	f000 fc22 	bl	8007d4c <__lshift>
 8007508:	4605      	mov	r5, r0
 800750a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750c:	2b00      	cmp	r3, #0
 800750e:	d05a      	beq.n	80075c6 <_dtoa_r+0xa1e>
 8007510:	4658      	mov	r0, fp
 8007512:	6869      	ldr	r1, [r5, #4]
 8007514:	f000 fa0e 	bl	8007934 <_Balloc>
 8007518:	4606      	mov	r6, r0
 800751a:	b928      	cbnz	r0, 8007528 <_dtoa_r+0x980>
 800751c:	4602      	mov	r2, r0
 800751e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007522:	4b83      	ldr	r3, [pc, #524]	@ (8007730 <_dtoa_r+0xb88>)
 8007524:	f7ff bb54 	b.w	8006bd0 <_dtoa_r+0x28>
 8007528:	692a      	ldr	r2, [r5, #16]
 800752a:	f105 010c 	add.w	r1, r5, #12
 800752e:	3202      	adds	r2, #2
 8007530:	0092      	lsls	r2, r2, #2
 8007532:	300c      	adds	r0, #12
 8007534:	f7ff faa1 	bl	8006a7a <memcpy>
 8007538:	2201      	movs	r2, #1
 800753a:	4631      	mov	r1, r6
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fc05 	bl	8007d4c <__lshift>
 8007542:	462f      	mov	r7, r5
 8007544:	4605      	mov	r5, r0
 8007546:	f10a 0301 	add.w	r3, sl, #1
 800754a:	9307      	str	r3, [sp, #28]
 800754c:	9b08      	ldr	r3, [sp, #32]
 800754e:	4453      	add	r3, sl
 8007550:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007552:	9b02      	ldr	r3, [sp, #8]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	930a      	str	r3, [sp, #40]	@ 0x28
 800755a:	9b07      	ldr	r3, [sp, #28]
 800755c:	4621      	mov	r1, r4
 800755e:	3b01      	subs	r3, #1
 8007560:	4648      	mov	r0, r9
 8007562:	9302      	str	r3, [sp, #8]
 8007564:	f7ff fa97 	bl	8006a96 <quorem>
 8007568:	4639      	mov	r1, r7
 800756a:	9008      	str	r0, [sp, #32]
 800756c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007570:	4648      	mov	r0, r9
 8007572:	f000 fc57 	bl	8007e24 <__mcmp>
 8007576:	462a      	mov	r2, r5
 8007578:	9009      	str	r0, [sp, #36]	@ 0x24
 800757a:	4621      	mov	r1, r4
 800757c:	4658      	mov	r0, fp
 800757e:	f000 fc6d 	bl	8007e5c <__mdiff>
 8007582:	68c2      	ldr	r2, [r0, #12]
 8007584:	4606      	mov	r6, r0
 8007586:	bb02      	cbnz	r2, 80075ca <_dtoa_r+0xa22>
 8007588:	4601      	mov	r1, r0
 800758a:	4648      	mov	r0, r9
 800758c:	f000 fc4a 	bl	8007e24 <__mcmp>
 8007590:	4602      	mov	r2, r0
 8007592:	4631      	mov	r1, r6
 8007594:	4658      	mov	r0, fp
 8007596:	920c      	str	r2, [sp, #48]	@ 0x30
 8007598:	f000 fa0c 	bl	80079b4 <_Bfree>
 800759c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800759e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075a0:	9e07      	ldr	r6, [sp, #28]
 80075a2:	ea43 0102 	orr.w	r1, r3, r2
 80075a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a8:	4319      	orrs	r1, r3
 80075aa:	d110      	bne.n	80075ce <_dtoa_r+0xa26>
 80075ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075b0:	d029      	beq.n	8007606 <_dtoa_r+0xa5e>
 80075b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dd02      	ble.n	80075be <_dtoa_r+0xa16>
 80075b8:	9b08      	ldr	r3, [sp, #32]
 80075ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80075be:	9b02      	ldr	r3, [sp, #8]
 80075c0:	f883 8000 	strb.w	r8, [r3]
 80075c4:	e63b      	b.n	800723e <_dtoa_r+0x696>
 80075c6:	4628      	mov	r0, r5
 80075c8:	e7bb      	b.n	8007542 <_dtoa_r+0x99a>
 80075ca:	2201      	movs	r2, #1
 80075cc:	e7e1      	b.n	8007592 <_dtoa_r+0x9ea>
 80075ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	db04      	blt.n	80075de <_dtoa_r+0xa36>
 80075d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80075d6:	430b      	orrs	r3, r1
 80075d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075da:	430b      	orrs	r3, r1
 80075dc:	d120      	bne.n	8007620 <_dtoa_r+0xa78>
 80075de:	2a00      	cmp	r2, #0
 80075e0:	dded      	ble.n	80075be <_dtoa_r+0xa16>
 80075e2:	4649      	mov	r1, r9
 80075e4:	2201      	movs	r2, #1
 80075e6:	4658      	mov	r0, fp
 80075e8:	f000 fbb0 	bl	8007d4c <__lshift>
 80075ec:	4621      	mov	r1, r4
 80075ee:	4681      	mov	r9, r0
 80075f0:	f000 fc18 	bl	8007e24 <__mcmp>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	dc03      	bgt.n	8007600 <_dtoa_r+0xa58>
 80075f8:	d1e1      	bne.n	80075be <_dtoa_r+0xa16>
 80075fa:	f018 0f01 	tst.w	r8, #1
 80075fe:	d0de      	beq.n	80075be <_dtoa_r+0xa16>
 8007600:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007604:	d1d8      	bne.n	80075b8 <_dtoa_r+0xa10>
 8007606:	2339      	movs	r3, #57	@ 0x39
 8007608:	9a02      	ldr	r2, [sp, #8]
 800760a:	7013      	strb	r3, [r2, #0]
 800760c:	4633      	mov	r3, r6
 800760e:	461e      	mov	r6, r3
 8007610:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007614:	3b01      	subs	r3, #1
 8007616:	2a39      	cmp	r2, #57	@ 0x39
 8007618:	d052      	beq.n	80076c0 <_dtoa_r+0xb18>
 800761a:	3201      	adds	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e60e      	b.n	800723e <_dtoa_r+0x696>
 8007620:	2a00      	cmp	r2, #0
 8007622:	dd07      	ble.n	8007634 <_dtoa_r+0xa8c>
 8007624:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007628:	d0ed      	beq.n	8007606 <_dtoa_r+0xa5e>
 800762a:	9a02      	ldr	r2, [sp, #8]
 800762c:	f108 0301 	add.w	r3, r8, #1
 8007630:	7013      	strb	r3, [r2, #0]
 8007632:	e604      	b.n	800723e <_dtoa_r+0x696>
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	9a07      	ldr	r2, [sp, #28]
 8007638:	f803 8c01 	strb.w	r8, [r3, #-1]
 800763c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800763e:	4293      	cmp	r3, r2
 8007640:	d028      	beq.n	8007694 <_dtoa_r+0xaec>
 8007642:	4649      	mov	r1, r9
 8007644:	2300      	movs	r3, #0
 8007646:	220a      	movs	r2, #10
 8007648:	4658      	mov	r0, fp
 800764a:	f000 f9d5 	bl	80079f8 <__multadd>
 800764e:	42af      	cmp	r7, r5
 8007650:	4681      	mov	r9, r0
 8007652:	f04f 0300 	mov.w	r3, #0
 8007656:	f04f 020a 	mov.w	r2, #10
 800765a:	4639      	mov	r1, r7
 800765c:	4658      	mov	r0, fp
 800765e:	d107      	bne.n	8007670 <_dtoa_r+0xac8>
 8007660:	f000 f9ca 	bl	80079f8 <__multadd>
 8007664:	4607      	mov	r7, r0
 8007666:	4605      	mov	r5, r0
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	3301      	adds	r3, #1
 800766c:	9307      	str	r3, [sp, #28]
 800766e:	e774      	b.n	800755a <_dtoa_r+0x9b2>
 8007670:	f000 f9c2 	bl	80079f8 <__multadd>
 8007674:	4629      	mov	r1, r5
 8007676:	4607      	mov	r7, r0
 8007678:	2300      	movs	r3, #0
 800767a:	220a      	movs	r2, #10
 800767c:	4658      	mov	r0, fp
 800767e:	f000 f9bb 	bl	80079f8 <__multadd>
 8007682:	4605      	mov	r5, r0
 8007684:	e7f0      	b.n	8007668 <_dtoa_r+0xac0>
 8007686:	9b08      	ldr	r3, [sp, #32]
 8007688:	2700      	movs	r7, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	bfcc      	ite	gt
 800768e:	461e      	movgt	r6, r3
 8007690:	2601      	movle	r6, #1
 8007692:	4456      	add	r6, sl
 8007694:	4649      	mov	r1, r9
 8007696:	2201      	movs	r2, #1
 8007698:	4658      	mov	r0, fp
 800769a:	f000 fb57 	bl	8007d4c <__lshift>
 800769e:	4621      	mov	r1, r4
 80076a0:	4681      	mov	r9, r0
 80076a2:	f000 fbbf 	bl	8007e24 <__mcmp>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	dcb0      	bgt.n	800760c <_dtoa_r+0xa64>
 80076aa:	d102      	bne.n	80076b2 <_dtoa_r+0xb0a>
 80076ac:	f018 0f01 	tst.w	r8, #1
 80076b0:	d1ac      	bne.n	800760c <_dtoa_r+0xa64>
 80076b2:	4633      	mov	r3, r6
 80076b4:	461e      	mov	r6, r3
 80076b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ba:	2a30      	cmp	r2, #48	@ 0x30
 80076bc:	d0fa      	beq.n	80076b4 <_dtoa_r+0xb0c>
 80076be:	e5be      	b.n	800723e <_dtoa_r+0x696>
 80076c0:	459a      	cmp	sl, r3
 80076c2:	d1a4      	bne.n	800760e <_dtoa_r+0xa66>
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	3301      	adds	r3, #1
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	2331      	movs	r3, #49	@ 0x31
 80076cc:	f88a 3000 	strb.w	r3, [sl]
 80076d0:	e5b5      	b.n	800723e <_dtoa_r+0x696>
 80076d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076d4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007734 <_dtoa_r+0xb8c>
 80076d8:	b11b      	cbz	r3, 80076e2 <_dtoa_r+0xb3a>
 80076da:	f10a 0308 	add.w	r3, sl, #8
 80076de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	4650      	mov	r0, sl
 80076e4:	b017      	add	sp, #92	@ 0x5c
 80076e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	f77f ae3d 	ble.w	800736c <_dtoa_r+0x7c4>
 80076f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80076f6:	2001      	movs	r0, #1
 80076f8:	e65b      	b.n	80073b2 <_dtoa_r+0x80a>
 80076fa:	9b08      	ldr	r3, [sp, #32]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f77f aed6 	ble.w	80074ae <_dtoa_r+0x906>
 8007702:	4656      	mov	r6, sl
 8007704:	4621      	mov	r1, r4
 8007706:	4648      	mov	r0, r9
 8007708:	f7ff f9c5 	bl	8006a96 <quorem>
 800770c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	f806 8b01 	strb.w	r8, [r6], #1
 8007716:	eba6 020a 	sub.w	r2, r6, sl
 800771a:	4293      	cmp	r3, r2
 800771c:	ddb3      	ble.n	8007686 <_dtoa_r+0xade>
 800771e:	4649      	mov	r1, r9
 8007720:	2300      	movs	r3, #0
 8007722:	220a      	movs	r2, #10
 8007724:	4658      	mov	r0, fp
 8007726:	f000 f967 	bl	80079f8 <__multadd>
 800772a:	4681      	mov	r9, r0
 800772c:	e7ea      	b.n	8007704 <_dtoa_r+0xb5c>
 800772e:	bf00      	nop
 8007730:	08008d32 	.word	0x08008d32
 8007734:	08008cb6 	.word	0x08008cb6

08007738 <_free_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4605      	mov	r5, r0
 800773c:	2900      	cmp	r1, #0
 800773e:	d040      	beq.n	80077c2 <_free_r+0x8a>
 8007740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007744:	1f0c      	subs	r4, r1, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	bfb8      	it	lt
 800774a:	18e4      	addlt	r4, r4, r3
 800774c:	f000 f8e6 	bl	800791c <__malloc_lock>
 8007750:	4a1c      	ldr	r2, [pc, #112]	@ (80077c4 <_free_r+0x8c>)
 8007752:	6813      	ldr	r3, [r2, #0]
 8007754:	b933      	cbnz	r3, 8007764 <_free_r+0x2c>
 8007756:	6063      	str	r3, [r4, #4]
 8007758:	6014      	str	r4, [r2, #0]
 800775a:	4628      	mov	r0, r5
 800775c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007760:	f000 b8e2 	b.w	8007928 <__malloc_unlock>
 8007764:	42a3      	cmp	r3, r4
 8007766:	d908      	bls.n	800777a <_free_r+0x42>
 8007768:	6820      	ldr	r0, [r4, #0]
 800776a:	1821      	adds	r1, r4, r0
 800776c:	428b      	cmp	r3, r1
 800776e:	bf01      	itttt	eq
 8007770:	6819      	ldreq	r1, [r3, #0]
 8007772:	685b      	ldreq	r3, [r3, #4]
 8007774:	1809      	addeq	r1, r1, r0
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	e7ed      	b.n	8007756 <_free_r+0x1e>
 800777a:	461a      	mov	r2, r3
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	b10b      	cbz	r3, 8007784 <_free_r+0x4c>
 8007780:	42a3      	cmp	r3, r4
 8007782:	d9fa      	bls.n	800777a <_free_r+0x42>
 8007784:	6811      	ldr	r1, [r2, #0]
 8007786:	1850      	adds	r0, r2, r1
 8007788:	42a0      	cmp	r0, r4
 800778a:	d10b      	bne.n	80077a4 <_free_r+0x6c>
 800778c:	6820      	ldr	r0, [r4, #0]
 800778e:	4401      	add	r1, r0
 8007790:	1850      	adds	r0, r2, r1
 8007792:	4283      	cmp	r3, r0
 8007794:	6011      	str	r1, [r2, #0]
 8007796:	d1e0      	bne.n	800775a <_free_r+0x22>
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4408      	add	r0, r1
 800779e:	6010      	str	r0, [r2, #0]
 80077a0:	6053      	str	r3, [r2, #4]
 80077a2:	e7da      	b.n	800775a <_free_r+0x22>
 80077a4:	d902      	bls.n	80077ac <_free_r+0x74>
 80077a6:	230c      	movs	r3, #12
 80077a8:	602b      	str	r3, [r5, #0]
 80077aa:	e7d6      	b.n	800775a <_free_r+0x22>
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	1821      	adds	r1, r4, r0
 80077b0:	428b      	cmp	r3, r1
 80077b2:	bf01      	itttt	eq
 80077b4:	6819      	ldreq	r1, [r3, #0]
 80077b6:	685b      	ldreq	r3, [r3, #4]
 80077b8:	1809      	addeq	r1, r1, r0
 80077ba:	6021      	streq	r1, [r4, #0]
 80077bc:	6063      	str	r3, [r4, #4]
 80077be:	6054      	str	r4, [r2, #4]
 80077c0:	e7cb      	b.n	800775a <_free_r+0x22>
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	20002164 	.word	0x20002164

080077c8 <malloc>:
 80077c8:	4b02      	ldr	r3, [pc, #8]	@ (80077d4 <malloc+0xc>)
 80077ca:	4601      	mov	r1, r0
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	f000 b825 	b.w	800781c <_malloc_r>
 80077d2:	bf00      	nop
 80077d4:	2000005c 	.word	0x2000005c

080077d8 <sbrk_aligned>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	4e0f      	ldr	r6, [pc, #60]	@ (8007818 <sbrk_aligned+0x40>)
 80077dc:	460c      	mov	r4, r1
 80077de:	6831      	ldr	r1, [r6, #0]
 80077e0:	4605      	mov	r5, r0
 80077e2:	b911      	cbnz	r1, 80077ea <sbrk_aligned+0x12>
 80077e4:	f000 fe40 	bl	8008468 <_sbrk_r>
 80077e8:	6030      	str	r0, [r6, #0]
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f000 fe3b 	bl	8008468 <_sbrk_r>
 80077f2:	1c43      	adds	r3, r0, #1
 80077f4:	d103      	bne.n	80077fe <sbrk_aligned+0x26>
 80077f6:	f04f 34ff 	mov.w	r4, #4294967295
 80077fa:	4620      	mov	r0, r4
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	1cc4      	adds	r4, r0, #3
 8007800:	f024 0403 	bic.w	r4, r4, #3
 8007804:	42a0      	cmp	r0, r4
 8007806:	d0f8      	beq.n	80077fa <sbrk_aligned+0x22>
 8007808:	1a21      	subs	r1, r4, r0
 800780a:	4628      	mov	r0, r5
 800780c:	f000 fe2c 	bl	8008468 <_sbrk_r>
 8007810:	3001      	adds	r0, #1
 8007812:	d1f2      	bne.n	80077fa <sbrk_aligned+0x22>
 8007814:	e7ef      	b.n	80077f6 <sbrk_aligned+0x1e>
 8007816:	bf00      	nop
 8007818:	20002160 	.word	0x20002160

0800781c <_malloc_r>:
 800781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007820:	1ccd      	adds	r5, r1, #3
 8007822:	f025 0503 	bic.w	r5, r5, #3
 8007826:	3508      	adds	r5, #8
 8007828:	2d0c      	cmp	r5, #12
 800782a:	bf38      	it	cc
 800782c:	250c      	movcc	r5, #12
 800782e:	2d00      	cmp	r5, #0
 8007830:	4606      	mov	r6, r0
 8007832:	db01      	blt.n	8007838 <_malloc_r+0x1c>
 8007834:	42a9      	cmp	r1, r5
 8007836:	d904      	bls.n	8007842 <_malloc_r+0x26>
 8007838:	230c      	movs	r3, #12
 800783a:	6033      	str	r3, [r6, #0]
 800783c:	2000      	movs	r0, #0
 800783e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007918 <_malloc_r+0xfc>
 8007846:	f000 f869 	bl	800791c <__malloc_lock>
 800784a:	f8d8 3000 	ldr.w	r3, [r8]
 800784e:	461c      	mov	r4, r3
 8007850:	bb44      	cbnz	r4, 80078a4 <_malloc_r+0x88>
 8007852:	4629      	mov	r1, r5
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff ffbf 	bl	80077d8 <sbrk_aligned>
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	4604      	mov	r4, r0
 800785e:	d158      	bne.n	8007912 <_malloc_r+0xf6>
 8007860:	f8d8 4000 	ldr.w	r4, [r8]
 8007864:	4627      	mov	r7, r4
 8007866:	2f00      	cmp	r7, #0
 8007868:	d143      	bne.n	80078f2 <_malloc_r+0xd6>
 800786a:	2c00      	cmp	r4, #0
 800786c:	d04b      	beq.n	8007906 <_malloc_r+0xea>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	4639      	mov	r1, r7
 8007872:	4630      	mov	r0, r6
 8007874:	eb04 0903 	add.w	r9, r4, r3
 8007878:	f000 fdf6 	bl	8008468 <_sbrk_r>
 800787c:	4581      	cmp	r9, r0
 800787e:	d142      	bne.n	8007906 <_malloc_r+0xea>
 8007880:	6821      	ldr	r1, [r4, #0]
 8007882:	4630      	mov	r0, r6
 8007884:	1a6d      	subs	r5, r5, r1
 8007886:	4629      	mov	r1, r5
 8007888:	f7ff ffa6 	bl	80077d8 <sbrk_aligned>
 800788c:	3001      	adds	r0, #1
 800788e:	d03a      	beq.n	8007906 <_malloc_r+0xea>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	442b      	add	r3, r5
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	f8d8 3000 	ldr.w	r3, [r8]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	bb62      	cbnz	r2, 80078f8 <_malloc_r+0xdc>
 800789e:	f8c8 7000 	str.w	r7, [r8]
 80078a2:	e00f      	b.n	80078c4 <_malloc_r+0xa8>
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	1b52      	subs	r2, r2, r5
 80078a8:	d420      	bmi.n	80078ec <_malloc_r+0xd0>
 80078aa:	2a0b      	cmp	r2, #11
 80078ac:	d917      	bls.n	80078de <_malloc_r+0xc2>
 80078ae:	1961      	adds	r1, r4, r5
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	6025      	str	r5, [r4, #0]
 80078b4:	bf18      	it	ne
 80078b6:	6059      	strne	r1, [r3, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	bf08      	it	eq
 80078bc:	f8c8 1000 	streq.w	r1, [r8]
 80078c0:	5162      	str	r2, [r4, r5]
 80078c2:	604b      	str	r3, [r1, #4]
 80078c4:	4630      	mov	r0, r6
 80078c6:	f000 f82f 	bl	8007928 <__malloc_unlock>
 80078ca:	f104 000b 	add.w	r0, r4, #11
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	f020 0007 	bic.w	r0, r0, #7
 80078d4:	1ac2      	subs	r2, r0, r3
 80078d6:	bf1c      	itt	ne
 80078d8:	1a1b      	subne	r3, r3, r0
 80078da:	50a3      	strne	r3, [r4, r2]
 80078dc:	e7af      	b.n	800783e <_malloc_r+0x22>
 80078de:	6862      	ldr	r2, [r4, #4]
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	bf0c      	ite	eq
 80078e4:	f8c8 2000 	streq.w	r2, [r8]
 80078e8:	605a      	strne	r2, [r3, #4]
 80078ea:	e7eb      	b.n	80078c4 <_malloc_r+0xa8>
 80078ec:	4623      	mov	r3, r4
 80078ee:	6864      	ldr	r4, [r4, #4]
 80078f0:	e7ae      	b.n	8007850 <_malloc_r+0x34>
 80078f2:	463c      	mov	r4, r7
 80078f4:	687f      	ldr	r7, [r7, #4]
 80078f6:	e7b6      	b.n	8007866 <_malloc_r+0x4a>
 80078f8:	461a      	mov	r2, r3
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d1fb      	bne.n	80078f8 <_malloc_r+0xdc>
 8007900:	2300      	movs	r3, #0
 8007902:	6053      	str	r3, [r2, #4]
 8007904:	e7de      	b.n	80078c4 <_malloc_r+0xa8>
 8007906:	230c      	movs	r3, #12
 8007908:	4630      	mov	r0, r6
 800790a:	6033      	str	r3, [r6, #0]
 800790c:	f000 f80c 	bl	8007928 <__malloc_unlock>
 8007910:	e794      	b.n	800783c <_malloc_r+0x20>
 8007912:	6005      	str	r5, [r0, #0]
 8007914:	e7d6      	b.n	80078c4 <_malloc_r+0xa8>
 8007916:	bf00      	nop
 8007918:	20002164 	.word	0x20002164

0800791c <__malloc_lock>:
 800791c:	4801      	ldr	r0, [pc, #4]	@ (8007924 <__malloc_lock+0x8>)
 800791e:	f7ff b89c 	b.w	8006a5a <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	2000215c 	.word	0x2000215c

08007928 <__malloc_unlock>:
 8007928:	4801      	ldr	r0, [pc, #4]	@ (8007930 <__malloc_unlock+0x8>)
 800792a:	f7ff b897 	b.w	8006a5c <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	2000215c 	.word	0x2000215c

08007934 <_Balloc>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	69c6      	ldr	r6, [r0, #28]
 8007938:	4604      	mov	r4, r0
 800793a:	460d      	mov	r5, r1
 800793c:	b976      	cbnz	r6, 800795c <_Balloc+0x28>
 800793e:	2010      	movs	r0, #16
 8007940:	f7ff ff42 	bl	80077c8 <malloc>
 8007944:	4602      	mov	r2, r0
 8007946:	61e0      	str	r0, [r4, #28]
 8007948:	b920      	cbnz	r0, 8007954 <_Balloc+0x20>
 800794a:	216b      	movs	r1, #107	@ 0x6b
 800794c:	4b17      	ldr	r3, [pc, #92]	@ (80079ac <_Balloc+0x78>)
 800794e:	4818      	ldr	r0, [pc, #96]	@ (80079b0 <_Balloc+0x7c>)
 8007950:	f000 fd9a 	bl	8008488 <__assert_func>
 8007954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007958:	6006      	str	r6, [r0, #0]
 800795a:	60c6      	str	r6, [r0, #12]
 800795c:	69e6      	ldr	r6, [r4, #28]
 800795e:	68f3      	ldr	r3, [r6, #12]
 8007960:	b183      	cbz	r3, 8007984 <_Balloc+0x50>
 8007962:	69e3      	ldr	r3, [r4, #28]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800796a:	b9b8      	cbnz	r0, 800799c <_Balloc+0x68>
 800796c:	2101      	movs	r1, #1
 800796e:	fa01 f605 	lsl.w	r6, r1, r5
 8007972:	1d72      	adds	r2, r6, #5
 8007974:	4620      	mov	r0, r4
 8007976:	0092      	lsls	r2, r2, #2
 8007978:	f000 fda4 	bl	80084c4 <_calloc_r>
 800797c:	b160      	cbz	r0, 8007998 <_Balloc+0x64>
 800797e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007982:	e00e      	b.n	80079a2 <_Balloc+0x6e>
 8007984:	2221      	movs	r2, #33	@ 0x21
 8007986:	2104      	movs	r1, #4
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fd9b 	bl	80084c4 <_calloc_r>
 800798e:	69e3      	ldr	r3, [r4, #28]
 8007990:	60f0      	str	r0, [r6, #12]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e4      	bne.n	8007962 <_Balloc+0x2e>
 8007998:	2000      	movs	r0, #0
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	6802      	ldr	r2, [r0, #0]
 800799e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079a2:	2300      	movs	r3, #0
 80079a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079a8:	e7f7      	b.n	800799a <_Balloc+0x66>
 80079aa:	bf00      	nop
 80079ac:	08008cc3 	.word	0x08008cc3
 80079b0:	08008d43 	.word	0x08008d43

080079b4 <_Bfree>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	69c6      	ldr	r6, [r0, #28]
 80079b8:	4605      	mov	r5, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	b976      	cbnz	r6, 80079dc <_Bfree+0x28>
 80079be:	2010      	movs	r0, #16
 80079c0:	f7ff ff02 	bl	80077c8 <malloc>
 80079c4:	4602      	mov	r2, r0
 80079c6:	61e8      	str	r0, [r5, #28]
 80079c8:	b920      	cbnz	r0, 80079d4 <_Bfree+0x20>
 80079ca:	218f      	movs	r1, #143	@ 0x8f
 80079cc:	4b08      	ldr	r3, [pc, #32]	@ (80079f0 <_Bfree+0x3c>)
 80079ce:	4809      	ldr	r0, [pc, #36]	@ (80079f4 <_Bfree+0x40>)
 80079d0:	f000 fd5a 	bl	8008488 <__assert_func>
 80079d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079d8:	6006      	str	r6, [r0, #0]
 80079da:	60c6      	str	r6, [r0, #12]
 80079dc:	b13c      	cbz	r4, 80079ee <_Bfree+0x3a>
 80079de:	69eb      	ldr	r3, [r5, #28]
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079e8:	6021      	str	r1, [r4, #0]
 80079ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	08008cc3 	.word	0x08008cc3
 80079f4:	08008d43 	.word	0x08008d43

080079f8 <__multadd>:
 80079f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	4607      	mov	r7, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	461e      	mov	r6, r3
 8007a02:	2000      	movs	r0, #0
 8007a04:	690d      	ldr	r5, [r1, #16]
 8007a06:	f101 0c14 	add.w	ip, r1, #20
 8007a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a0e:	3001      	adds	r0, #1
 8007a10:	b299      	uxth	r1, r3
 8007a12:	fb02 6101 	mla	r1, r2, r1, r6
 8007a16:	0c1e      	lsrs	r6, r3, #16
 8007a18:	0c0b      	lsrs	r3, r1, #16
 8007a1a:	fb02 3306 	mla	r3, r2, r6, r3
 8007a1e:	b289      	uxth	r1, r1
 8007a20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a24:	4285      	cmp	r5, r0
 8007a26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a2e:	dcec      	bgt.n	8007a0a <__multadd+0x12>
 8007a30:	b30e      	cbz	r6, 8007a76 <__multadd+0x7e>
 8007a32:	68a3      	ldr	r3, [r4, #8]
 8007a34:	42ab      	cmp	r3, r5
 8007a36:	dc19      	bgt.n	8007a6c <__multadd+0x74>
 8007a38:	6861      	ldr	r1, [r4, #4]
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	3101      	adds	r1, #1
 8007a3e:	f7ff ff79 	bl	8007934 <_Balloc>
 8007a42:	4680      	mov	r8, r0
 8007a44:	b928      	cbnz	r0, 8007a52 <__multadd+0x5a>
 8007a46:	4602      	mov	r2, r0
 8007a48:	21ba      	movs	r1, #186	@ 0xba
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a7c <__multadd+0x84>)
 8007a4c:	480c      	ldr	r0, [pc, #48]	@ (8007a80 <__multadd+0x88>)
 8007a4e:	f000 fd1b 	bl	8008488 <__assert_func>
 8007a52:	6922      	ldr	r2, [r4, #16]
 8007a54:	f104 010c 	add.w	r1, r4, #12
 8007a58:	3202      	adds	r2, #2
 8007a5a:	0092      	lsls	r2, r2, #2
 8007a5c:	300c      	adds	r0, #12
 8007a5e:	f7ff f80c 	bl	8006a7a <memcpy>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff ffa5 	bl	80079b4 <_Bfree>
 8007a6a:	4644      	mov	r4, r8
 8007a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a70:	3501      	adds	r5, #1
 8007a72:	615e      	str	r6, [r3, #20]
 8007a74:	6125      	str	r5, [r4, #16]
 8007a76:	4620      	mov	r0, r4
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7c:	08008d32 	.word	0x08008d32
 8007a80:	08008d43 	.word	0x08008d43

08007a84 <__hi0bits>:
 8007a84:	4603      	mov	r3, r0
 8007a86:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a8a:	bf3a      	itte	cc
 8007a8c:	0403      	lslcc	r3, r0, #16
 8007a8e:	2010      	movcc	r0, #16
 8007a90:	2000      	movcs	r0, #0
 8007a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a96:	bf3c      	itt	cc
 8007a98:	021b      	lslcc	r3, r3, #8
 8007a9a:	3008      	addcc	r0, #8
 8007a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aa0:	bf3c      	itt	cc
 8007aa2:	011b      	lslcc	r3, r3, #4
 8007aa4:	3004      	addcc	r0, #4
 8007aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aaa:	bf3c      	itt	cc
 8007aac:	009b      	lslcc	r3, r3, #2
 8007aae:	3002      	addcc	r0, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db05      	blt.n	8007ac0 <__hi0bits+0x3c>
 8007ab4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ab8:	f100 0001 	add.w	r0, r0, #1
 8007abc:	bf08      	it	eq
 8007abe:	2020      	moveq	r0, #32
 8007ac0:	4770      	bx	lr

08007ac2 <__lo0bits>:
 8007ac2:	6803      	ldr	r3, [r0, #0]
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	f013 0007 	ands.w	r0, r3, #7
 8007aca:	d00b      	beq.n	8007ae4 <__lo0bits+0x22>
 8007acc:	07d9      	lsls	r1, r3, #31
 8007ace:	d421      	bmi.n	8007b14 <__lo0bits+0x52>
 8007ad0:	0798      	lsls	r0, r3, #30
 8007ad2:	bf49      	itett	mi
 8007ad4:	085b      	lsrmi	r3, r3, #1
 8007ad6:	089b      	lsrpl	r3, r3, #2
 8007ad8:	2001      	movmi	r0, #1
 8007ada:	6013      	strmi	r3, [r2, #0]
 8007adc:	bf5c      	itt	pl
 8007ade:	2002      	movpl	r0, #2
 8007ae0:	6013      	strpl	r3, [r2, #0]
 8007ae2:	4770      	bx	lr
 8007ae4:	b299      	uxth	r1, r3
 8007ae6:	b909      	cbnz	r1, 8007aec <__lo0bits+0x2a>
 8007ae8:	2010      	movs	r0, #16
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	b2d9      	uxtb	r1, r3
 8007aee:	b909      	cbnz	r1, 8007af4 <__lo0bits+0x32>
 8007af0:	3008      	adds	r0, #8
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	0719      	lsls	r1, r3, #28
 8007af6:	bf04      	itt	eq
 8007af8:	091b      	lsreq	r3, r3, #4
 8007afa:	3004      	addeq	r0, #4
 8007afc:	0799      	lsls	r1, r3, #30
 8007afe:	bf04      	itt	eq
 8007b00:	089b      	lsreq	r3, r3, #2
 8007b02:	3002      	addeq	r0, #2
 8007b04:	07d9      	lsls	r1, r3, #31
 8007b06:	d403      	bmi.n	8007b10 <__lo0bits+0x4e>
 8007b08:	085b      	lsrs	r3, r3, #1
 8007b0a:	f100 0001 	add.w	r0, r0, #1
 8007b0e:	d003      	beq.n	8007b18 <__lo0bits+0x56>
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	4770      	bx	lr
 8007b14:	2000      	movs	r0, #0
 8007b16:	4770      	bx	lr
 8007b18:	2020      	movs	r0, #32
 8007b1a:	4770      	bx	lr

08007b1c <__i2b>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	460c      	mov	r4, r1
 8007b20:	2101      	movs	r1, #1
 8007b22:	f7ff ff07 	bl	8007934 <_Balloc>
 8007b26:	4602      	mov	r2, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <__i2b+0x1a>
 8007b2a:	f240 1145 	movw	r1, #325	@ 0x145
 8007b2e:	4b04      	ldr	r3, [pc, #16]	@ (8007b40 <__i2b+0x24>)
 8007b30:	4804      	ldr	r0, [pc, #16]	@ (8007b44 <__i2b+0x28>)
 8007b32:	f000 fca9 	bl	8008488 <__assert_func>
 8007b36:	2301      	movs	r3, #1
 8007b38:	6144      	str	r4, [r0, #20]
 8007b3a:	6103      	str	r3, [r0, #16]
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	bf00      	nop
 8007b40:	08008d32 	.word	0x08008d32
 8007b44:	08008d43 	.word	0x08008d43

08007b48 <__multiply>:
 8007b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4c:	4614      	mov	r4, r2
 8007b4e:	690a      	ldr	r2, [r1, #16]
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	460f      	mov	r7, r1
 8007b54:	429a      	cmp	r2, r3
 8007b56:	bfa2      	ittt	ge
 8007b58:	4623      	movge	r3, r4
 8007b5a:	460c      	movge	r4, r1
 8007b5c:	461f      	movge	r7, r3
 8007b5e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b62:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	6861      	ldr	r1, [r4, #4]
 8007b6a:	eb0a 0609 	add.w	r6, sl, r9
 8007b6e:	42b3      	cmp	r3, r6
 8007b70:	b085      	sub	sp, #20
 8007b72:	bfb8      	it	lt
 8007b74:	3101      	addlt	r1, #1
 8007b76:	f7ff fedd 	bl	8007934 <_Balloc>
 8007b7a:	b930      	cbnz	r0, 8007b8a <__multiply+0x42>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b82:	4b43      	ldr	r3, [pc, #268]	@ (8007c90 <__multiply+0x148>)
 8007b84:	4843      	ldr	r0, [pc, #268]	@ (8007c94 <__multiply+0x14c>)
 8007b86:	f000 fc7f 	bl	8008488 <__assert_func>
 8007b8a:	f100 0514 	add.w	r5, r0, #20
 8007b8e:	462b      	mov	r3, r5
 8007b90:	2200      	movs	r2, #0
 8007b92:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b96:	4543      	cmp	r3, r8
 8007b98:	d321      	bcc.n	8007bde <__multiply+0x96>
 8007b9a:	f107 0114 	add.w	r1, r7, #20
 8007b9e:	f104 0214 	add.w	r2, r4, #20
 8007ba2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ba6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007baa:	9302      	str	r3, [sp, #8]
 8007bac:	1b13      	subs	r3, r2, r4
 8007bae:	3b15      	subs	r3, #21
 8007bb0:	f023 0303 	bic.w	r3, r3, #3
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	f104 0715 	add.w	r7, r4, #21
 8007bba:	42ba      	cmp	r2, r7
 8007bbc:	bf38      	it	cc
 8007bbe:	2304      	movcc	r3, #4
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	9103      	str	r1, [sp, #12]
 8007bc6:	428b      	cmp	r3, r1
 8007bc8:	d80c      	bhi.n	8007be4 <__multiply+0x9c>
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	dd03      	ble.n	8007bd6 <__multiply+0x8e>
 8007bce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d05a      	beq.n	8007c8c <__multiply+0x144>
 8007bd6:	6106      	str	r6, [r0, #16]
 8007bd8:	b005      	add	sp, #20
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	f843 2b04 	str.w	r2, [r3], #4
 8007be2:	e7d8      	b.n	8007b96 <__multiply+0x4e>
 8007be4:	f8b1 a000 	ldrh.w	sl, [r1]
 8007be8:	f1ba 0f00 	cmp.w	sl, #0
 8007bec:	d023      	beq.n	8007c36 <__multiply+0xee>
 8007bee:	46a9      	mov	r9, r5
 8007bf0:	f04f 0c00 	mov.w	ip, #0
 8007bf4:	f104 0e14 	add.w	lr, r4, #20
 8007bf8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bfc:	f8d9 3000 	ldr.w	r3, [r9]
 8007c00:	fa1f fb87 	uxth.w	fp, r7
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c0a:	4463      	add	r3, ip
 8007c0c:	f8d9 c000 	ldr.w	ip, [r9]
 8007c10:	0c3f      	lsrs	r7, r7, #16
 8007c12:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007c16:	fb0a c707 	mla	r7, sl, r7, ip
 8007c1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c24:	4572      	cmp	r2, lr
 8007c26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c2a:	f849 3b04 	str.w	r3, [r9], #4
 8007c2e:	d8e3      	bhi.n	8007bf8 <__multiply+0xb0>
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	f845 c003 	str.w	ip, [r5, r3]
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	3104      	adds	r1, #4
 8007c3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c3e:	f1b9 0f00 	cmp.w	r9, #0
 8007c42:	d021      	beq.n	8007c88 <__multiply+0x140>
 8007c44:	46ae      	mov	lr, r5
 8007c46:	f04f 0a00 	mov.w	sl, #0
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	f104 0c14 	add.w	ip, r4, #20
 8007c50:	f8bc b000 	ldrh.w	fp, [ip]
 8007c54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	fb09 770b 	mla	r7, r9, fp, r7
 8007c5e:	4457      	add	r7, sl
 8007c60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c64:	f84e 3b04 	str.w	r3, [lr], #4
 8007c68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c70:	f8be 3000 	ldrh.w	r3, [lr]
 8007c74:	4562      	cmp	r2, ip
 8007c76:	fb09 330a 	mla	r3, r9, sl, r3
 8007c7a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c82:	d8e5      	bhi.n	8007c50 <__multiply+0x108>
 8007c84:	9f01      	ldr	r7, [sp, #4]
 8007c86:	51eb      	str	r3, [r5, r7]
 8007c88:	3504      	adds	r5, #4
 8007c8a:	e79a      	b.n	8007bc2 <__multiply+0x7a>
 8007c8c:	3e01      	subs	r6, #1
 8007c8e:	e79c      	b.n	8007bca <__multiply+0x82>
 8007c90:	08008d32 	.word	0x08008d32
 8007c94:	08008d43 	.word	0x08008d43

08007c98 <__pow5mult>:
 8007c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c9c:	4615      	mov	r5, r2
 8007c9e:	f012 0203 	ands.w	r2, r2, #3
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	460e      	mov	r6, r1
 8007ca6:	d007      	beq.n	8007cb8 <__pow5mult+0x20>
 8007ca8:	4c25      	ldr	r4, [pc, #148]	@ (8007d40 <__pow5mult+0xa8>)
 8007caa:	3a01      	subs	r2, #1
 8007cac:	2300      	movs	r3, #0
 8007cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cb2:	f7ff fea1 	bl	80079f8 <__multadd>
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	10ad      	asrs	r5, r5, #2
 8007cba:	d03d      	beq.n	8007d38 <__pow5mult+0xa0>
 8007cbc:	69fc      	ldr	r4, [r7, #28]
 8007cbe:	b97c      	cbnz	r4, 8007ce0 <__pow5mult+0x48>
 8007cc0:	2010      	movs	r0, #16
 8007cc2:	f7ff fd81 	bl	80077c8 <malloc>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	61f8      	str	r0, [r7, #28]
 8007cca:	b928      	cbnz	r0, 8007cd8 <__pow5mult+0x40>
 8007ccc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d44 <__pow5mult+0xac>)
 8007cd2:	481d      	ldr	r0, [pc, #116]	@ (8007d48 <__pow5mult+0xb0>)
 8007cd4:	f000 fbd8 	bl	8008488 <__assert_func>
 8007cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cdc:	6004      	str	r4, [r0, #0]
 8007cde:	60c4      	str	r4, [r0, #12]
 8007ce0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ce8:	b94c      	cbnz	r4, 8007cfe <__pow5mult+0x66>
 8007cea:	f240 2171 	movw	r1, #625	@ 0x271
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f7ff ff14 	bl	8007b1c <__i2b>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cfc:	6003      	str	r3, [r0, #0]
 8007cfe:	f04f 0900 	mov.w	r9, #0
 8007d02:	07eb      	lsls	r3, r5, #31
 8007d04:	d50a      	bpl.n	8007d1c <__pow5mult+0x84>
 8007d06:	4631      	mov	r1, r6
 8007d08:	4622      	mov	r2, r4
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f7ff ff1c 	bl	8007b48 <__multiply>
 8007d10:	4680      	mov	r8, r0
 8007d12:	4631      	mov	r1, r6
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff fe4d 	bl	80079b4 <_Bfree>
 8007d1a:	4646      	mov	r6, r8
 8007d1c:	106d      	asrs	r5, r5, #1
 8007d1e:	d00b      	beq.n	8007d38 <__pow5mult+0xa0>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	b938      	cbnz	r0, 8007d34 <__pow5mult+0x9c>
 8007d24:	4622      	mov	r2, r4
 8007d26:	4621      	mov	r1, r4
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f7ff ff0d 	bl	8007b48 <__multiply>
 8007d2e:	6020      	str	r0, [r4, #0]
 8007d30:	f8c0 9000 	str.w	r9, [r0]
 8007d34:	4604      	mov	r4, r0
 8007d36:	e7e4      	b.n	8007d02 <__pow5mult+0x6a>
 8007d38:	4630      	mov	r0, r6
 8007d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d3e:	bf00      	nop
 8007d40:	08008d9c 	.word	0x08008d9c
 8007d44:	08008cc3 	.word	0x08008cc3
 8007d48:	08008d43 	.word	0x08008d43

08007d4c <__lshift>:
 8007d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	460c      	mov	r4, r1
 8007d52:	4607      	mov	r7, r0
 8007d54:	4691      	mov	r9, r2
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	6849      	ldr	r1, [r1, #4]
 8007d5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d64:	f108 0601 	add.w	r6, r8, #1
 8007d68:	42b3      	cmp	r3, r6
 8007d6a:	db0b      	blt.n	8007d84 <__lshift+0x38>
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7ff fde1 	bl	8007934 <_Balloc>
 8007d72:	4605      	mov	r5, r0
 8007d74:	b948      	cbnz	r0, 8007d8a <__lshift+0x3e>
 8007d76:	4602      	mov	r2, r0
 8007d78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d7c:	4b27      	ldr	r3, [pc, #156]	@ (8007e1c <__lshift+0xd0>)
 8007d7e:	4828      	ldr	r0, [pc, #160]	@ (8007e20 <__lshift+0xd4>)
 8007d80:	f000 fb82 	bl	8008488 <__assert_func>
 8007d84:	3101      	adds	r1, #1
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	e7ee      	b.n	8007d68 <__lshift+0x1c>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f100 0114 	add.w	r1, r0, #20
 8007d90:	f100 0210 	add.w	r2, r0, #16
 8007d94:	4618      	mov	r0, r3
 8007d96:	4553      	cmp	r3, sl
 8007d98:	db33      	blt.n	8007e02 <__lshift+0xb6>
 8007d9a:	6920      	ldr	r0, [r4, #16]
 8007d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007da0:	f104 0314 	add.w	r3, r4, #20
 8007da4:	f019 091f 	ands.w	r9, r9, #31
 8007da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007db0:	d02b      	beq.n	8007e0a <__lshift+0xbe>
 8007db2:	468a      	mov	sl, r1
 8007db4:	2200      	movs	r2, #0
 8007db6:	f1c9 0e20 	rsb	lr, r9, #32
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	fa00 f009 	lsl.w	r0, r0, r9
 8007dc0:	4310      	orrs	r0, r2
 8007dc2:	f84a 0b04 	str.w	r0, [sl], #4
 8007dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dca:	459c      	cmp	ip, r3
 8007dcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dd0:	d8f3      	bhi.n	8007dba <__lshift+0x6e>
 8007dd2:	ebac 0304 	sub.w	r3, ip, r4
 8007dd6:	3b15      	subs	r3, #21
 8007dd8:	f023 0303 	bic.w	r3, r3, #3
 8007ddc:	3304      	adds	r3, #4
 8007dde:	f104 0015 	add.w	r0, r4, #21
 8007de2:	4584      	cmp	ip, r0
 8007de4:	bf38      	it	cc
 8007de6:	2304      	movcc	r3, #4
 8007de8:	50ca      	str	r2, [r1, r3]
 8007dea:	b10a      	cbz	r2, 8007df0 <__lshift+0xa4>
 8007dec:	f108 0602 	add.w	r6, r8, #2
 8007df0:	3e01      	subs	r6, #1
 8007df2:	4638      	mov	r0, r7
 8007df4:	4621      	mov	r1, r4
 8007df6:	612e      	str	r6, [r5, #16]
 8007df8:	f7ff fddc 	bl	80079b4 <_Bfree>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e06:	3301      	adds	r3, #1
 8007e08:	e7c5      	b.n	8007d96 <__lshift+0x4a>
 8007e0a:	3904      	subs	r1, #4
 8007e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e10:	459c      	cmp	ip, r3
 8007e12:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e16:	d8f9      	bhi.n	8007e0c <__lshift+0xc0>
 8007e18:	e7ea      	b.n	8007df0 <__lshift+0xa4>
 8007e1a:	bf00      	nop
 8007e1c:	08008d32 	.word	0x08008d32
 8007e20:	08008d43 	.word	0x08008d43

08007e24 <__mcmp>:
 8007e24:	4603      	mov	r3, r0
 8007e26:	690a      	ldr	r2, [r1, #16]
 8007e28:	6900      	ldr	r0, [r0, #16]
 8007e2a:	b530      	push	{r4, r5, lr}
 8007e2c:	1a80      	subs	r0, r0, r2
 8007e2e:	d10e      	bne.n	8007e4e <__mcmp+0x2a>
 8007e30:	3314      	adds	r3, #20
 8007e32:	3114      	adds	r1, #20
 8007e34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e44:	4295      	cmp	r5, r2
 8007e46:	d003      	beq.n	8007e50 <__mcmp+0x2c>
 8007e48:	d205      	bcs.n	8007e56 <__mcmp+0x32>
 8007e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4e:	bd30      	pop	{r4, r5, pc}
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d3f3      	bcc.n	8007e3c <__mcmp+0x18>
 8007e54:	e7fb      	b.n	8007e4e <__mcmp+0x2a>
 8007e56:	2001      	movs	r0, #1
 8007e58:	e7f9      	b.n	8007e4e <__mcmp+0x2a>
	...

08007e5c <__mdiff>:
 8007e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	4689      	mov	r9, r1
 8007e62:	4606      	mov	r6, r0
 8007e64:	4611      	mov	r1, r2
 8007e66:	4648      	mov	r0, r9
 8007e68:	4614      	mov	r4, r2
 8007e6a:	f7ff ffdb 	bl	8007e24 <__mcmp>
 8007e6e:	1e05      	subs	r5, r0, #0
 8007e70:	d112      	bne.n	8007e98 <__mdiff+0x3c>
 8007e72:	4629      	mov	r1, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	f7ff fd5d 	bl	8007934 <_Balloc>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	b928      	cbnz	r0, 8007e8a <__mdiff+0x2e>
 8007e7e:	f240 2137 	movw	r1, #567	@ 0x237
 8007e82:	4b3e      	ldr	r3, [pc, #248]	@ (8007f7c <__mdiff+0x120>)
 8007e84:	483e      	ldr	r0, [pc, #248]	@ (8007f80 <__mdiff+0x124>)
 8007e86:	f000 faff 	bl	8008488 <__assert_func>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e90:	4610      	mov	r0, r2
 8007e92:	b003      	add	sp, #12
 8007e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e98:	bfbc      	itt	lt
 8007e9a:	464b      	movlt	r3, r9
 8007e9c:	46a1      	movlt	r9, r4
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ea4:	bfba      	itte	lt
 8007ea6:	461c      	movlt	r4, r3
 8007ea8:	2501      	movlt	r5, #1
 8007eaa:	2500      	movge	r5, #0
 8007eac:	f7ff fd42 	bl	8007934 <_Balloc>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	b918      	cbnz	r0, 8007ebc <__mdiff+0x60>
 8007eb4:	f240 2145 	movw	r1, #581	@ 0x245
 8007eb8:	4b30      	ldr	r3, [pc, #192]	@ (8007f7c <__mdiff+0x120>)
 8007eba:	e7e3      	b.n	8007e84 <__mdiff+0x28>
 8007ebc:	f100 0b14 	add.w	fp, r0, #20
 8007ec0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ec4:	f109 0310 	add.w	r3, r9, #16
 8007ec8:	60c5      	str	r5, [r0, #12]
 8007eca:	f04f 0c00 	mov.w	ip, #0
 8007ece:	f109 0514 	add.w	r5, r9, #20
 8007ed2:	46d9      	mov	r9, fp
 8007ed4:	6926      	ldr	r6, [r4, #16]
 8007ed6:	f104 0e14 	add.w	lr, r4, #20
 8007eda:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ede:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007eea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007eee:	b281      	uxth	r1, r0
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	fa1f f38a 	uxth.w	r3, sl
 8007ef6:	1a5b      	subs	r3, r3, r1
 8007ef8:	0c00      	lsrs	r0, r0, #16
 8007efa:	4463      	add	r3, ip
 8007efc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f00:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f0a:	4576      	cmp	r6, lr
 8007f0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f10:	f849 3b04 	str.w	r3, [r9], #4
 8007f14:	d8e6      	bhi.n	8007ee4 <__mdiff+0x88>
 8007f16:	1b33      	subs	r3, r6, r4
 8007f18:	3b15      	subs	r3, #21
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	3415      	adds	r4, #21
 8007f20:	3304      	adds	r3, #4
 8007f22:	42a6      	cmp	r6, r4
 8007f24:	bf38      	it	cc
 8007f26:	2304      	movcc	r3, #4
 8007f28:	441d      	add	r5, r3
 8007f2a:	445b      	add	r3, fp
 8007f2c:	461e      	mov	r6, r3
 8007f2e:	462c      	mov	r4, r5
 8007f30:	4544      	cmp	r4, r8
 8007f32:	d30e      	bcc.n	8007f52 <__mdiff+0xf6>
 8007f34:	f108 0103 	add.w	r1, r8, #3
 8007f38:	1b49      	subs	r1, r1, r5
 8007f3a:	f021 0103 	bic.w	r1, r1, #3
 8007f3e:	3d03      	subs	r5, #3
 8007f40:	45a8      	cmp	r8, r5
 8007f42:	bf38      	it	cc
 8007f44:	2100      	movcc	r1, #0
 8007f46:	440b      	add	r3, r1
 8007f48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f4c:	b199      	cbz	r1, 8007f76 <__mdiff+0x11a>
 8007f4e:	6117      	str	r7, [r2, #16]
 8007f50:	e79e      	b.n	8007e90 <__mdiff+0x34>
 8007f52:	46e6      	mov	lr, ip
 8007f54:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f58:	fa1f fc81 	uxth.w	ip, r1
 8007f5c:	44f4      	add	ip, lr
 8007f5e:	0c08      	lsrs	r0, r1, #16
 8007f60:	4471      	add	r1, lr
 8007f62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f66:	b289      	uxth	r1, r1
 8007f68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f70:	f846 1b04 	str.w	r1, [r6], #4
 8007f74:	e7dc      	b.n	8007f30 <__mdiff+0xd4>
 8007f76:	3f01      	subs	r7, #1
 8007f78:	e7e6      	b.n	8007f48 <__mdiff+0xec>
 8007f7a:	bf00      	nop
 8007f7c:	08008d32 	.word	0x08008d32
 8007f80:	08008d43 	.word	0x08008d43

08007f84 <__d2b>:
 8007f84:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007f88:	2101      	movs	r1, #1
 8007f8a:	4690      	mov	r8, r2
 8007f8c:	4699      	mov	r9, r3
 8007f8e:	9e08      	ldr	r6, [sp, #32]
 8007f90:	f7ff fcd0 	bl	8007934 <_Balloc>
 8007f94:	4604      	mov	r4, r0
 8007f96:	b930      	cbnz	r0, 8007fa6 <__d2b+0x22>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f9e:	4b23      	ldr	r3, [pc, #140]	@ (800802c <__d2b+0xa8>)
 8007fa0:	4823      	ldr	r0, [pc, #140]	@ (8008030 <__d2b+0xac>)
 8007fa2:	f000 fa71 	bl	8008488 <__assert_func>
 8007fa6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007faa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fae:	b10d      	cbz	r5, 8007fb4 <__d2b+0x30>
 8007fb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	f1b8 0300 	subs.w	r3, r8, #0
 8007fba:	d024      	beq.n	8008006 <__d2b+0x82>
 8007fbc:	4668      	mov	r0, sp
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	f7ff fd7f 	bl	8007ac2 <__lo0bits>
 8007fc4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fc8:	b1d8      	cbz	r0, 8008002 <__d2b+0x7e>
 8007fca:	f1c0 0320 	rsb	r3, r0, #32
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	40c2      	lsrs	r2, r0
 8007fd6:	6163      	str	r3, [r4, #20]
 8007fd8:	9201      	str	r2, [sp, #4]
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bf0c      	ite	eq
 8007fe0:	2201      	moveq	r2, #1
 8007fe2:	2202      	movne	r2, #2
 8007fe4:	61a3      	str	r3, [r4, #24]
 8007fe6:	6122      	str	r2, [r4, #16]
 8007fe8:	b1ad      	cbz	r5, 8008016 <__d2b+0x92>
 8007fea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fee:	4405      	add	r5, r0
 8007ff0:	6035      	str	r5, [r6, #0]
 8007ff2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff8:	6018      	str	r0, [r3, #0]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	b002      	add	sp, #8
 8007ffe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008002:	6161      	str	r1, [r4, #20]
 8008004:	e7e9      	b.n	8007fda <__d2b+0x56>
 8008006:	a801      	add	r0, sp, #4
 8008008:	f7ff fd5b 	bl	8007ac2 <__lo0bits>
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	6163      	str	r3, [r4, #20]
 8008012:	3020      	adds	r0, #32
 8008014:	e7e7      	b.n	8007fe6 <__d2b+0x62>
 8008016:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800801a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800801e:	6030      	str	r0, [r6, #0]
 8008020:	6918      	ldr	r0, [r3, #16]
 8008022:	f7ff fd2f 	bl	8007a84 <__hi0bits>
 8008026:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800802a:	e7e4      	b.n	8007ff6 <__d2b+0x72>
 800802c:	08008d32 	.word	0x08008d32
 8008030:	08008d43 	.word	0x08008d43

08008034 <__ssputs_r>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	461f      	mov	r7, r3
 800803a:	688e      	ldr	r6, [r1, #8]
 800803c:	4682      	mov	sl, r0
 800803e:	42be      	cmp	r6, r7
 8008040:	460c      	mov	r4, r1
 8008042:	4690      	mov	r8, r2
 8008044:	680b      	ldr	r3, [r1, #0]
 8008046:	d82d      	bhi.n	80080a4 <__ssputs_r+0x70>
 8008048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800804c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008050:	d026      	beq.n	80080a0 <__ssputs_r+0x6c>
 8008052:	6965      	ldr	r5, [r4, #20]
 8008054:	6909      	ldr	r1, [r1, #16]
 8008056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800805a:	eba3 0901 	sub.w	r9, r3, r1
 800805e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008062:	1c7b      	adds	r3, r7, #1
 8008064:	444b      	add	r3, r9
 8008066:	106d      	asrs	r5, r5, #1
 8008068:	429d      	cmp	r5, r3
 800806a:	bf38      	it	cc
 800806c:	461d      	movcc	r5, r3
 800806e:	0553      	lsls	r3, r2, #21
 8008070:	d527      	bpl.n	80080c2 <__ssputs_r+0x8e>
 8008072:	4629      	mov	r1, r5
 8008074:	f7ff fbd2 	bl	800781c <_malloc_r>
 8008078:	4606      	mov	r6, r0
 800807a:	b360      	cbz	r0, 80080d6 <__ssputs_r+0xa2>
 800807c:	464a      	mov	r2, r9
 800807e:	6921      	ldr	r1, [r4, #16]
 8008080:	f7fe fcfb 	bl	8006a7a <memcpy>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800808a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	6126      	str	r6, [r4, #16]
 8008092:	444e      	add	r6, r9
 8008094:	6026      	str	r6, [r4, #0]
 8008096:	463e      	mov	r6, r7
 8008098:	6165      	str	r5, [r4, #20]
 800809a:	eba5 0509 	sub.w	r5, r5, r9
 800809e:	60a5      	str	r5, [r4, #8]
 80080a0:	42be      	cmp	r6, r7
 80080a2:	d900      	bls.n	80080a6 <__ssputs_r+0x72>
 80080a4:	463e      	mov	r6, r7
 80080a6:	4632      	mov	r2, r6
 80080a8:	4641      	mov	r1, r8
 80080aa:	6820      	ldr	r0, [r4, #0]
 80080ac:	f000 f9c2 	bl	8008434 <memmove>
 80080b0:	2000      	movs	r0, #0
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	1b9b      	subs	r3, r3, r6
 80080b6:	60a3      	str	r3, [r4, #8]
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	4433      	add	r3, r6
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c2:	462a      	mov	r2, r5
 80080c4:	f000 fa24 	bl	8008510 <_realloc_r>
 80080c8:	4606      	mov	r6, r0
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d1e0      	bne.n	8008090 <__ssputs_r+0x5c>
 80080ce:	4650      	mov	r0, sl
 80080d0:	6921      	ldr	r1, [r4, #16]
 80080d2:	f7ff fb31 	bl	8007738 <_free_r>
 80080d6:	230c      	movs	r3, #12
 80080d8:	f8ca 3000 	str.w	r3, [sl]
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	e7e9      	b.n	80080be <__ssputs_r+0x8a>
	...

080080ec <_svfiprintf_r>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	4698      	mov	r8, r3
 80080f2:	898b      	ldrh	r3, [r1, #12]
 80080f4:	4607      	mov	r7, r0
 80080f6:	061b      	lsls	r3, r3, #24
 80080f8:	460d      	mov	r5, r1
 80080fa:	4614      	mov	r4, r2
 80080fc:	b09d      	sub	sp, #116	@ 0x74
 80080fe:	d510      	bpl.n	8008122 <_svfiprintf_r+0x36>
 8008100:	690b      	ldr	r3, [r1, #16]
 8008102:	b973      	cbnz	r3, 8008122 <_svfiprintf_r+0x36>
 8008104:	2140      	movs	r1, #64	@ 0x40
 8008106:	f7ff fb89 	bl	800781c <_malloc_r>
 800810a:	6028      	str	r0, [r5, #0]
 800810c:	6128      	str	r0, [r5, #16]
 800810e:	b930      	cbnz	r0, 800811e <_svfiprintf_r+0x32>
 8008110:	230c      	movs	r3, #12
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	b01d      	add	sp, #116	@ 0x74
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	2340      	movs	r3, #64	@ 0x40
 8008120:	616b      	str	r3, [r5, #20]
 8008122:	2300      	movs	r3, #0
 8008124:	9309      	str	r3, [sp, #36]	@ 0x24
 8008126:	2320      	movs	r3, #32
 8008128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800812c:	2330      	movs	r3, #48	@ 0x30
 800812e:	f04f 0901 	mov.w	r9, #1
 8008132:	f8cd 800c 	str.w	r8, [sp, #12]
 8008136:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80082d0 <_svfiprintf_r+0x1e4>
 800813a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800813e:	4623      	mov	r3, r4
 8008140:	469a      	mov	sl, r3
 8008142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008146:	b10a      	cbz	r2, 800814c <_svfiprintf_r+0x60>
 8008148:	2a25      	cmp	r2, #37	@ 0x25
 800814a:	d1f9      	bne.n	8008140 <_svfiprintf_r+0x54>
 800814c:	ebba 0b04 	subs.w	fp, sl, r4
 8008150:	d00b      	beq.n	800816a <_svfiprintf_r+0x7e>
 8008152:	465b      	mov	r3, fp
 8008154:	4622      	mov	r2, r4
 8008156:	4629      	mov	r1, r5
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ff6b 	bl	8008034 <__ssputs_r>
 800815e:	3001      	adds	r0, #1
 8008160:	f000 80a7 	beq.w	80082b2 <_svfiprintf_r+0x1c6>
 8008164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008166:	445a      	add	r2, fp
 8008168:	9209      	str	r2, [sp, #36]	@ 0x24
 800816a:	f89a 3000 	ldrb.w	r3, [sl]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 809f 	beq.w	80082b2 <_svfiprintf_r+0x1c6>
 8008174:	2300      	movs	r3, #0
 8008176:	f04f 32ff 	mov.w	r2, #4294967295
 800817a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800817e:	f10a 0a01 	add.w	sl, sl, #1
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	9307      	str	r3, [sp, #28]
 8008186:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800818a:	931a      	str	r3, [sp, #104]	@ 0x68
 800818c:	4654      	mov	r4, sl
 800818e:	2205      	movs	r2, #5
 8008190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008194:	484e      	ldr	r0, [pc, #312]	@ (80082d0 <_svfiprintf_r+0x1e4>)
 8008196:	f7fe fc62 	bl	8006a5e <memchr>
 800819a:	9a04      	ldr	r2, [sp, #16]
 800819c:	b9d8      	cbnz	r0, 80081d6 <_svfiprintf_r+0xea>
 800819e:	06d0      	lsls	r0, r2, #27
 80081a0:	bf44      	itt	mi
 80081a2:	2320      	movmi	r3, #32
 80081a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081a8:	0711      	lsls	r1, r2, #28
 80081aa:	bf44      	itt	mi
 80081ac:	232b      	movmi	r3, #43	@ 0x2b
 80081ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b2:	f89a 3000 	ldrb.w	r3, [sl]
 80081b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b8:	d015      	beq.n	80081e6 <_svfiprintf_r+0xfa>
 80081ba:	4654      	mov	r4, sl
 80081bc:	2000      	movs	r0, #0
 80081be:	f04f 0c0a 	mov.w	ip, #10
 80081c2:	9a07      	ldr	r2, [sp, #28]
 80081c4:	4621      	mov	r1, r4
 80081c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ca:	3b30      	subs	r3, #48	@ 0x30
 80081cc:	2b09      	cmp	r3, #9
 80081ce:	d94b      	bls.n	8008268 <_svfiprintf_r+0x17c>
 80081d0:	b1b0      	cbz	r0, 8008200 <_svfiprintf_r+0x114>
 80081d2:	9207      	str	r2, [sp, #28]
 80081d4:	e014      	b.n	8008200 <_svfiprintf_r+0x114>
 80081d6:	eba0 0308 	sub.w	r3, r0, r8
 80081da:	fa09 f303 	lsl.w	r3, r9, r3
 80081de:	4313      	orrs	r3, r2
 80081e0:	46a2      	mov	sl, r4
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	e7d2      	b.n	800818c <_svfiprintf_r+0xa0>
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	1d19      	adds	r1, r3, #4
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	9103      	str	r1, [sp, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bfbb      	ittet	lt
 80081f2:	425b      	neglt	r3, r3
 80081f4:	f042 0202 	orrlt.w	r2, r2, #2
 80081f8:	9307      	strge	r3, [sp, #28]
 80081fa:	9307      	strlt	r3, [sp, #28]
 80081fc:	bfb8      	it	lt
 80081fe:	9204      	strlt	r2, [sp, #16]
 8008200:	7823      	ldrb	r3, [r4, #0]
 8008202:	2b2e      	cmp	r3, #46	@ 0x2e
 8008204:	d10a      	bne.n	800821c <_svfiprintf_r+0x130>
 8008206:	7863      	ldrb	r3, [r4, #1]
 8008208:	2b2a      	cmp	r3, #42	@ 0x2a
 800820a:	d132      	bne.n	8008272 <_svfiprintf_r+0x186>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	3402      	adds	r4, #2
 8008210:	1d1a      	adds	r2, r3, #4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	9203      	str	r2, [sp, #12]
 8008216:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80082d4 <_svfiprintf_r+0x1e8>
 8008220:	2203      	movs	r2, #3
 8008222:	4650      	mov	r0, sl
 8008224:	7821      	ldrb	r1, [r4, #0]
 8008226:	f7fe fc1a 	bl	8006a5e <memchr>
 800822a:	b138      	cbz	r0, 800823c <_svfiprintf_r+0x150>
 800822c:	2240      	movs	r2, #64	@ 0x40
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	eba0 000a 	sub.w	r0, r0, sl
 8008234:	4082      	lsls	r2, r0
 8008236:	4313      	orrs	r3, r2
 8008238:	3401      	adds	r4, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008240:	2206      	movs	r2, #6
 8008242:	4825      	ldr	r0, [pc, #148]	@ (80082d8 <_svfiprintf_r+0x1ec>)
 8008244:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008248:	f7fe fc09 	bl	8006a5e <memchr>
 800824c:	2800      	cmp	r0, #0
 800824e:	d036      	beq.n	80082be <_svfiprintf_r+0x1d2>
 8008250:	4b22      	ldr	r3, [pc, #136]	@ (80082dc <_svfiprintf_r+0x1f0>)
 8008252:	bb1b      	cbnz	r3, 800829c <_svfiprintf_r+0x1b0>
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	3307      	adds	r3, #7
 8008258:	f023 0307 	bic.w	r3, r3, #7
 800825c:	3308      	adds	r3, #8
 800825e:	9303      	str	r3, [sp, #12]
 8008260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008262:	4433      	add	r3, r6
 8008264:	9309      	str	r3, [sp, #36]	@ 0x24
 8008266:	e76a      	b.n	800813e <_svfiprintf_r+0x52>
 8008268:	460c      	mov	r4, r1
 800826a:	2001      	movs	r0, #1
 800826c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008270:	e7a8      	b.n	80081c4 <_svfiprintf_r+0xd8>
 8008272:	2300      	movs	r3, #0
 8008274:	f04f 0c0a 	mov.w	ip, #10
 8008278:	4619      	mov	r1, r3
 800827a:	3401      	adds	r4, #1
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	4620      	mov	r0, r4
 8008280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008284:	3a30      	subs	r2, #48	@ 0x30
 8008286:	2a09      	cmp	r2, #9
 8008288:	d903      	bls.n	8008292 <_svfiprintf_r+0x1a6>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0c6      	beq.n	800821c <_svfiprintf_r+0x130>
 800828e:	9105      	str	r1, [sp, #20]
 8008290:	e7c4      	b.n	800821c <_svfiprintf_r+0x130>
 8008292:	4604      	mov	r4, r0
 8008294:	2301      	movs	r3, #1
 8008296:	fb0c 2101 	mla	r1, ip, r1, r2
 800829a:	e7f0      	b.n	800827e <_svfiprintf_r+0x192>
 800829c:	ab03      	add	r3, sp, #12
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	462a      	mov	r2, r5
 80082a2:	4638      	mov	r0, r7
 80082a4:	4b0e      	ldr	r3, [pc, #56]	@ (80082e0 <_svfiprintf_r+0x1f4>)
 80082a6:	a904      	add	r1, sp, #16
 80082a8:	f7fd fe76 	bl	8005f98 <_printf_float>
 80082ac:	1c42      	adds	r2, r0, #1
 80082ae:	4606      	mov	r6, r0
 80082b0:	d1d6      	bne.n	8008260 <_svfiprintf_r+0x174>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	065b      	lsls	r3, r3, #25
 80082b6:	f53f af2d 	bmi.w	8008114 <_svfiprintf_r+0x28>
 80082ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082bc:	e72c      	b.n	8008118 <_svfiprintf_r+0x2c>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <_svfiprintf_r+0x1f4>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	f7fe f903 	bl	80064d4 <_printf_i>
 80082ce:	e7ed      	b.n	80082ac <_svfiprintf_r+0x1c0>
 80082d0:	08008e98 	.word	0x08008e98
 80082d4:	08008e9e 	.word	0x08008e9e
 80082d8:	08008ea2 	.word	0x08008ea2
 80082dc:	08005f99 	.word	0x08005f99
 80082e0:	08008035 	.word	0x08008035

080082e4 <__sflush_r>:
 80082e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	0716      	lsls	r6, r2, #28
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	d454      	bmi.n	800839c <__sflush_r+0xb8>
 80082f2:	684b      	ldr	r3, [r1, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc02      	bgt.n	80082fe <__sflush_r+0x1a>
 80082f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dd48      	ble.n	8008390 <__sflush_r+0xac>
 80082fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008300:	2e00      	cmp	r6, #0
 8008302:	d045      	beq.n	8008390 <__sflush_r+0xac>
 8008304:	2300      	movs	r3, #0
 8008306:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800830a:	682f      	ldr	r7, [r5, #0]
 800830c:	6a21      	ldr	r1, [r4, #32]
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	d030      	beq.n	8008374 <__sflush_r+0x90>
 8008312:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	0759      	lsls	r1, r3, #29
 8008318:	d505      	bpl.n	8008326 <__sflush_r+0x42>
 800831a:	6863      	ldr	r3, [r4, #4]
 800831c:	1ad2      	subs	r2, r2, r3
 800831e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008320:	b10b      	cbz	r3, 8008326 <__sflush_r+0x42>
 8008322:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	2300      	movs	r3, #0
 8008328:	4628      	mov	r0, r5
 800832a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800832c:	6a21      	ldr	r1, [r4, #32]
 800832e:	47b0      	blx	r6
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	d106      	bne.n	8008344 <__sflush_r+0x60>
 8008336:	6829      	ldr	r1, [r5, #0]
 8008338:	291d      	cmp	r1, #29
 800833a:	d82b      	bhi.n	8008394 <__sflush_r+0xb0>
 800833c:	4a28      	ldr	r2, [pc, #160]	@ (80083e0 <__sflush_r+0xfc>)
 800833e:	410a      	asrs	r2, r1
 8008340:	07d6      	lsls	r6, r2, #31
 8008342:	d427      	bmi.n	8008394 <__sflush_r+0xb0>
 8008344:	2200      	movs	r2, #0
 8008346:	6062      	str	r2, [r4, #4]
 8008348:	6922      	ldr	r2, [r4, #16]
 800834a:	04d9      	lsls	r1, r3, #19
 800834c:	6022      	str	r2, [r4, #0]
 800834e:	d504      	bpl.n	800835a <__sflush_r+0x76>
 8008350:	1c42      	adds	r2, r0, #1
 8008352:	d101      	bne.n	8008358 <__sflush_r+0x74>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b903      	cbnz	r3, 800835a <__sflush_r+0x76>
 8008358:	6560      	str	r0, [r4, #84]	@ 0x54
 800835a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800835c:	602f      	str	r7, [r5, #0]
 800835e:	b1b9      	cbz	r1, 8008390 <__sflush_r+0xac>
 8008360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008364:	4299      	cmp	r1, r3
 8008366:	d002      	beq.n	800836e <__sflush_r+0x8a>
 8008368:	4628      	mov	r0, r5
 800836a:	f7ff f9e5 	bl	8007738 <_free_r>
 800836e:	2300      	movs	r3, #0
 8008370:	6363      	str	r3, [r4, #52]	@ 0x34
 8008372:	e00d      	b.n	8008390 <__sflush_r+0xac>
 8008374:	2301      	movs	r3, #1
 8008376:	4628      	mov	r0, r5
 8008378:	47b0      	blx	r6
 800837a:	4602      	mov	r2, r0
 800837c:	1c50      	adds	r0, r2, #1
 800837e:	d1c9      	bne.n	8008314 <__sflush_r+0x30>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0c6      	beq.n	8008314 <__sflush_r+0x30>
 8008386:	2b1d      	cmp	r3, #29
 8008388:	d001      	beq.n	800838e <__sflush_r+0xaa>
 800838a:	2b16      	cmp	r3, #22
 800838c:	d11d      	bne.n	80083ca <__sflush_r+0xe6>
 800838e:	602f      	str	r7, [r5, #0]
 8008390:	2000      	movs	r0, #0
 8008392:	e021      	b.n	80083d8 <__sflush_r+0xf4>
 8008394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008398:	b21b      	sxth	r3, r3
 800839a:	e01a      	b.n	80083d2 <__sflush_r+0xee>
 800839c:	690f      	ldr	r7, [r1, #16]
 800839e:	2f00      	cmp	r7, #0
 80083a0:	d0f6      	beq.n	8008390 <__sflush_r+0xac>
 80083a2:	0793      	lsls	r3, r2, #30
 80083a4:	bf18      	it	ne
 80083a6:	2300      	movne	r3, #0
 80083a8:	680e      	ldr	r6, [r1, #0]
 80083aa:	bf08      	it	eq
 80083ac:	694b      	ldreq	r3, [r1, #20]
 80083ae:	1bf6      	subs	r6, r6, r7
 80083b0:	600f      	str	r7, [r1, #0]
 80083b2:	608b      	str	r3, [r1, #8]
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	ddeb      	ble.n	8008390 <__sflush_r+0xac>
 80083b8:	4633      	mov	r3, r6
 80083ba:	463a      	mov	r2, r7
 80083bc:	4628      	mov	r0, r5
 80083be:	6a21      	ldr	r1, [r4, #32]
 80083c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80083c4:	47e0      	blx	ip
 80083c6:	2800      	cmp	r0, #0
 80083c8:	dc07      	bgt.n	80083da <__sflush_r+0xf6>
 80083ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295
 80083d6:	81a3      	strh	r3, [r4, #12]
 80083d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083da:	4407      	add	r7, r0
 80083dc:	1a36      	subs	r6, r6, r0
 80083de:	e7e9      	b.n	80083b4 <__sflush_r+0xd0>
 80083e0:	dfbffffe 	.word	0xdfbffffe

080083e4 <_fflush_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	690b      	ldr	r3, [r1, #16]
 80083e8:	4605      	mov	r5, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	b913      	cbnz	r3, 80083f4 <_fflush_r+0x10>
 80083ee:	2500      	movs	r5, #0
 80083f0:	4628      	mov	r0, r5
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	b118      	cbz	r0, 80083fe <_fflush_r+0x1a>
 80083f6:	6a03      	ldr	r3, [r0, #32]
 80083f8:	b90b      	cbnz	r3, 80083fe <_fflush_r+0x1a>
 80083fa:	f7fe fa17 	bl	800682c <__sinit>
 80083fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0f3      	beq.n	80083ee <_fflush_r+0xa>
 8008406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008408:	07d0      	lsls	r0, r2, #31
 800840a:	d404      	bmi.n	8008416 <_fflush_r+0x32>
 800840c:	0599      	lsls	r1, r3, #22
 800840e:	d402      	bmi.n	8008416 <_fflush_r+0x32>
 8008410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008412:	f7fe fb22 	bl	8006a5a <__retarget_lock_acquire_recursive>
 8008416:	4628      	mov	r0, r5
 8008418:	4621      	mov	r1, r4
 800841a:	f7ff ff63 	bl	80082e4 <__sflush_r>
 800841e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008420:	4605      	mov	r5, r0
 8008422:	07da      	lsls	r2, r3, #31
 8008424:	d4e4      	bmi.n	80083f0 <_fflush_r+0xc>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	059b      	lsls	r3, r3, #22
 800842a:	d4e1      	bmi.n	80083f0 <_fflush_r+0xc>
 800842c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800842e:	f7fe fb15 	bl	8006a5c <__retarget_lock_release_recursive>
 8008432:	e7dd      	b.n	80083f0 <_fflush_r+0xc>

08008434 <memmove>:
 8008434:	4288      	cmp	r0, r1
 8008436:	b510      	push	{r4, lr}
 8008438:	eb01 0402 	add.w	r4, r1, r2
 800843c:	d902      	bls.n	8008444 <memmove+0x10>
 800843e:	4284      	cmp	r4, r0
 8008440:	4623      	mov	r3, r4
 8008442:	d807      	bhi.n	8008454 <memmove+0x20>
 8008444:	1e43      	subs	r3, r0, #1
 8008446:	42a1      	cmp	r1, r4
 8008448:	d008      	beq.n	800845c <memmove+0x28>
 800844a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800844e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008452:	e7f8      	b.n	8008446 <memmove+0x12>
 8008454:	4601      	mov	r1, r0
 8008456:	4402      	add	r2, r0
 8008458:	428a      	cmp	r2, r1
 800845a:	d100      	bne.n	800845e <memmove+0x2a>
 800845c:	bd10      	pop	{r4, pc}
 800845e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008466:	e7f7      	b.n	8008458 <memmove+0x24>

08008468 <_sbrk_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	2300      	movs	r3, #0
 800846c:	4d05      	ldr	r5, [pc, #20]	@ (8008484 <_sbrk_r+0x1c>)
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7f9 fbc8 	bl	8001c08 <_sbrk>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_sbrk_r+0x1a>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_sbrk_r+0x1a>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20002158 	.word	0x20002158

08008488 <__assert_func>:
 8008488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800848a:	4614      	mov	r4, r2
 800848c:	461a      	mov	r2, r3
 800848e:	4b09      	ldr	r3, [pc, #36]	@ (80084b4 <__assert_func+0x2c>)
 8008490:	4605      	mov	r5, r0
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68d8      	ldr	r0, [r3, #12]
 8008496:	b954      	cbnz	r4, 80084ae <__assert_func+0x26>
 8008498:	4b07      	ldr	r3, [pc, #28]	@ (80084b8 <__assert_func+0x30>)
 800849a:	461c      	mov	r4, r3
 800849c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084a0:	9100      	str	r1, [sp, #0]
 80084a2:	462b      	mov	r3, r5
 80084a4:	4905      	ldr	r1, [pc, #20]	@ (80084bc <__assert_func+0x34>)
 80084a6:	f000 f86f 	bl	8008588 <fiprintf>
 80084aa:	f000 f87f 	bl	80085ac <abort>
 80084ae:	4b04      	ldr	r3, [pc, #16]	@ (80084c0 <__assert_func+0x38>)
 80084b0:	e7f4      	b.n	800849c <__assert_func+0x14>
 80084b2:	bf00      	nop
 80084b4:	2000005c 	.word	0x2000005c
 80084b8:	08008eee 	.word	0x08008eee
 80084bc:	08008ec0 	.word	0x08008ec0
 80084c0:	08008eb3 	.word	0x08008eb3

080084c4 <_calloc_r>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	fba1 5402 	umull	r5, r4, r1, r2
 80084ca:	b93c      	cbnz	r4, 80084dc <_calloc_r+0x18>
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7ff f9a5 	bl	800781c <_malloc_r>
 80084d2:	4606      	mov	r6, r0
 80084d4:	b928      	cbnz	r0, 80084e2 <_calloc_r+0x1e>
 80084d6:	2600      	movs	r6, #0
 80084d8:	4630      	mov	r0, r6
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	220c      	movs	r2, #12
 80084de:	6002      	str	r2, [r0, #0]
 80084e0:	e7f9      	b.n	80084d6 <_calloc_r+0x12>
 80084e2:	462a      	mov	r2, r5
 80084e4:	4621      	mov	r1, r4
 80084e6:	f7fe fa3a 	bl	800695e <memset>
 80084ea:	e7f5      	b.n	80084d8 <_calloc_r+0x14>

080084ec <__ascii_mbtowc>:
 80084ec:	b082      	sub	sp, #8
 80084ee:	b901      	cbnz	r1, 80084f2 <__ascii_mbtowc+0x6>
 80084f0:	a901      	add	r1, sp, #4
 80084f2:	b142      	cbz	r2, 8008506 <__ascii_mbtowc+0x1a>
 80084f4:	b14b      	cbz	r3, 800850a <__ascii_mbtowc+0x1e>
 80084f6:	7813      	ldrb	r3, [r2, #0]
 80084f8:	600b      	str	r3, [r1, #0]
 80084fa:	7812      	ldrb	r2, [r2, #0]
 80084fc:	1e10      	subs	r0, r2, #0
 80084fe:	bf18      	it	ne
 8008500:	2001      	movne	r0, #1
 8008502:	b002      	add	sp, #8
 8008504:	4770      	bx	lr
 8008506:	4610      	mov	r0, r2
 8008508:	e7fb      	b.n	8008502 <__ascii_mbtowc+0x16>
 800850a:	f06f 0001 	mvn.w	r0, #1
 800850e:	e7f8      	b.n	8008502 <__ascii_mbtowc+0x16>

08008510 <_realloc_r>:
 8008510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	4680      	mov	r8, r0
 8008516:	4615      	mov	r5, r2
 8008518:	460c      	mov	r4, r1
 800851a:	b921      	cbnz	r1, 8008526 <_realloc_r+0x16>
 800851c:	4611      	mov	r1, r2
 800851e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	f7ff b97b 	b.w	800781c <_malloc_r>
 8008526:	b92a      	cbnz	r2, 8008534 <_realloc_r+0x24>
 8008528:	f7ff f906 	bl	8007738 <_free_r>
 800852c:	2400      	movs	r4, #0
 800852e:	4620      	mov	r0, r4
 8008530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008534:	f000 f841 	bl	80085ba <_malloc_usable_size_r>
 8008538:	4285      	cmp	r5, r0
 800853a:	4606      	mov	r6, r0
 800853c:	d802      	bhi.n	8008544 <_realloc_r+0x34>
 800853e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008542:	d8f4      	bhi.n	800852e <_realloc_r+0x1e>
 8008544:	4629      	mov	r1, r5
 8008546:	4640      	mov	r0, r8
 8008548:	f7ff f968 	bl	800781c <_malloc_r>
 800854c:	4607      	mov	r7, r0
 800854e:	2800      	cmp	r0, #0
 8008550:	d0ec      	beq.n	800852c <_realloc_r+0x1c>
 8008552:	42b5      	cmp	r5, r6
 8008554:	462a      	mov	r2, r5
 8008556:	4621      	mov	r1, r4
 8008558:	bf28      	it	cs
 800855a:	4632      	movcs	r2, r6
 800855c:	f7fe fa8d 	bl	8006a7a <memcpy>
 8008560:	4621      	mov	r1, r4
 8008562:	4640      	mov	r0, r8
 8008564:	f7ff f8e8 	bl	8007738 <_free_r>
 8008568:	463c      	mov	r4, r7
 800856a:	e7e0      	b.n	800852e <_realloc_r+0x1e>

0800856c <__ascii_wctomb>:
 800856c:	4603      	mov	r3, r0
 800856e:	4608      	mov	r0, r1
 8008570:	b141      	cbz	r1, 8008584 <__ascii_wctomb+0x18>
 8008572:	2aff      	cmp	r2, #255	@ 0xff
 8008574:	d904      	bls.n	8008580 <__ascii_wctomb+0x14>
 8008576:	228a      	movs	r2, #138	@ 0x8a
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	4770      	bx	lr
 8008580:	2001      	movs	r0, #1
 8008582:	700a      	strb	r2, [r1, #0]
 8008584:	4770      	bx	lr
	...

08008588 <fiprintf>:
 8008588:	b40e      	push	{r1, r2, r3}
 800858a:	b503      	push	{r0, r1, lr}
 800858c:	4601      	mov	r1, r0
 800858e:	ab03      	add	r3, sp, #12
 8008590:	4805      	ldr	r0, [pc, #20]	@ (80085a8 <fiprintf+0x20>)
 8008592:	f853 2b04 	ldr.w	r2, [r3], #4
 8008596:	6800      	ldr	r0, [r0, #0]
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	f000 f83d 	bl	8008618 <_vfiprintf_r>
 800859e:	b002      	add	sp, #8
 80085a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a4:	b003      	add	sp, #12
 80085a6:	4770      	bx	lr
 80085a8:	2000005c 	.word	0x2000005c

080085ac <abort>:
 80085ac:	2006      	movs	r0, #6
 80085ae:	b508      	push	{r3, lr}
 80085b0:	f000 fa06 	bl	80089c0 <raise>
 80085b4:	2001      	movs	r0, #1
 80085b6:	f7f9 fab3 	bl	8001b20 <_exit>

080085ba <_malloc_usable_size_r>:
 80085ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085be:	1f18      	subs	r0, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bfbc      	itt	lt
 80085c4:	580b      	ldrlt	r3, [r1, r0]
 80085c6:	18c0      	addlt	r0, r0, r3
 80085c8:	4770      	bx	lr

080085ca <__sfputc_r>:
 80085ca:	6893      	ldr	r3, [r2, #8]
 80085cc:	b410      	push	{r4}
 80085ce:	3b01      	subs	r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	6093      	str	r3, [r2, #8]
 80085d4:	da07      	bge.n	80085e6 <__sfputc_r+0x1c>
 80085d6:	6994      	ldr	r4, [r2, #24]
 80085d8:	42a3      	cmp	r3, r4
 80085da:	db01      	blt.n	80085e0 <__sfputc_r+0x16>
 80085dc:	290a      	cmp	r1, #10
 80085de:	d102      	bne.n	80085e6 <__sfputc_r+0x1c>
 80085e0:	bc10      	pop	{r4}
 80085e2:	f000 b931 	b.w	8008848 <__swbuf_r>
 80085e6:	6813      	ldr	r3, [r2, #0]
 80085e8:	1c58      	adds	r0, r3, #1
 80085ea:	6010      	str	r0, [r2, #0]
 80085ec:	7019      	strb	r1, [r3, #0]
 80085ee:	4608      	mov	r0, r1
 80085f0:	bc10      	pop	{r4}
 80085f2:	4770      	bx	lr

080085f4 <__sfputs_r>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	4606      	mov	r6, r0
 80085f8:	460f      	mov	r7, r1
 80085fa:	4614      	mov	r4, r2
 80085fc:	18d5      	adds	r5, r2, r3
 80085fe:	42ac      	cmp	r4, r5
 8008600:	d101      	bne.n	8008606 <__sfputs_r+0x12>
 8008602:	2000      	movs	r0, #0
 8008604:	e007      	b.n	8008616 <__sfputs_r+0x22>
 8008606:	463a      	mov	r2, r7
 8008608:	4630      	mov	r0, r6
 800860a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800860e:	f7ff ffdc 	bl	80085ca <__sfputc_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d1f3      	bne.n	80085fe <__sfputs_r+0xa>
 8008616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008618 <_vfiprintf_r>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	460d      	mov	r5, r1
 800861e:	4614      	mov	r4, r2
 8008620:	4698      	mov	r8, r3
 8008622:	4606      	mov	r6, r0
 8008624:	b09d      	sub	sp, #116	@ 0x74
 8008626:	b118      	cbz	r0, 8008630 <_vfiprintf_r+0x18>
 8008628:	6a03      	ldr	r3, [r0, #32]
 800862a:	b90b      	cbnz	r3, 8008630 <_vfiprintf_r+0x18>
 800862c:	f7fe f8fe 	bl	800682c <__sinit>
 8008630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008632:	07d9      	lsls	r1, r3, #31
 8008634:	d405      	bmi.n	8008642 <_vfiprintf_r+0x2a>
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	059a      	lsls	r2, r3, #22
 800863a:	d402      	bmi.n	8008642 <_vfiprintf_r+0x2a>
 800863c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800863e:	f7fe fa0c 	bl	8006a5a <__retarget_lock_acquire_recursive>
 8008642:	89ab      	ldrh	r3, [r5, #12]
 8008644:	071b      	lsls	r3, r3, #28
 8008646:	d501      	bpl.n	800864c <_vfiprintf_r+0x34>
 8008648:	692b      	ldr	r3, [r5, #16]
 800864a:	b99b      	cbnz	r3, 8008674 <_vfiprintf_r+0x5c>
 800864c:	4629      	mov	r1, r5
 800864e:	4630      	mov	r0, r6
 8008650:	f000 f938 	bl	80088c4 <__swsetup_r>
 8008654:	b170      	cbz	r0, 8008674 <_vfiprintf_r+0x5c>
 8008656:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008658:	07dc      	lsls	r4, r3, #31
 800865a:	d504      	bpl.n	8008666 <_vfiprintf_r+0x4e>
 800865c:	f04f 30ff 	mov.w	r0, #4294967295
 8008660:	b01d      	add	sp, #116	@ 0x74
 8008662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	0598      	lsls	r0, r3, #22
 800866a:	d4f7      	bmi.n	800865c <_vfiprintf_r+0x44>
 800866c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800866e:	f7fe f9f5 	bl	8006a5c <__retarget_lock_release_recursive>
 8008672:	e7f3      	b.n	800865c <_vfiprintf_r+0x44>
 8008674:	2300      	movs	r3, #0
 8008676:	9309      	str	r3, [sp, #36]	@ 0x24
 8008678:	2320      	movs	r3, #32
 800867a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800867e:	2330      	movs	r3, #48	@ 0x30
 8008680:	f04f 0901 	mov.w	r9, #1
 8008684:	f8cd 800c 	str.w	r8, [sp, #12]
 8008688:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008834 <_vfiprintf_r+0x21c>
 800868c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008690:	4623      	mov	r3, r4
 8008692:	469a      	mov	sl, r3
 8008694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008698:	b10a      	cbz	r2, 800869e <_vfiprintf_r+0x86>
 800869a:	2a25      	cmp	r2, #37	@ 0x25
 800869c:	d1f9      	bne.n	8008692 <_vfiprintf_r+0x7a>
 800869e:	ebba 0b04 	subs.w	fp, sl, r4
 80086a2:	d00b      	beq.n	80086bc <_vfiprintf_r+0xa4>
 80086a4:	465b      	mov	r3, fp
 80086a6:	4622      	mov	r2, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7ff ffa2 	bl	80085f4 <__sfputs_r>
 80086b0:	3001      	adds	r0, #1
 80086b2:	f000 80a7 	beq.w	8008804 <_vfiprintf_r+0x1ec>
 80086b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086b8:	445a      	add	r2, fp
 80086ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80086bc:	f89a 3000 	ldrb.w	r3, [sl]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 809f 	beq.w	8008804 <_vfiprintf_r+0x1ec>
 80086c6:	2300      	movs	r3, #0
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086d0:	f10a 0a01 	add.w	sl, sl, #1
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	9307      	str	r3, [sp, #28]
 80086d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80086de:	4654      	mov	r4, sl
 80086e0:	2205      	movs	r2, #5
 80086e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e6:	4853      	ldr	r0, [pc, #332]	@ (8008834 <_vfiprintf_r+0x21c>)
 80086e8:	f7fe f9b9 	bl	8006a5e <memchr>
 80086ec:	9a04      	ldr	r2, [sp, #16]
 80086ee:	b9d8      	cbnz	r0, 8008728 <_vfiprintf_r+0x110>
 80086f0:	06d1      	lsls	r1, r2, #27
 80086f2:	bf44      	itt	mi
 80086f4:	2320      	movmi	r3, #32
 80086f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086fa:	0713      	lsls	r3, r2, #28
 80086fc:	bf44      	itt	mi
 80086fe:	232b      	movmi	r3, #43	@ 0x2b
 8008700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008704:	f89a 3000 	ldrb.w	r3, [sl]
 8008708:	2b2a      	cmp	r3, #42	@ 0x2a
 800870a:	d015      	beq.n	8008738 <_vfiprintf_r+0x120>
 800870c:	4654      	mov	r4, sl
 800870e:	2000      	movs	r0, #0
 8008710:	f04f 0c0a 	mov.w	ip, #10
 8008714:	9a07      	ldr	r2, [sp, #28]
 8008716:	4621      	mov	r1, r4
 8008718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800871c:	3b30      	subs	r3, #48	@ 0x30
 800871e:	2b09      	cmp	r3, #9
 8008720:	d94b      	bls.n	80087ba <_vfiprintf_r+0x1a2>
 8008722:	b1b0      	cbz	r0, 8008752 <_vfiprintf_r+0x13a>
 8008724:	9207      	str	r2, [sp, #28]
 8008726:	e014      	b.n	8008752 <_vfiprintf_r+0x13a>
 8008728:	eba0 0308 	sub.w	r3, r0, r8
 800872c:	fa09 f303 	lsl.w	r3, r9, r3
 8008730:	4313      	orrs	r3, r2
 8008732:	46a2      	mov	sl, r4
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	e7d2      	b.n	80086de <_vfiprintf_r+0xc6>
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	1d19      	adds	r1, r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	9103      	str	r1, [sp, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	bfbb      	ittet	lt
 8008744:	425b      	neglt	r3, r3
 8008746:	f042 0202 	orrlt.w	r2, r2, #2
 800874a:	9307      	strge	r3, [sp, #28]
 800874c:	9307      	strlt	r3, [sp, #28]
 800874e:	bfb8      	it	lt
 8008750:	9204      	strlt	r2, [sp, #16]
 8008752:	7823      	ldrb	r3, [r4, #0]
 8008754:	2b2e      	cmp	r3, #46	@ 0x2e
 8008756:	d10a      	bne.n	800876e <_vfiprintf_r+0x156>
 8008758:	7863      	ldrb	r3, [r4, #1]
 800875a:	2b2a      	cmp	r3, #42	@ 0x2a
 800875c:	d132      	bne.n	80087c4 <_vfiprintf_r+0x1ac>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	3402      	adds	r4, #2
 8008762:	1d1a      	adds	r2, r3, #4
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	9203      	str	r2, [sp, #12]
 8008768:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800876c:	9305      	str	r3, [sp, #20]
 800876e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008838 <_vfiprintf_r+0x220>
 8008772:	2203      	movs	r2, #3
 8008774:	4650      	mov	r0, sl
 8008776:	7821      	ldrb	r1, [r4, #0]
 8008778:	f7fe f971 	bl	8006a5e <memchr>
 800877c:	b138      	cbz	r0, 800878e <_vfiprintf_r+0x176>
 800877e:	2240      	movs	r2, #64	@ 0x40
 8008780:	9b04      	ldr	r3, [sp, #16]
 8008782:	eba0 000a 	sub.w	r0, r0, sl
 8008786:	4082      	lsls	r2, r0
 8008788:	4313      	orrs	r3, r2
 800878a:	3401      	adds	r4, #1
 800878c:	9304      	str	r3, [sp, #16]
 800878e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008792:	2206      	movs	r2, #6
 8008794:	4829      	ldr	r0, [pc, #164]	@ (800883c <_vfiprintf_r+0x224>)
 8008796:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800879a:	f7fe f960 	bl	8006a5e <memchr>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d03f      	beq.n	8008822 <_vfiprintf_r+0x20a>
 80087a2:	4b27      	ldr	r3, [pc, #156]	@ (8008840 <_vfiprintf_r+0x228>)
 80087a4:	bb1b      	cbnz	r3, 80087ee <_vfiprintf_r+0x1d6>
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	3307      	adds	r3, #7
 80087aa:	f023 0307 	bic.w	r3, r3, #7
 80087ae:	3308      	adds	r3, #8
 80087b0:	9303      	str	r3, [sp, #12]
 80087b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b4:	443b      	add	r3, r7
 80087b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b8:	e76a      	b.n	8008690 <_vfiprintf_r+0x78>
 80087ba:	460c      	mov	r4, r1
 80087bc:	2001      	movs	r0, #1
 80087be:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c2:	e7a8      	b.n	8008716 <_vfiprintf_r+0xfe>
 80087c4:	2300      	movs	r3, #0
 80087c6:	f04f 0c0a 	mov.w	ip, #10
 80087ca:	4619      	mov	r1, r3
 80087cc:	3401      	adds	r4, #1
 80087ce:	9305      	str	r3, [sp, #20]
 80087d0:	4620      	mov	r0, r4
 80087d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087d6:	3a30      	subs	r2, #48	@ 0x30
 80087d8:	2a09      	cmp	r2, #9
 80087da:	d903      	bls.n	80087e4 <_vfiprintf_r+0x1cc>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d0c6      	beq.n	800876e <_vfiprintf_r+0x156>
 80087e0:	9105      	str	r1, [sp, #20]
 80087e2:	e7c4      	b.n	800876e <_vfiprintf_r+0x156>
 80087e4:	4604      	mov	r4, r0
 80087e6:	2301      	movs	r3, #1
 80087e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ec:	e7f0      	b.n	80087d0 <_vfiprintf_r+0x1b8>
 80087ee:	ab03      	add	r3, sp, #12
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	462a      	mov	r2, r5
 80087f4:	4630      	mov	r0, r6
 80087f6:	4b13      	ldr	r3, [pc, #76]	@ (8008844 <_vfiprintf_r+0x22c>)
 80087f8:	a904      	add	r1, sp, #16
 80087fa:	f7fd fbcd 	bl	8005f98 <_printf_float>
 80087fe:	4607      	mov	r7, r0
 8008800:	1c78      	adds	r0, r7, #1
 8008802:	d1d6      	bne.n	80087b2 <_vfiprintf_r+0x19a>
 8008804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008806:	07d9      	lsls	r1, r3, #31
 8008808:	d405      	bmi.n	8008816 <_vfiprintf_r+0x1fe>
 800880a:	89ab      	ldrh	r3, [r5, #12]
 800880c:	059a      	lsls	r2, r3, #22
 800880e:	d402      	bmi.n	8008816 <_vfiprintf_r+0x1fe>
 8008810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008812:	f7fe f923 	bl	8006a5c <__retarget_lock_release_recursive>
 8008816:	89ab      	ldrh	r3, [r5, #12]
 8008818:	065b      	lsls	r3, r3, #25
 800881a:	f53f af1f 	bmi.w	800865c <_vfiprintf_r+0x44>
 800881e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008820:	e71e      	b.n	8008660 <_vfiprintf_r+0x48>
 8008822:	ab03      	add	r3, sp, #12
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	462a      	mov	r2, r5
 8008828:	4630      	mov	r0, r6
 800882a:	4b06      	ldr	r3, [pc, #24]	@ (8008844 <_vfiprintf_r+0x22c>)
 800882c:	a904      	add	r1, sp, #16
 800882e:	f7fd fe51 	bl	80064d4 <_printf_i>
 8008832:	e7e4      	b.n	80087fe <_vfiprintf_r+0x1e6>
 8008834:	08008e98 	.word	0x08008e98
 8008838:	08008e9e 	.word	0x08008e9e
 800883c:	08008ea2 	.word	0x08008ea2
 8008840:	08005f99 	.word	0x08005f99
 8008844:	080085f5 	.word	0x080085f5

08008848 <__swbuf_r>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	460e      	mov	r6, r1
 800884c:	4614      	mov	r4, r2
 800884e:	4605      	mov	r5, r0
 8008850:	b118      	cbz	r0, 800885a <__swbuf_r+0x12>
 8008852:	6a03      	ldr	r3, [r0, #32]
 8008854:	b90b      	cbnz	r3, 800885a <__swbuf_r+0x12>
 8008856:	f7fd ffe9 	bl	800682c <__sinit>
 800885a:	69a3      	ldr	r3, [r4, #24]
 800885c:	60a3      	str	r3, [r4, #8]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	071a      	lsls	r2, r3, #28
 8008862:	d501      	bpl.n	8008868 <__swbuf_r+0x20>
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	b943      	cbnz	r3, 800887a <__swbuf_r+0x32>
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f82a 	bl	80088c4 <__swsetup_r>
 8008870:	b118      	cbz	r0, 800887a <__swbuf_r+0x32>
 8008872:	f04f 37ff 	mov.w	r7, #4294967295
 8008876:	4638      	mov	r0, r7
 8008878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	6922      	ldr	r2, [r4, #16]
 800887e:	b2f6      	uxtb	r6, r6
 8008880:	1a98      	subs	r0, r3, r2
 8008882:	6963      	ldr	r3, [r4, #20]
 8008884:	4637      	mov	r7, r6
 8008886:	4283      	cmp	r3, r0
 8008888:	dc05      	bgt.n	8008896 <__swbuf_r+0x4e>
 800888a:	4621      	mov	r1, r4
 800888c:	4628      	mov	r0, r5
 800888e:	f7ff fda9 	bl	80083e4 <_fflush_r>
 8008892:	2800      	cmp	r0, #0
 8008894:	d1ed      	bne.n	8008872 <__swbuf_r+0x2a>
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	3b01      	subs	r3, #1
 800889a:	60a3      	str	r3, [r4, #8]
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	6022      	str	r2, [r4, #0]
 80088a2:	701e      	strb	r6, [r3, #0]
 80088a4:	6962      	ldr	r2, [r4, #20]
 80088a6:	1c43      	adds	r3, r0, #1
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d004      	beq.n	80088b6 <__swbuf_r+0x6e>
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	07db      	lsls	r3, r3, #31
 80088b0:	d5e1      	bpl.n	8008876 <__swbuf_r+0x2e>
 80088b2:	2e0a      	cmp	r6, #10
 80088b4:	d1df      	bne.n	8008876 <__swbuf_r+0x2e>
 80088b6:	4621      	mov	r1, r4
 80088b8:	4628      	mov	r0, r5
 80088ba:	f7ff fd93 	bl	80083e4 <_fflush_r>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d0d9      	beq.n	8008876 <__swbuf_r+0x2e>
 80088c2:	e7d6      	b.n	8008872 <__swbuf_r+0x2a>

080088c4 <__swsetup_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4b29      	ldr	r3, [pc, #164]	@ (800896c <__swsetup_r+0xa8>)
 80088c8:	4605      	mov	r5, r0
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	460c      	mov	r4, r1
 80088ce:	b118      	cbz	r0, 80088d8 <__swsetup_r+0x14>
 80088d0:	6a03      	ldr	r3, [r0, #32]
 80088d2:	b90b      	cbnz	r3, 80088d8 <__swsetup_r+0x14>
 80088d4:	f7fd ffaa 	bl	800682c <__sinit>
 80088d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088dc:	0719      	lsls	r1, r3, #28
 80088de:	d422      	bmi.n	8008926 <__swsetup_r+0x62>
 80088e0:	06da      	lsls	r2, r3, #27
 80088e2:	d407      	bmi.n	80088f4 <__swsetup_r+0x30>
 80088e4:	2209      	movs	r2, #9
 80088e6:	602a      	str	r2, [r5, #0]
 80088e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	81a3      	strh	r3, [r4, #12]
 80088f2:	e033      	b.n	800895c <__swsetup_r+0x98>
 80088f4:	0758      	lsls	r0, r3, #29
 80088f6:	d512      	bpl.n	800891e <__swsetup_r+0x5a>
 80088f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088fa:	b141      	cbz	r1, 800890e <__swsetup_r+0x4a>
 80088fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008900:	4299      	cmp	r1, r3
 8008902:	d002      	beq.n	800890a <__swsetup_r+0x46>
 8008904:	4628      	mov	r0, r5
 8008906:	f7fe ff17 	bl	8007738 <_free_r>
 800890a:	2300      	movs	r3, #0
 800890c:	6363      	str	r3, [r4, #52]	@ 0x34
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	2300      	movs	r3, #0
 8008918:	6063      	str	r3, [r4, #4]
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f043 0308 	orr.w	r3, r3, #8
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	6923      	ldr	r3, [r4, #16]
 8008928:	b94b      	cbnz	r3, 800893e <__swsetup_r+0x7a>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008934:	d003      	beq.n	800893e <__swsetup_r+0x7a>
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 f882 	bl	8008a42 <__smakebuf_r>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	f013 0201 	ands.w	r2, r3, #1
 8008946:	d00a      	beq.n	800895e <__swsetup_r+0x9a>
 8008948:	2200      	movs	r2, #0
 800894a:	60a2      	str	r2, [r4, #8]
 800894c:	6962      	ldr	r2, [r4, #20]
 800894e:	4252      	negs	r2, r2
 8008950:	61a2      	str	r2, [r4, #24]
 8008952:	6922      	ldr	r2, [r4, #16]
 8008954:	b942      	cbnz	r2, 8008968 <__swsetup_r+0xa4>
 8008956:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800895a:	d1c5      	bne.n	80088e8 <__swsetup_r+0x24>
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	0799      	lsls	r1, r3, #30
 8008960:	bf58      	it	pl
 8008962:	6962      	ldrpl	r2, [r4, #20]
 8008964:	60a2      	str	r2, [r4, #8]
 8008966:	e7f4      	b.n	8008952 <__swsetup_r+0x8e>
 8008968:	2000      	movs	r0, #0
 800896a:	e7f7      	b.n	800895c <__swsetup_r+0x98>
 800896c:	2000005c 	.word	0x2000005c

08008970 <_raise_r>:
 8008970:	291f      	cmp	r1, #31
 8008972:	b538      	push	{r3, r4, r5, lr}
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	d904      	bls.n	8008984 <_raise_r+0x14>
 800897a:	2316      	movs	r3, #22
 800897c:	6003      	str	r3, [r0, #0]
 800897e:	f04f 30ff 	mov.w	r0, #4294967295
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008986:	b112      	cbz	r2, 800898e <_raise_r+0x1e>
 8008988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800898c:	b94b      	cbnz	r3, 80089a2 <_raise_r+0x32>
 800898e:	4628      	mov	r0, r5
 8008990:	f000 f830 	bl	80089f4 <_getpid_r>
 8008994:	4622      	mov	r2, r4
 8008996:	4601      	mov	r1, r0
 8008998:	4628      	mov	r0, r5
 800899a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800899e:	f000 b817 	b.w	80089d0 <_kill_r>
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d00a      	beq.n	80089bc <_raise_r+0x4c>
 80089a6:	1c59      	adds	r1, r3, #1
 80089a8:	d103      	bne.n	80089b2 <_raise_r+0x42>
 80089aa:	2316      	movs	r3, #22
 80089ac:	6003      	str	r3, [r0, #0]
 80089ae:	2001      	movs	r0, #1
 80089b0:	e7e7      	b.n	8008982 <_raise_r+0x12>
 80089b2:	2100      	movs	r1, #0
 80089b4:	4620      	mov	r0, r4
 80089b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80089ba:	4798      	blx	r3
 80089bc:	2000      	movs	r0, #0
 80089be:	e7e0      	b.n	8008982 <_raise_r+0x12>

080089c0 <raise>:
 80089c0:	4b02      	ldr	r3, [pc, #8]	@ (80089cc <raise+0xc>)
 80089c2:	4601      	mov	r1, r0
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	f7ff bfd3 	b.w	8008970 <_raise_r>
 80089ca:	bf00      	nop
 80089cc:	2000005c 	.word	0x2000005c

080089d0 <_kill_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	2300      	movs	r3, #0
 80089d4:	4d06      	ldr	r5, [pc, #24]	@ (80089f0 <_kill_r+0x20>)
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	f7f9 f88f 	bl	8001b00 <_kill>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d102      	bne.n	80089ec <_kill_r+0x1c>
 80089e6:	682b      	ldr	r3, [r5, #0]
 80089e8:	b103      	cbz	r3, 80089ec <_kill_r+0x1c>
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	20002158 	.word	0x20002158

080089f4 <_getpid_r>:
 80089f4:	f7f9 b87d 	b.w	8001af2 <_getpid>

080089f8 <__swhatbuf_r>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	460c      	mov	r4, r1
 80089fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a00:	4615      	mov	r5, r2
 8008a02:	2900      	cmp	r1, #0
 8008a04:	461e      	mov	r6, r3
 8008a06:	b096      	sub	sp, #88	@ 0x58
 8008a08:	da0c      	bge.n	8008a24 <__swhatbuf_r+0x2c>
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a12:	bf14      	ite	ne
 8008a14:	2340      	movne	r3, #64	@ 0x40
 8008a16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	6031      	str	r1, [r6, #0]
 8008a1e:	602b      	str	r3, [r5, #0]
 8008a20:	b016      	add	sp, #88	@ 0x58
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	466a      	mov	r2, sp
 8008a26:	f000 f849 	bl	8008abc <_fstat_r>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	dbed      	blt.n	8008a0a <__swhatbuf_r+0x12>
 8008a2e:	9901      	ldr	r1, [sp, #4]
 8008a30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a38:	4259      	negs	r1, r3
 8008a3a:	4159      	adcs	r1, r3
 8008a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a40:	e7eb      	b.n	8008a1a <__swhatbuf_r+0x22>

08008a42 <__smakebuf_r>:
 8008a42:	898b      	ldrh	r3, [r1, #12]
 8008a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a46:	079d      	lsls	r5, r3, #30
 8008a48:	4606      	mov	r6, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	d507      	bpl.n	8008a5e <__smakebuf_r+0x1c>
 8008a4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	2301      	movs	r3, #1
 8008a58:	6163      	str	r3, [r4, #20]
 8008a5a:	b003      	add	sp, #12
 8008a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a5e:	466a      	mov	r2, sp
 8008a60:	ab01      	add	r3, sp, #4
 8008a62:	f7ff ffc9 	bl	80089f8 <__swhatbuf_r>
 8008a66:	9f00      	ldr	r7, [sp, #0]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7fe fed5 	bl	800781c <_malloc_r>
 8008a72:	b948      	cbnz	r0, 8008a88 <__smakebuf_r+0x46>
 8008a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a78:	059a      	lsls	r2, r3, #22
 8008a7a:	d4ee      	bmi.n	8008a5a <__smakebuf_r+0x18>
 8008a7c:	f023 0303 	bic.w	r3, r3, #3
 8008a80:	f043 0302 	orr.w	r3, r3, #2
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	e7e2      	b.n	8008a4e <__smakebuf_r+0xc>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	b15b      	cbz	r3, 8008ab2 <__smakebuf_r+0x70>
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa0:	f000 f81e 	bl	8008ae0 <_isatty_r>
 8008aa4:	b128      	cbz	r0, 8008ab2 <__smakebuf_r+0x70>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	f023 0303 	bic.w	r3, r3, #3
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	431d      	orrs	r5, r3
 8008ab6:	81a5      	strh	r5, [r4, #12]
 8008ab8:	e7cf      	b.n	8008a5a <__smakebuf_r+0x18>
	...

08008abc <_fstat_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_fstat_r+0x20>)
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f7f9 f878 	bl	8001bbe <_fstat>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_fstat_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_fstat_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	20002158 	.word	0x20002158

08008ae0 <_isatty_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4d05      	ldr	r5, [pc, #20]	@ (8008afc <_isatty_r+0x1c>)
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f9 f876 	bl	8001bdc <_isatty>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_isatty_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_isatty_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20002158 	.word	0x20002158

08008b00 <_init>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	bf00      	nop
 8008b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b06:	bc08      	pop	{r3}
 8008b08:	469e      	mov	lr, r3
 8008b0a:	4770      	bx	lr

08008b0c <_fini>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr
